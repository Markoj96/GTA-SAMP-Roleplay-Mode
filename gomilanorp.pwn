/*
*/
//---------------------------------------------------------------------------- > INCLUDES
#include <a_samp>
#include <YSI\y_ini>
#include <YSI\y_commands>
#include <YSI\y_timers>
#include <sscanf2>
#include <streamer>
#include <OPSP>

 //--------------------------------------------------------------------------- > DEFINES
#define DIALOG_REGISTER 1
#define DIALOG_LOGIN 2
#define DIALOG_SEX 3
#define DIALOG_AGE 4
#define DIALOG_COUNTRY 5
#define DIALOG_ORG_INVITE 6
#define DIALOG_STATS 7
#define DIALOG_JOB 8
#define DIALOG_BUYVEH 11
#define DIALOG_BUYHOUSE 12
#define DIALOG_TUTORIAL 13
#define DIALOG_SHOP 14
#define DIALOG_CREDIT 15
#define DIALOG_VEHICLE_MENU 20
#define DIALOG_VEHICLE_SELL 21
#define DIALOG_VEHICLE_SELLTO 22
#define DIALOG_VEHICLE_LOCK 23
#define DIALOG_VEHICLE_PARK 24
#define DIALOG_VEHICLE_FIND 25
#define DIALOG_VEHICLE_COLOR 26
#define DIALOG_VEHICLE_SAVE 27
#define DIALOG_LICENCE 28
#define DIALOG_DETECTIVE_SEARCHING 30

#define PATH 		"/Users/%s.ini"
#define BPATH 		"/Businesses/%i.ini"
#define SBPATH 		"/SpecBusinesses/%i.ini"
#define HPATH 		"/Houses/%i.ini"
#define APATH 		"/Apartments/%i.ini"
#define VPATH 		"/Vehicles/%i.ini"
#define BUGREPORT	"Bugs.txt"

#define BELA "{FFFFFF}"
#define BOJA_BELA 0xFFFFFFAA
#define CRVENA "{FA2323}"
#define BOJA_CRVENA 0xFA2323AA
#define ZELENA "{00B400}"
#define BOJA_ZELENA 0x00B400AA
#define LIME "{10F441}"
#define BOJA_LIME 0x10F441AA
#define PLAVA "{0096FA}"
#define BOJA_PLAVA 0x0096FAAA
#define NARANDZASTA "{FA9600}"
#define BOJA_NARANDZASTA 0xFA9600AA

#define SCM SendClientMessage
#define SRM SendRadiusMessage
#define SPD ShowPlayerDialog

#define MAX_ORGS 10

#define MAX_ZONE_NAME 38

enum SAZONE_MAIN
{
		SAZONE_NAME[38],
		Float:SAZONE_AREA[6]
};



static const gSANZones[][SAZONE_MAIN] =
{
	//	NAME                            			AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear, Bone County",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada, Bone County",                  {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine, Whetstone",	                    {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste, Bone County",                 {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club, San Fierro",    		    {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club, San Fierro",        		{-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club, San Fierro",         	{-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club, San Fierro",         	{-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club, San Fierro",         	{-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club, San Fierro",         	{-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond, Whetstone",               		{-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point, San Fierro",               	{-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside, Tierra Robada",                     	{-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina, Tierra Robada",              	{-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill, Flint County",                 	{-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield, Las Venturas",                  	{964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield, Las Venturas",                  	{964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel, Las Venturas",           	{1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel, Las Venturas",           	{1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Section, Las Venturas",          	{1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Section, Las Venturas",          	{1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Section, Las Venturas",          	{1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Section, Las Venturas",          	{1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry, Red County",                   	{104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry, Red County",                   	{19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres, Red County",             	{-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace, Las Venturas",           	{2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace, Las Venturas",           	{2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights, San Fierro",              	{-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown, San Fierro",                   	{-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall, San Fierro",                   	{-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot, Las Venturas",                  	{2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce, Los Santos",                    	{1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce, Los Santos",                    	{1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce, Los Santos",                    	{1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce, Los Santos",                    	{1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce, Los Santos",                    	{1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce, Los Santos",                    	{1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center, Los Santos",           	{1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center, Los Santos",           	{1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station, San Fierro",           	{-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek, Las Venturas",                       	{2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore, Red County",                   	{580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty, San Fierro",                     	{-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty, San Fierro",                     	{-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown, San Fierro",                    	{-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown, San Fierro",                    	{-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown, San Fierro",                   	 	{-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown, San Fierro",                    	{-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown, San Fierro",            	        {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown, San Fierro",            	        {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown, Los Santos",       	 				{1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown, Los Santos",         				{1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown, Los Santos",         				{1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown, Los Santos",         				{1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown, Los Santos",         				{1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown, Los Santos",         				{1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown, Los Santos",         				{1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown, Los Santos",         				{1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown, Los Santos",         				{1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach, Los Santos",                  	{2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach, Los Santos",                  	{2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach, Los Santos",                  	{2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach, Los Santos",                  	{2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             				{2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             				{2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             				{2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             				{2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             				{2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             				{2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             				{2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin, San Fierro",                	{-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin, San Fierro",                	{-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport, San Fierro",          	{-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport, San Fierro",          	{-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport, San Fierro",          	{-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport, San Fierro",          	{-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport, San Fierro",          	{-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport, San Fierro",          	{-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport, San Fierro",          	{-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport, San Fierro",          	{-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemical, San Fierro",         	{-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemical, San Fierro",         	{-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"Castillo del Diablo, Bony County",       		{-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"Castillo del Diablo, Bony County",         	{-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"Castillo del Diablo, Bony County",      	   	{-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona, Los Santos",                   	{1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona, Los Santos",                   	{1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados, Tierra Robada",               	{-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East, San Fierro",              	{-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East, San Fierro",              	{-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East, San Fierro",              	{-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North, San Fierro",             	{-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North, San Fierro",             	{-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North, San Fierro",             	{-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree, Red County",                 	{-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge, Red County",               	{434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge, Red County",                  	{508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial, San Fierro",                   	{-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon, Red County",             	{1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection, Flint County",          	{-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range, Flint County",                 	{-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson, Tierra Robada",                 	{-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley, San Fierro",               	{-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley, San Fierro",               	{-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley, San Fierro",               	{-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley, San Fierro",               	{-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge, Red County",            	{2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge, San Fierro",                 	{-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge, San Fierro",                 	{-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton, Los Santos",                      	{2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton, Los Santos",                      	{2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia, San Fierro",                      	{-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia, San Fierro",                      	{-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge, San Fierro",               	{-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge, San Fierro",               	{-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge, San Fierro",               	{-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park, Los Santos",                   	{1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park, Los Santos",                   	{1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park, Los Santos",                   	{1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms, Bone County",                 	{176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College, Las Venturas",          	{964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College, Las Venturas",          	{964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns, Red County",               	{603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point, Red County",            	{2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway, Las Venturas",          	{1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury, San Fierro",                    	{-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm, San Fierro",                	{967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry, Las Venturas",               	{337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood, Los Santos",                    	{1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood, Los Santos",                    	{1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood, Los Santos",                    	{1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood, Los Santos",                    	{1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood, Los Santos",                    	{2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood, Los Santos",                    	{1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson, Los Santos",                   	{1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson, Los Santos",                   	{2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson, Los Santos",                   	{2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson, Los Santos",                   	{2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson, Los Santos",                   	{2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson, Los Santos",                   	{2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East, Las Venturas",         	{2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East, Las Venturas",         	{2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East, Las Venturas",         	{2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East, Las Venturas",         	{2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North, Las Venturas",        	{2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North, Las Venturas",        	{2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North, Las Venturas",        	{2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North, Las Venturas",        	{1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North, Las Venturas",        	{1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North, Las Venturas",        	{1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North, Las Venturas",        	{1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North, Las Venturas",        	{1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South, Las Venturas",        	{1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South, Las Venturas",        	{2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West, Las Venturas",         	{1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West, Las Venturas",         	{1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill, San Fierro",                	{-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow, San Fierro",              	{-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"KACC Military Fuels, Las Venturas",         	{2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge, San Fierro",              	{-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge, San Fierro",              	{-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge, San Fierro",              	{-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's, San Fierro",                      	{-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's, San Fierro",                      	{-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's, San Fierro",                      	{-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot, Las Venturas",          	{1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot, Las Venturas",          	{1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot, Las Venturas",           	{1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot, Las Venturas",           	{1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot, Las Venturas",           	{1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas, Tierra Robada",               	{-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas, Tierra Robada",                  	{-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas, Los Santos",                 	{1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas, Los Santos",                 	{2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas, Los Santos",                 	{2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas, Los Santos",                 	{2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas, Los Santos",                 	{2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas, Los Santos",                 	{2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas, Los Santos",                 	{2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas, Tierra Robada",               	{-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport, Las Venturas",        	{1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport, Las Venturas",        	{1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport, Las Venturas",        	{1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport, Las Venturas",        	{1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel, Las Venturas",             	{1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow, Las Venturas",                	{-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                				{-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn, Bone County",              	{-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side, Las Venturas",                 	{2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station, Las Venturas",              	{2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station, Las Venturas",              	{2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico, Los Santos",               	{1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico, Los Santos",               	{1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores, San Fierro",                  	{2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores, San Fierro",                  	{2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"LS International, Los Santos",            	{1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"LS International, Los Santos",            	{1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"LS International, Los Santos",            	{1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"LS International, Los Santos",            	{1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"LS International, Los Santos",            	{1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"LS International, Los Santos",            	{2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina, Los Santos",                      	{647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina, Los Santos",                      	{647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina, Los Santos",                      	{807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market, Los Santos",                      	{787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market, Los Santos",                      	{952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market, Los Santos",                      	{1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market, Los Santos",                      	{926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station, Los Santos",              	{787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge, Red County",               	{-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill, San Fierro",             	{-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery, Red County",                  	{1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery, Red County",                  	{1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Section, Red County",     			{1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Section, Red County",     			{1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland, Los Santos",                  	{1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland, Los Santos",                  	{1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland, Los Santos",                  	{1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland, Los Santos",                  	{1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland, Los Santos",                  	{1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland, Los Santos",                  	{1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland, Los Santos",                  	{768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland, Los Santos",                  	{687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland, Los Santos",                  	{737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland, Los Santos",                  	{1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland, Los Santos",                  	{952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland, Los Santos",                  	{911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland, Los Santos",                  	{861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Section, Los Santos",     			{1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock, Red County",                  	{2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks, Los Santos",                 	{2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks, Los Santos",                 	{2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks, Los Santos",                 	{2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks, Los Santos",                 	{2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks, Los Santos",                 	{2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks, Los Santos",                 	{2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks, Los Santos",                 	{2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats, San Fierro",                 	{-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats, San Fierro",                 	{-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats, San Fierro",                 	{-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs, Bone County",              	{338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip, Las Venturas",          	{2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades, San Fierro",                   	{-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek, Red County",              	{2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso, San Fierro",                    	{-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square, Los Santos",             	{1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim, Las Venturas",                     	{2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim, Las Venturas",                     	{2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection, Las Venturas",         	{1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants, Las Venturas",      	{1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville, Los Santos",           	{2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine, Las Venturas",                	{1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine, Las Venturas",                	{1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine, Las Venturas",                	{1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine, Las Venturas",                	{1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens,  San Fierro",                      	{-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens,  San Fierro",                      	{-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens,  San Fierro",                      	{-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Ind. Estate, Las Venturas",        	{1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East, Las Venturas",               	{1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East, Las Venturas",               	{1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East, Las Venturas",               	{1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West, Las Venturas",               	{1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West, Las Venturas",               	{1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West, Las Venturas",               	{1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West, Las Venturas",               	{1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom, Bone County",                 	{-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman, Los Santos",                     	{647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman, Los Santos",                     	{647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman, Los Santos",                     	{225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman, Los Santos",                     	{225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman, Los Santos",                     	{72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman, Los Santos",                     	{72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman, Los Santos",                     	{321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman, Los Santos",                     	{321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman, Los Santos",                     	{321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman, Los Santos",                     	{321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Section, Tierra Robada",         		{-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante, Las Venturas",              	{2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante, Las Venturas",              	{2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East, Las Venturas",              	{2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West, Las Venturas",              	{1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West, Las Venturas",              	{2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo, Los Santos",                       	{72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo, Los Santos",                       	{72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo, Los Santos",                       	{225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo, Los Santos",                       	{225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo, Los Santos",                       	{334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo, Los Santos",                       	{312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo, Los Santos",                       	{422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo, Los Santos",                       	{558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo, Los Santos",                       	{466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo, Los Santos",                       	{422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo, Los Santos",                       	{466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo, Los Santos",                       	{334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino, Las Venturas",                	{2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           				{2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora, San Fierro",                 	{-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach, Los Santos",           	{342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach, Los Santos",           	{72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin, Whetstone",                 		{-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks, Whetstone",                		{-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks, Whetstone",                		{-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards, Las Venturas",           	{2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed, Las Venturas",                    	{2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino, Las Venturas",             	{2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino, Las Venturas",             	{2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino, Las Venturas",             	{2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple, Los Santos",                      	{1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple, Los Santos",                      	{1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple, Los Santos",                      	{1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple, Los Santos",                      	{952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple, Los Santos",                      	{1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple, Los Santos",                      	{1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe, Las Venturas",             	{2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket, Las Venturas",          	{2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle, Las Venturas",            	{2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm, Flint County",                    	{-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"Four Dragons Casino, Las Venturas",         	{1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller, Las Venturas",             	{1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span, Las Venturas",               	{1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon, Whetstone",              		{-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan, Red County",               	{1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam, Las Venturas",             	{-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip, Las Venturas",                   	{2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip, Las Venturas",                   	{2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip, Las Venturas",                   	{2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip, Las Venturas",                   	{2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage, Las Venturas",                  	{1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage, Las Venturas",                  	{1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station, Los Santos",               	{1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado, Los Santos",              	{-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs, Los Santos",              	{930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs, Los Santos",              	{1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs, Los Santos",              	{1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows, Bone County",             	{37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach, Los Santos",                	{647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach, Los Santos",                	{930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach, Los Santos",                	{851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach, Los Santos",                	{1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach, Los Santos",                	{1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood, Los Santos",                    	{787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood, Los Santos",                    	{787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood, Los Santos",                    	{647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood, Los Santos",                    	{647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates, Las Venturas",           	{883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates, Las Venturas",           	{1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield, Los Santos",                 	{1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield, Los Santos",                 	{2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield, Los Santos",                 	{2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield, Los Santos",                 	{2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield, Los Santos",                 	{2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield, Los Santos",                 	{2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield, Los Santos",                 	{2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station, Las Venturas",         	{1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

static const gSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Section",          {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Section",          {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Section",          {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Section",          {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemical",         {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemical",         {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"Castillo del Diablo",         {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"Castillo del Diablo",         {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"Castillo del Diablo",         {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"KACC Military Fuels",         {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"LS International",            {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"LS International",            {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"LS International",            {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"LS International",            {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"LS International",            {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"LS International",            {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Section",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Section",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Section",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Ind. Estate",        {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Section",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};


//---------------------------------------------------------------------------- > NEW, ENUMS & NATIVES
native WP_Hash(buffer[], len, const str[]);
enum pInfo
{
	pPassword[129],
    pRegistered,
	pLogged,
	pSex,
	pAge,
	pCountry,
	pIdentityCard,
	pBanned,
	pBannedTime,
	pSkin,
	pMoney,
	Float:pSpawnX,
	Float:pSpawnY,
	Float:pSpawnZ,
	pBankAccount,
	pBankMoney,
	pBankCredit,
	pAdmin,
	pDonator,
	pDonatorPoints,
	pLevel,
	pRespect,
	pHours,
	pPlaytime,
	pPayCheck,
	pDead,
	pKills,
	pDeaths,
	pJob,
	pJobContract,
	pMobile,
	pMobileNumber,
	pMobileCredit,
	pAddressBook,
	pTut,
	pOnTut,
	pDetectivePoints,
	pDetectiveLevel,
	pTruckmanPoints,
	pTruckmanLevel,
	pTaxiPoints,
	pTaxiLevel,
	pMechanicPoints,
	pMechanicLevel,
	pDrug,
	pMats,
	pOLeader,
	pOMember,
	pORank,
	pOSkin,
	pWanted,
	pWantedTimes,
	pArrested,
	pArrestedTime,
	pArrestedTimes,
	pBizzID,
	pSBizzID,
	pHouseID,
	pApartmentID,
	pVehicle1,
	pVehicle1ControlID,
	pVehicle2,
	pVehicle2ControlID,
	pVehicle3,
	pVehicle3ControlID,
	pDrivingLicence,
	pFlyingLicence,
	pSailingLicence,
	pMuted,
	pMutedTime,
	pPistolSkill,
	pSilencedSkill,
	pDesertSkill,
	pShotgunSkill,
	pSawnoffSkill,
	pCombatSkill,
	pUziSkill,
	pMP5Skill,
	pAK47Skill,
	pM4Skill,
	pSniperSkill,
	pFightingStyle
}
new PlayerInfo[MAX_PLAYERS][pInfo];

enum bInfo
{
    bOwned,
    bPrice,
    bOwner[MAX_PLAYER_NAME],
    bType,
    bLocked,
    bMoney,
    bEnterFee,
    Float:bEnterX,
    Float:bEnterY,
    Float:bEnterZ,
    Float:bEnterA,
    Float:bExitX,
    Float:bExitY,
    Float:bExitZ,
    Float:bExitA,
    bInt,
    bVW,
    bInInt,
    bInVW,
    bIcon,
    bID,
    bExitIcon,
    bName[128]
}
new BusinessInfo[50][bInfo];

enum sbInfo
{
	sbOwned,
	sbOwner[MAX_PLAYER_NAME],
	sbDescription[128],
	sbMoney,
	sbPrice,
	sbEnterFee,
	Float:sbEnterX,
	Float:sbEnterY,
	Float:sbEnterZ,
	Float:sbEnterA,
	sbID,
	sbIcon,
	sbName[128]
}
new SpecBusinessInfo[20][sbInfo];

enum hInfo
{
	hOwned,
	hPrice,
	hOwner[MAX_PLAYER_NAME],
	hLocked,
	Float:hEnterX,
	Float:hEnterY,
	Float:hEnterZ,
	Float:hEnterA,
	Float:hExitX,
	Float:hExitY,
	Float:hExitZ,
	Float:hExitA,
	hInt,
	hVW,
	hInInt,
	hInVW,
	hIcon,
	hID,
	hSlot1,
	hSlot1Ammo,
	hSlot2,
	hSlot2Ammo,
	hSlot3,
	hSlot3Ammo,
	hMats,
	hDrug
}
new HouseInfo[700][hInfo];

enum aInfo
{
	aOwned,
	aPrice,
	aOwner[MAX_PLAYER_NAME],
	aLocked,
	Float:aEnterX,
	Float:aEnterY,
	Float:aEnterZ,
	Float:aEnterA,
	Float:aExitX,
	Float:aExitY,
	Float:aExitZ,
	Float:aExitA,
	aInt,
	aVW,
	aInInt,
	aInVW,
	aIcon,
	aID,
	aSlot1,
	aSlot1Ammo,
	aSlot2,
	aSlot2Ammo,
	aSlot3,
	aSlot3Ammo,
	aMats,
	aDrug
}
new ApartmentInfo[10][aInfo];

enum vInfo
{
	vOwned,
   	vOwner[24],
   	vModel,
   	Float:vParkX,
	Float:vParkY,
   	Float:vParkZ,
   	Float:vParkA,
   	vColor1,
   	vColor2,
   	vPaintjob,
   	vLocked,
	vRegistration,
   	vControlID,
   	vSpoiler,
   	vHood,
   	vRoof,
   	vSideskirt,
   	vLamps,
   	vNitro,
	vExhaust,
	vWheels,
	vStereo,
	vHydraulics,
	vFront_bumper,
	vRear_bumper,
	vVent_right,
	vVent_left
}
new VehicleInfo[200][vInfo];

//---------------------------------------------------------------------------- > NEWS - GATES
new pdgarage;
new pdgarageopened;
new pdgaragedoor;
new pdgaragedooropened;
new bpgate1;
new bpgate1opened;
new bpgate2;
new bpgate2opened;
new detectivegate;
new detectivegateopened;
new mechanicdoor;
new mechanicdooropened;
new vaultdoor;
new vaultdooropened;
new cellroomdoor;
new cellroomdooropened;
new cell1;
new cell1opened;
new cell2;
new cell2opened;
new cell3;
new cell3opened;
new lspddoor1;
new lspddoor1opened;
new lspddoor2;
new lspddoor2opened;
new lspdwindow;
new lspdwindowopened;
new smugglergate1;
new smugglergate1opened;
new smugglergate2;
new smugglergate2opened;
//---------------------------------------------------------------------------- > NEWS - JOBS
new detectives = 0;
new mechanics = 0;
new taxidrivers = 0;

new DetectiveDuty[MAX_PLAYERS]; 						// Detective
new DetectiveSearchingOffer[MAX_PLAYERS];				// Detective
new DetectivePlayerToFind[MAX_PLAYERS]; 				// Detective
new DetectiveSearchingPrice[MAX_PLAYERS]; 				// Detective
new DetectiveCaller = 9999;                             // Detective

new OnATruckMission[MAX_PLAYERS]; 						// Trucker

new SanitaryObjects[6]; 								// Sanitary
new SanitaryStarted[MAX_PLAYERS]; 						// Sanitary
new SanitaryCheckpoint[MAX_PLAYERS]; 					// Sanitary
new SweeperRoute[MAX_PLAYERS]; 							// Sanitary

new MechanicDuty[MAX_PLAYERS]; 							// Mechanic
new MechanicRepairOffer[MAX_PLAYERS]; 					// Mechanic
new MechanicRepairPlayerOffer[MAX_PLAYERS]; 			// Mechanic
new MechanicRepairOfferPrice[MAX_PLAYERS]; 				// Mechanic
new MechanicRepairOfferVehicle[MAX_PLAYERS]; 			// Mechanic
new MechanicRefillOffer[MAX_PLAYERS]; 					// Mechanic
new MechanicRefillPlayerOffer[MAX_PLAYERS]; 			// Mechanic
new MechanicRefillLitre[MAX_PLAYERS]; 					// Mechanic
new MechanicRefillOfferPrice[MAX_PLAYERS]; 				// Mechanic
new MechanicRefillOfferVehicle[MAX_PLAYERS]; 			// Mechanic
new MechanicCaller = 9999;                              // Mechanic

new TaxiDuty[MAX_PLAYERS]; 								// Taxi
new TaxiDriver[MAX_PLAYERS]; 							// Taxi
new TaxiStartingPrice[MAX_PLAYERS]; 					// Taxi
new TaxiTime[MAX_PLAYERS]; 								// Taxi
new TaxiMoney[MAX_PLAYERS]; 							// Taxi
new TaxiCaller = 9999;                                  // Taxi

new DrugSellOffer[MAX_PLAYERS];                         // DEALER
new	DrugBuyOffer[MAX_PLAYERS];                          // DEALER
new	DrugPlayerOffer[MAX_PLAYERS];                       // DEALER
new	DrugOfferAmmount[MAX_PLAYERS];                      // DEALER
new	DrugOfferPrice[MAX_PLAYERS];                        // DEALER
new MaterialsSellOffer[MAX_PLAYERS];                    // DEALER
new	MaterialsBuyOffer[MAX_PLAYERS];                     // DEALER
new	MaterialsPlayerOffer[MAX_PLAYERS];                  // DEALER
new	MaterialsOfferAmmount[MAX_PLAYERS];                 // DEALER
new	MaterialsOfferPrice[MAX_PLAYERS];                   // DEALER

new OnASmugglerMission[MAX_PLAYERS];					// Smuggler
//---------------------------------------------------------------------------- > NEWS - Others
new PlayerOnTutorial[MAX_PLAYERS];
new HelpTime[MAX_PLAYERS];
new Countdown = 9999;
new CountdownSeconds = 0;
new CountdownTimer;
//---------------------------------------------------------------------------- > NEWS - Phone System
new iCall[MAX_PLAYERS];
new Caller[MAX_PLAYERS];
new CalledPlayer[MAX_PLAYERS];
new InCall[MAX_PLAYERS];
new AdvertisementTime[MAX_PLAYERS];
//---------------------------------------------------------------------------- > NEWS - Vehicle
new pBelt[MAX_PLAYERS];
new pHelmet[MAX_PLAYERS];
new pRefuelling[MAX_PLAYERS];
new RefillLitre[MAX_PLAYERS];
new Rented[MAX_PLAYERS];
new vEngine[MAX_VEHICLES];
new vFuel[MAX_VEHICLES];
new vehHood[MAX_VEHICLES];
new vehTrunk[MAX_VEHICLES];
new vSearching[MAX_PLAYERS];
new StartingEngine[MAX_PLAYERS];
//---------------------------------------------------------------------------- > NEWS - Adding Vehicles
new SalesVehicle[89];
new OwnedVehicle[sizeof(VehicleInfo)];
new RentVehicle[25];
new SpawnedVehicle[MAX_VEHICLES];
new policecar[14];
new gsfcar[9];
new ballascar[9];
new vlacar[9];
new lsvcar[9];
new detectivecar[12];
new mechaniccar[7];
new sanitarycar[16];
new truckmancar[15];
new taxicar[16];
new smugglercar[5];
///---------------------------------------------------------------------------- > NEWS - Offers
new VehicleSellOffer[MAX_PLAYERS];
new VehicleBuyOffer[MAX_PLAYERS];
new VehicleForOffer[MAX_PLAYERS];
new VehiclePlayerOffer[MAX_PLAYERS];
new VehicleOfferPrice[MAX_PLAYERS];
new HouseSellOffer[MAX_PLAYERS];
new HouseBuyOffer[MAX_PLAYERS];
new HouseForOffer[MAX_PLAYERS];
new HousePlayerOffer[MAX_PLAYERS];
new HouseOfferPrice[MAX_PLAYERS];
//---------------------------------------------------------------------------- > NEWS - Bank
new HaveMoneyBag[MAX_PLAYERS];
new moneybag[6];
//---------------------------------------------------------------------------- > NEWS - Cops
new CopDuty[MAX_PLAYERS];
new CopTimer[MAX_PLAYERS];
new Tazer[MAX_PLAYERS];
new Tazzed[MAX_PLAYERS];
new Cuffed[MAX_PLAYERS];
new GaveUp[MAX_PLAYERS];
new Pulling[MAX_PLAYERS];
new Pulled[MAX_PLAYERS];
//---------------------------------------------------------------------------- > NEWS - Interiors
new InPoliceHQ[MAX_PLAYERS];
//new InFBIHQ[MAX_PLAYERS];
new InBank[MAX_PLAYERS];
new InCityHall[MAX_PLAYERS];
new InGSFHQ[MAX_PLAYERS];
new GSFHQLocked;
new InBallasHQ[MAX_PLAYERS];
new BallasHQLocked;
new InLSVHQ[MAX_PLAYERS];
new LSVHQLocked;
new InVLAHQ[MAX_PLAYERS];
new VLAHQLocked;
new InHouse[MAX_PLAYERS];
new InApartment[MAX_PLAYERS];
new InBusiness[MAX_PLAYERS];
new InDrivingSchool[MAX_PLAYERS];
//---------------------------------------------------------------------------- > NEWS - Pay
new PayCash[MAX_PLAYERS];
//---------------------------------------------------------------------------- > NEWS - Textdraws
new Text3D:HouseLabelArray[sizeof(HouseInfo)];
new Text3D:ApartmentLabelArray[sizeof(ApartmentInfo)];
new Text3D:BusinessLabelArray[sizeof(BusinessInfo)];
new Text3D:SpecBusinessLabelArray[sizeof(SpecBusinessInfo)];
new Text3D:VehicleLabel[MAX_VEHICLES];
new Text:ServerTD;
new Text:BoxTD;
new Text:DateTD;
new Text:TimeTD;
new Text:TUT1;
new Text:TUT2;
new Text:RandomMessagesTD;
new Text:BankMoney[MAX_PLAYERS];
new Text:FuelTD[MAX_PLAYERS];
new Text:JailTimeTD[MAX_PLAYERS];
new Text:CountdownTD;
//---------------------------------------------------------------------------- > NEWS - TEXTURES
//---------------------------------------------------------------------------- > FORWARDS
//forward pddoorclose();
//---------------------------------------------------------------------------- > FORWARDS - PLAYER
forward LoadUser_data(playerid, name[], value[]);
public LoadUser_data(playerid, name[], value[])
{
	INI_String("Password", PlayerInfo[playerid][pPassword], 129);
	INI_Int("Registered", PlayerInfo[playerid][pRegistered]);
	INI_Int("Logged", PlayerInfo[playerid][pLogged]);
	INI_Int("Sex", PlayerInfo[playerid][pSex]);
	INI_Int("Age", PlayerInfo[playerid][pAge]);
	INI_Int("Country", PlayerInfo[playerid][pCountry]);
	INI_Int("IdentityCard", PlayerInfo[playerid][pIdentityCard]);
	INI_Int("Banned", PlayerInfo[playerid][pBanned]);
	INI_Int("BannedTime", PlayerInfo[playerid][pBannedTime]);
	INI_Int("Skin", PlayerInfo[playerid][pSkin]);
	INI_Int("Money", PlayerInfo[playerid][pMoney]);
	INI_Float("SpawnX", PlayerInfo[playerid][pSpawnX]);
	INI_Float("SpawnY", PlayerInfo[playerid][pSpawnY]);
	INI_Float("SpawnZ", PlayerInfo[playerid][pSpawnZ]);
	INI_Int("BankAccount", PlayerInfo[playerid][pBankAccount]);
	INI_Int("BankMoney", PlayerInfo[playerid][pBankMoney]);
	INI_Int("BankCredit", PlayerInfo[playerid][pBankCredit]);
	INI_Int("Admin", PlayerInfo[playerid][pAdmin]);
	INI_Int("Donator", PlayerInfo[playerid][pDonator]);
	INI_Int("DonatorPoints", PlayerInfo[playerid][pDonatorPoints]);
	INI_Int("Level", PlayerInfo[playerid][pLevel]);
	INI_Int("Respect", PlayerInfo[playerid][pRespect]);
	INI_Int("Hours", PlayerInfo[playerid][pHours]);
	INI_Int("PlayTime", PlayerInfo[playerid][pPlaytime]);
	INI_Int("PayCheck", PlayerInfo[playerid][pPayCheck]);
	INI_Int("Dead", PlayerInfo[playerid][pDead]);
	INI_Int("Kills", PlayerInfo[playerid][pKills]);
	INI_Int("Deaths", PlayerInfo[playerid][pDeaths]);
	INI_Int("Job", PlayerInfo[playerid][pJob]);
	INI_Int("JobContract", PlayerInfo[playerid][pJobContract]);
	INI_Int("Mobile", PlayerInfo[playerid][pMobile]);
	INI_Int("Number", PlayerInfo[playerid][pMobileNumber]);
	INI_Int("Credit", PlayerInfo[playerid][pMobileCredit]);
	INI_Int("AddressBook", PlayerInfo[playerid][pAddressBook]);
	INI_Int("Tutorial", PlayerInfo[playerid][pTut]);
	INI_Int("TutorialCP", PlayerInfo[playerid][pOnTut]);
	INI_Int("DetectivePoints", PlayerInfo[playerid][pDetectivePoints]);
	INI_Int("DetectiveLevel", PlayerInfo[playerid][pDetectiveLevel]);
	INI_Int("TruckmanPoints", PlayerInfo[playerid][pTruckmanPoints]);
	INI_Int("Truckmanlevel", PlayerInfo[playerid][pTruckmanLevel]);
	INI_Int("TaxiPoints", PlayerInfo[playerid][pTaxiPoints]);
	INI_Int("TaxiLevel", PlayerInfo[playerid][pTaxiLevel]);
	INI_Int("MechanicPoints", PlayerInfo[playerid][pMechanicPoints]);
    INI_Int("MechanicLevel", PlayerInfo[playerid][pMechanicLevel]);
    INI_Int("Drugs", PlayerInfo[playerid][pDrug]);
	INI_Int("Mats", PlayerInfo[playerid][pMats]);
	INI_Int("Leader", PlayerInfo[playerid][pOLeader]);
	INI_Int("Member", PlayerInfo[playerid][pOMember]);
	INI_Int("Rank", PlayerInfo[playerid][pORank]);
	INI_Int("Wanted", PlayerInfo[playerid][pWanted]);
	INI_Int("WantedTimes", PlayerInfo[playerid][pWantedTimes]);
	INI_Int("Arrested", PlayerInfo[playerid][pArrested]);
	INI_Int("ArrestedTime", PlayerInfo[playerid][pArrestedTime]);
	INI_Int("ArrestedTimes", PlayerInfo[playerid][pArrestedTimes]);
	INI_Int("OrgSkin", PlayerInfo[playerid][pOSkin]);
	INI_Int("Business", PlayerInfo[playerid][pBizzID]);
	INI_Int("SpecBusiness", PlayerInfo[playerid][pSBizzID]);
	INI_Int("House", PlayerInfo[playerid][pHouseID]);
	INI_Int("Apartment", PlayerInfo[playerid][pApartmentID]);
	INI_Int("Vehicle1", PlayerInfo[playerid][pVehicle1]);
	INI_Int("Vehicle1ControlID", PlayerInfo[playerid][pVehicle1ControlID]);
	INI_Int("Vehicle2", PlayerInfo[playerid][pVehicle2]);
	INI_Int("Vehicle2ControlID", PlayerInfo[playerid][pVehicle2ControlID]);
	INI_Int("Vehicle3", PlayerInfo[playerid][pVehicle3]);
	INI_Int("Vehicle3ControlID", PlayerInfo[playerid][pVehicle3ControlID]);
	INI_Int("DrivingLicence", PlayerInfo[playerid][pDrivingLicence]);
	INI_Int("FlyingLicence", PlayerInfo[playerid][pFlyingLicence]);
	INI_Int("SailingLicence", PlayerInfo[playerid][pSailingLicence]);
	INI_Int("Muted", PlayerInfo[playerid][pMuted]);
	INI_Int("MutedTime", PlayerInfo[playerid][pMutedTime]);
	INI_Int("PistolSkill", PlayerInfo[playerid][pPistolSkill]);
	INI_Int("SilencedSkill", PlayerInfo[playerid][pSilencedSkill]);
	INI_Int("DesertSkill", PlayerInfo[playerid][pDesertSkill]);
	INI_Int("ShotgunSkill", PlayerInfo[playerid][pShotgunSkill]);
	INI_Int("SawnoffSkill", PlayerInfo[playerid][pSawnoffSkill]);
	INI_Int("CombatSkill", PlayerInfo[playerid][pCombatSkill]);
	INI_Int("UziSkill", PlayerInfo[playerid][pUziSkill]);
	INI_Int("MP5Skill", PlayerInfo[playerid][pMP5Skill]);
	INI_Int("AK47Skill", PlayerInfo[playerid][pAK47Skill]);
	INI_Int("M4Skill", PlayerInfo[playerid][pM4Skill]);
	INI_Int("SniperSkill", PlayerInfo[playerid][pSniperSkill]);
	INI_Int("FightingStyle", PlayerInfo[playerid][pFightingStyle]);
	return 1;
}

forward SavePlayer(playerid);
public SavePlayer(playerid)
{
	new INI:File = INI_Open(UserPath(playerid));
	INI_SetTag(File, "PlayerData");
	INI_WriteInt(File, "Registered", PlayerInfo[playerid][pRegistered]);
	INI_WriteInt(File, "Logged", PlayerInfo[playerid][pLogged]);
	INI_WriteInt(File, "Sex", PlayerInfo[playerid][pSex]);
	INI_WriteInt(File, "Age", PlayerInfo[playerid][pAge]);
	INI_WriteInt(File, "Country", PlayerInfo[playerid][pCountry]);
	INI_WriteInt(File, "IdentityCard", PlayerInfo[playerid][pIdentityCard]);
	INI_WriteInt(File, "Banned", PlayerInfo[playerid][pBanned]);
	INI_WriteInt(File, "BannedTime", PlayerInfo[playerid][pBannedTime]);
	INI_WriteInt(File, "Skin", PlayerInfo[playerid][pSkin]);
	INI_WriteInt(File, "Money", PlayerInfo[playerid][pMoney]);
	INI_WriteFloat(File, "SpawnX", PlayerInfo[playerid][pSpawnX]);
	INI_WriteFloat(File, "SpawnY", PlayerInfo[playerid][pSpawnY]);
	INI_WriteFloat(File, "SpawnZ", PlayerInfo[playerid][pSpawnZ]);
	INI_WriteInt(File, "BankAccount", PlayerInfo[playerid][pBankAccount]);
	INI_WriteInt(File, "BankMoney", PlayerInfo[playerid][pBankMoney]);
	INI_WriteInt(File, "BankCredit", PlayerInfo[playerid][pBankCredit]);
	INI_WriteInt(File, "Admin", PlayerInfo[playerid][pAdmin]);
	INI_WriteInt(File, "Donator", PlayerInfo[playerid][pDonator]);
	INI_WriteInt(File, "DonatorPoints", PlayerInfo[playerid][pDonatorPoints]);
	INI_WriteInt(File, "Level", PlayerInfo[playerid][pLevel]);
	INI_WriteInt(File, "Respect", PlayerInfo[playerid][pRespect]);
	INI_WriteInt(File, "Hours", PlayerInfo[playerid][pHours]);
	INI_WriteInt(File, "PlayTime", PlayerInfo[playerid][pPlaytime]);
	INI_WriteInt(File, "PayCheck", PlayerInfo[playerid][pPayCheck]);
	INI_WriteInt(File, "Dead", PlayerInfo[playerid][pDead]);
	INI_WriteInt(File, "Kills", PlayerInfo[playerid][pKills]);
	INI_WriteInt(File, "Deaths", PlayerInfo[playerid][pDeaths]);
	INI_WriteInt(File, "Job", PlayerInfo[playerid][pJob]);
	INI_WriteInt(File, "JobContract", PlayerInfo[playerid][pJobContract]);
	INI_WriteInt(File, "Mobile", PlayerInfo[playerid][pMobile]);
	INI_WriteInt(File, "Number", PlayerInfo[playerid][pMobileNumber]);
	INI_WriteInt(File, "Credit", PlayerInfo[playerid][pMobileCredit]);
	INI_WriteInt(File, "AddressBook", PlayerInfo[playerid][pAddressBook]);
	INI_WriteInt(File, "Tutorial", PlayerInfo[playerid][pTut]);
	INI_WriteInt(File, "TutorialCP", PlayerInfo[playerid][pOnTut]);
	INI_WriteInt(File, "DetectivePoints", PlayerInfo[playerid][pDetectivePoints]);
	INI_WriteInt(File, "DetectiveLevel", PlayerInfo[playerid][pDetectiveLevel]);
	INI_WriteInt(File, "TruckmanPoints", PlayerInfo[playerid][pTruckmanPoints]);
	INI_WriteInt(File, "TruckmanLevel", PlayerInfo[playerid][pTruckmanLevel]);
	INI_WriteInt(File, "TaxiPoints", PlayerInfo[playerid][pTaxiPoints]);
	INI_WriteInt(File, "TaxiLevel", PlayerInfo[playerid][pTaxiLevel]);
	INI_WriteInt(File, "MechanicPoints", PlayerInfo[playerid][pMechanicPoints]);
	INI_WriteInt(File, "MechanicLevel", PlayerInfo[playerid][pMechanicLevel]);
	INI_WriteInt(File, "Drugs", PlayerInfo[playerid][pDrug]);
	INI_WriteInt(File, "Mats", PlayerInfo[playerid][pMats]);
	INI_WriteInt(File, "Leader", PlayerInfo[playerid][pOLeader]);
	INI_WriteInt(File, "Member", PlayerInfo[playerid][pOMember]);
	INI_WriteInt(File, "Rank", PlayerInfo[playerid][pORank]);
	INI_WriteInt(File, "OrgSkin", PlayerInfo[playerid][pOSkin]);
	INI_WriteInt(File, "Wanted", PlayerInfo[playerid][pWanted]);
	INI_WriteInt(File, "WantedTimes", PlayerInfo[playerid][pWantedTimes]);
	INI_WriteInt(File, "Arrested", PlayerInfo[playerid][pArrested]);
	INI_WriteInt(File, "ArrestedTime", PlayerInfo[playerid][pArrestedTime]);
	INI_WriteInt(File, "ArrestedTimes", PlayerInfo[playerid][pArrestedTimes]);
	INI_WriteInt(File, "Business", PlayerInfo[playerid][pBizzID]);
	INI_WriteInt(File, "SpecBusiness", PlayerInfo[playerid][pSBizzID]);
	INI_WriteInt(File, "House", PlayerInfo[playerid][pHouseID]);
	INI_WriteInt(File, "Apartment", PlayerInfo[playerid][pApartmentID]);
	INI_WriteInt(File, "Vehicle1", PlayerInfo[playerid][pVehicle1]);
	INI_WriteInt(File, "Vehicle1ControlID", PlayerInfo[playerid][pVehicle1ControlID]);
	INI_WriteInt(File, "Vehicle2", PlayerInfo[playerid][pVehicle2]);
	INI_WriteInt(File, "Vehicle2ControlID", PlayerInfo[playerid][pVehicle2ControlID]);
	INI_WriteInt(File, "Vehicle3", PlayerInfo[playerid][pVehicle3]);
	INI_WriteInt(File, "Vehicle3ControlID", PlayerInfo[playerid][pVehicle3ControlID]);
	INI_WriteInt(File, "DrivingLicence", PlayerInfo[playerid][pDrivingLicence]);
	INI_WriteInt(File, "FlyingLicence", PlayerInfo[playerid][pFlyingLicence]);
	INI_WriteInt(File, "SailingLicence", PlayerInfo[playerid][pSailingLicence]);
	INI_WriteInt(File, "Muted", PlayerInfo[playerid][pMuted]);
	INI_WriteInt(File, "MutedTime", PlayerInfo[playerid][pMutedTime]);
	INI_WriteInt(File, "PistolSkill", PlayerInfo[playerid][pPistolSkill]);
	INI_WriteInt(File, "SilencedSkill", PlayerInfo[playerid][pSilencedSkill]);
	INI_WriteInt(File, "DesertSkill", PlayerInfo[playerid][pDesertSkill]);
	INI_WriteInt(File, "ShotgunSkill", PlayerInfo[playerid][pShotgunSkill]);
	INI_WriteInt(File, "SawnoffSkill", PlayerInfo[playerid][pSawnoffSkill]);
	INI_WriteInt(File, "CombatSkill", PlayerInfo[playerid][pCombatSkill]);
	INI_WriteInt(File, "UziSkill", PlayerInfo[playerid][pUziSkill]);
	INI_WriteInt(File, "MP5Skill", PlayerInfo[playerid][pMP5Skill]);
	INI_WriteInt(File, "AK47Skill", PlayerInfo[playerid][pAK47Skill]);
	INI_WriteInt(File, "M4Skill", PlayerInfo[playerid][pM4Skill]);
	INI_WriteInt(File, "SniperSkill", PlayerInfo[playerid][pSniperSkill]);
	INI_WriteInt(File, "FightingStyle", PlayerInfo[playerid][pFightingStyle]);
	INI_Close(File);
	return 1;
}

//---------------------------------------------------------------------------- > FORWARDS - BUSINESS
forward LoadBusiness_data(idx, name[], value[]);
public LoadBusiness_data(idx, name[], value[])
{
    INI_Int("Owned", BusinessInfo[idx][bOwned]);
    INI_Int("Price", BusinessInfo[idx][bPrice]);
    INI_String("Owner", BusinessInfo[idx][bOwner], 24);
    INI_Int("Type", BusinessInfo[idx][bType]);
    INI_Int("Locked", BusinessInfo[idx][bLocked]);
    INI_Int("Money", BusinessInfo[idx][bMoney]);
    INI_Int("EnterPrice", BusinessInfo[idx][bEnterFee]);
    INI_Float("EnterX", BusinessInfo[idx][bEnterX]);
    INI_Float("EnterY", BusinessInfo[idx][bEnterY]);
    INI_Float("EnterZ", BusinessInfo[idx][bEnterZ]);
    INI_Float("EnterA", BusinessInfo[idx][bEnterA]);
    INI_Float("ExitX", BusinessInfo[idx][bExitX]);
    INI_Float("ExitY", BusinessInfo[idx][bExitY]);
    INI_Float("ExitZ", BusinessInfo[idx][bExitZ]);
    INI_Float("ExitA", BusinessInfo[idx][bExitA]);
    INI_Int("Int", BusinessInfo[idx][bInt]);
    INI_Int("VW", BusinessInfo[idx][bVW]);
    INI_Int("InInt", BusinessInfo[idx][bInInt]);
    INI_Int("InVW", BusinessInfo[idx][bInVW]);
    INI_Int("ID", BusinessInfo[idx][bID]);
    INI_String("Name", BusinessInfo[idx][bName], 128);
    return 1;
}

forward SaveBizz(id);
public SaveBizz(id)
{
    new bFile[40];
    format(bFile, sizeof(bFile), BPATH, id);
    new INI:File = INI_Open(bFile);
    INI_SetTag(File,"data");
    INI_WriteInt(File,"Owned", BusinessInfo[id][bOwned]);
    INI_WriteInt(File,"Price", BusinessInfo[id][bPrice]);
    INI_WriteString(File,"Owner", BusinessInfo[id][bOwner]);
    INI_WriteInt(File,"Type", BusinessInfo[id][bType]);
    INI_WriteInt(File,"Locked", BusinessInfo[id][bLocked]);
    INI_WriteInt(File,"Money", BusinessInfo[id][bMoney]);
    INI_WriteInt(File,"EnterPrice", BusinessInfo[id][bEnterFee]);
    INI_WriteFloat(File,"EnterX", BusinessInfo[id][bEnterX]);
    INI_WriteFloat(File,"EnterY", BusinessInfo[id][bEnterY]);
    INI_WriteFloat(File,"EnterZ", BusinessInfo[id][bEnterZ]);
    INI_WriteFloat(File,"EnterA", BusinessInfo[id][bEnterA]);
    INI_WriteFloat(File,"ExitX", BusinessInfo[id][bExitX]);
    INI_WriteFloat(File,"ExitY", BusinessInfo[id][bExitY]);
    INI_WriteFloat(File,"ExitZ", BusinessInfo[id][bExitZ]);
    INI_WriteFloat(File,"ExitA", BusinessInfo[id][bExitA]);
    INI_WriteInt(File,"Int", BusinessInfo[id][bInt]);
    INI_WriteInt(File,"VW", BusinessInfo[id][bVW]);
    INI_WriteInt(File,"InInt", BusinessInfo[id][bInInt]);
    INI_WriteInt(File,"InVW", BusinessInfo[id][bInVW]);
    INI_WriteInt(File,"ID", BusinessInfo[id][bID]);
    INI_WriteString(File,"Name", BusinessInfo[id][bName]);
    INI_Close(File);
    return 1;
}


//---------------------------------------------------------------------------- > FORWARDS - SPECIAL BUSINESS
forward LoadSpecBusiness_data(idx, name[], value[]);
public LoadSpecBusiness_data(idx, name[], value[])
{
    INI_Int("Owned", SpecBusinessInfo[idx][sbOwned]);
    INI_String("Owner", SpecBusinessInfo[idx][sbOwner], MAX_PLAYER_NAME);
    INI_String("Description", SpecBusinessInfo[idx][sbOwner], 128);
    INI_Int("Money", SpecBusinessInfo[idx][sbMoney]);
    INI_Int("Price", SpecBusinessInfo[idx][sbPrice]);
    INI_Int("EnterPrice", SpecBusinessInfo[idx][sbEnterFee]);
    INI_Float("EnterX", SpecBusinessInfo[idx][sbEnterX]);
    INI_Float("EnterY", SpecBusinessInfo[idx][sbEnterY]);
    INI_Float("EnterZ", SpecBusinessInfo[idx][sbEnterZ]);
    INI_Float("EnterA", SpecBusinessInfo[idx][sbEnterA]);
    INI_Int("ID", SpecBusinessInfo[idx][sbID]);
    INI_String("Name", SpecBusinessInfo[idx][sbName], 128);
    return 1;
}

forward SaveSpecBizz(id);
public SaveSpecBizz(id)
{
    new sbFile[40];
    format(sbFile, sizeof(sbFile), SBPATH, id);
    new INI:File = INI_Open(sbFile);
    INI_SetTag(File,"data");
	INI_WriteInt(File, "Owned", SpecBusinessInfo[id][sbOwned]);
    INI_WriteString(File, "Owner", SpecBusinessInfo[id][sbOwner]);
    INI_WriteString(File, "Description", SpecBusinessInfo[id][sbOwner]);
    INI_WriteInt(File, "Money", SpecBusinessInfo[id][sbMoney]);
    INI_WriteInt(File, "Price", SpecBusinessInfo[id][sbPrice]);
    INI_WriteInt(File, "EnterPrice", SpecBusinessInfo[id][sbEnterFee]);
    INI_WriteFloat(File, "EnterX", SpecBusinessInfo[id][sbEnterX]);
    INI_WriteFloat(File, "EnterY", SpecBusinessInfo[id][sbEnterY]);
    INI_WriteFloat(File, "EnterZ", SpecBusinessInfo[id][sbEnterZ]);
    INI_WriteFloat(File, "EnterA", SpecBusinessInfo[id][sbEnterA]);
    INI_WriteInt(File, "ID", SpecBusinessInfo[id][sbID]);
    INI_WriteString(File, "Name", SpecBusinessInfo[id][sbName]);
    INI_Close(File);
    return 1;
}

//---------------------------------------------------------------------------- > FORWARDS - HOUSE
forward LoadHouse_data(idx, name[], value[]);
public LoadHouse_data(idx, name[], value[])
{
	INI_Int("Owned", HouseInfo[idx][hOwned]);
	INI_Int("Price", HouseInfo[idx][hPrice]);
	INI_String("Owner", HouseInfo[idx][hOwner], 128);
	INI_Int("Locked", HouseInfo[idx][hLocked]);
	INI_Float("EnterX", HouseInfo[idx][hEnterX]);
	INI_Float("EnterY", HouseInfo[idx][hEnterY]);
	INI_Float("EnterZ", HouseInfo[idx][hEnterZ]);
	INI_Float("EnterA", HouseInfo[idx][hEnterA]);
	INI_Float("ExitX", HouseInfo[idx][hExitX]);
	INI_Float("ExitY", HouseInfo[idx][hExitY]);
	INI_Float("ExitZ", HouseInfo[idx][hExitZ]);
	INI_Float("ExitA", HouseInfo[idx][hExitA]);
	INI_Int("Int", HouseInfo[idx][hInt]);
	INI_Int("VW", HouseInfo[idx][hVW]);
	INI_Int("InInt", HouseInfo[idx][hInInt]);
	INI_Int("InVW", HouseInfo[idx][hInVW]);
	INI_Int("ID", HouseInfo[idx][hID]);
	INI_Int("Slot1", HouseInfo[idx][hSlot1]);
	INI_Int("Slot1Ammo", HouseInfo[idx][hSlot1Ammo]);
    INI_Int("Slot2", HouseInfo[idx][hSlot2]);
    INI_Int("Slot2Ammo", HouseInfo[idx][hSlot2Ammo]);
    INI_Int("Slot3", HouseInfo[idx][hSlot3]);
    INI_Int("Slot3Ammo", HouseInfo[idx][hSlot3Ammo]);
    INI_Int("Mats", HouseInfo[idx][hMats]);
    INI_Int("Drugs", HouseInfo[idx][hDrug]);
	return 1;
}

forward SaveHouse(id);
public SaveHouse(id)
{
	new hFile[40];
	format(hFile, sizeof(hFile), HPATH, id);
	new INI:File = INI_Open(hFile);
	INI_SetTag(File, "data");
	INI_WriteInt(File, "Owned", HouseInfo[id][hOwned]);
	INI_WriteInt(File, "Price", HouseInfo[id][hPrice]);
	INI_WriteString(File, "Owner", HouseInfo[id][hOwner]);
	INI_WriteInt(File, "Locked", HouseInfo[id][hLocked]);
	INI_WriteFloat(File, "EnterX", HouseInfo[id][hEnterX]);
	INI_WriteFloat(File, "EnterY", HouseInfo[id][hEnterY]);
	INI_WriteFloat(File, "EnterZ", HouseInfo[id][hEnterZ]);
	INI_WriteFloat(File, "EnterA", HouseInfo[id][hEnterA]);
	INI_WriteFloat(File, "ExitX", HouseInfo[id][hExitX]);
	INI_WriteFloat(File, "ExitY", HouseInfo[id][hExitY]);
	INI_WriteFloat(File, "ExitZ", HouseInfo[id][hExitZ]);
	INI_WriteFloat(File, "ExitA", HouseInfo[id][hExitA]);
	INI_WriteInt(File, "Int", HouseInfo[id][hInt]);
	INI_WriteInt(File, "VW", HouseInfo[id][hVW]);
	INI_WriteInt(File, "InInt", HouseInfo[id][hInInt]);
	INI_WriteInt(File, "InVW", HouseInfo[id][hInVW]);
	INI_WriteInt(File, "ID", HouseInfo[id][hID]);
	INI_WriteInt(File, "Slot1", HouseInfo[id][hSlot1]);
	INI_WriteInt(File, "Slot1Ammo", HouseInfo[id][hSlot1Ammo]);
    INI_WriteInt(File, "Slot2", HouseInfo[id][hSlot2]);
    INI_WriteInt(File, "Slot2Ammo", HouseInfo[id][hSlot2Ammo]);
    INI_WriteInt(File, "Slot3", HouseInfo[id][hSlot3]);
    INI_WriteInt(File, "Slot3Ammo", HouseInfo[id][hSlot3Ammo]);
    INI_WriteInt(File, "Mats", HouseInfo[id][hMats]);
    INI_WriteInt(File, "Drugs", HouseInfo[id][hDrug]);
	INI_Close(File);
	return 1;
}

//---------------------------------------------------------------------------- > FORWARDS - APARTMENT
forward LoadApartment_data(idx, name[], value[]);
public LoadApartment_data(idx, name[], value[])
{
	INI_Int("Owned", ApartmentInfo[idx][aOwned]);
	INI_Int("Price", ApartmentInfo[idx][aPrice]);
	INI_String("Owner", ApartmentInfo[idx][aOwner], 128);
	INI_Int("Locked", ApartmentInfo[idx][aLocked]);
	INI_Float("EnterX", ApartmentInfo[idx][aEnterX]);
	INI_Float("EnterY", ApartmentInfo[idx][aEnterY]);
	INI_Float("EnterZ", ApartmentInfo[idx][aEnterZ]);
	INI_Float("EnterA", ApartmentInfo[idx][aEnterA]);
	INI_Float("ExitX", ApartmentInfo[idx][aExitX]);
	INI_Float("ExitY", ApartmentInfo[idx][aExitY]);
	INI_Float("ExitZ", ApartmentInfo[idx][aExitZ]);
	INI_Float("ExitA", ApartmentInfo[idx][aExitA]);
	INI_Int("Int", ApartmentInfo[idx][aInt]);
	INI_Int("VW", ApartmentInfo[idx][aVW]);
	INI_Int("InInt", ApartmentInfo[idx][aInInt]);
	INI_Int("InVW", ApartmentInfo[idx][aInVW]);
	INI_Int("ID", ApartmentInfo[idx][aID]);
	INI_Int("Slot1", ApartmentInfo[idx][aSlot1]);
	INI_Int("Slot1Ammo", ApartmentInfo[idx][aSlot1Ammo]);
    INI_Int("Slot2", ApartmentInfo[idx][aSlot2]);
    INI_Int("Slot2Ammo", ApartmentInfo[idx][aSlot2Ammo]);
    INI_Int("Slot3", ApartmentInfo[idx][aSlot3]);
    INI_Int("Slot3Ammo", ApartmentInfo[idx][aSlot3Ammo]);
    INI_Int("Mats", ApartmentInfo[idx][aMats]);
    INI_Int("Drugs", ApartmentInfo[idx][aDrug]);
	return 1;
}

forward SaveApartment(id);
public SaveApartment(id)
{
	new aFile[40];
	format(aFile, sizeof(aFile), APATH, id);
	new INI:File = INI_Open(aFile);
	INI_SetTag(File, "data");
	INI_WriteInt(File, "Owned", ApartmentInfo[id][aOwned]);
	INI_WriteInt(File, "Price", ApartmentInfo[id][aPrice]);
	INI_WriteString(File, "Owner", ApartmentInfo[id][aOwner]);
	INI_WriteInt(File, "Locked", ApartmentInfo[id][aLocked]);
	INI_WriteFloat(File, "EnterX", ApartmentInfo[id][aEnterX]);
	INI_WriteFloat(File, "EnterY", ApartmentInfo[id][aEnterY]);
	INI_WriteFloat(File, "EnterZ", ApartmentInfo[id][aEnterZ]);
	INI_WriteFloat(File, "EnterA", ApartmentInfo[id][aEnterA]);
	INI_WriteFloat(File, "ExitX", ApartmentInfo[id][aExitX]);
	INI_WriteFloat(File, "ExitY", ApartmentInfo[id][aExitY]);
	INI_WriteFloat(File, "ExitZ", ApartmentInfo[id][aExitZ]);
	INI_WriteFloat(File, "ExitA", ApartmentInfo[id][aExitA]);
	INI_WriteInt(File, "Int", ApartmentInfo[id][aInt]);
	INI_WriteInt(File, "VW", ApartmentInfo[id][aVW]);
	INI_WriteInt(File, "InInt", ApartmentInfo[id][aInInt]);
	INI_WriteInt(File, "InVW", ApartmentInfo[id][aInVW]);
	INI_WriteInt(File, "ID", ApartmentInfo[id][aID]);
	INI_WriteInt(File, "Slot1", ApartmentInfo[id][aSlot1]);
	INI_WriteInt(File, "Slot1Ammo", ApartmentInfo[id][aSlot1Ammo]);
    INI_WriteInt(File, "Slot2", ApartmentInfo[id][aSlot2]);
    INI_WriteInt(File, "Slot2Ammo", ApartmentInfo[id][aSlot2Ammo]);
    INI_WriteInt(File, "Slot3", ApartmentInfo[id][aSlot3]);
    INI_WriteInt(File, "Slot3Ammo", ApartmentInfo[id][aSlot3Ammo]);
    INI_WriteInt(File, "Mats", ApartmentInfo[id][aMats]);
    INI_WriteInt(File, "Drugs", ApartmentInfo[id][aDrug]);
	INI_Close(File);
	return 1;
}

//---------------------------------------------------------------------------- > FORWARDS - VEHICLES
forward LoadVehicle_data(vehicleid, name[], value[]);
public LoadVehicle_data(vehicleid, name[], value[])
{
	INI_Int("Owned", VehicleInfo[vehicleid][vOwned]);
 	INI_String("Owner", VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
  	INI_Int("Model", VehicleInfo[vehicleid][vModel]);
   	INI_Float("ParkX", VehicleInfo[vehicleid][vParkX]);
 	INI_Float("ParkY", VehicleInfo[vehicleid][vParkY]);
  	INI_Float("ParkZ", VehicleInfo[vehicleid][vParkZ]);
   	INI_Float("ParkA", VehicleInfo[vehicleid][vParkA]);
   	INI_Int("Color1", VehicleInfo[vehicleid][vColor1]);
   	INI_Int("Color2", VehicleInfo[vehicleid][vColor2]);
   	INI_Int("Paintjob", VehicleInfo[vehicleid][vPaintjob]);
   	INI_Int("Locked", VehicleInfo[vehicleid][vLocked]);
   	INI_Int("Registration", VehicleInfo[vehicleid][vRegistration]);
   	INI_Int("ControlID", VehicleInfo[vehicleid][vControlID]);
   	INI_Int("Spoiler", VehicleInfo[vehicleid][vSpoiler]);
   	INI_Int("Hood", VehicleInfo[vehicleid][vHood]);
   	INI_Int("Roof", VehicleInfo[vehicleid][vRoof]);
   	INI_Int("Sideskirt", VehicleInfo[vehicleid][vSideskirt]);
   	INI_Int("Lamps", VehicleInfo[vehicleid][vLamps]);
   	INI_Int("Nitro", VehicleInfo[vehicleid][vNitro]);
   	INI_Int("Exhaust", VehicleInfo[vehicleid][vExhaust]);
   	INI_Int("Wheels", VehicleInfo[vehicleid][vWheels]);
   	INI_Int("Stereo", VehicleInfo[vehicleid][vStereo]);
   	INI_Int("Hydraulics", VehicleInfo[vehicleid][vHydraulics]);
   	INI_Int("Front_bumper", VehicleInfo[vehicleid][vFront_bumper]);
   	INI_Int("Rear_bumper", VehicleInfo[vehicleid][vRear_bumper]);
   	INI_Int("Vent_right", VehicleInfo[vehicleid][vVent_right]);
   	INI_Int("Vent_left", VehicleInfo[vehicleid][vVent_left]);
   	return 1;
}

forward SaveVehicle(vehicleid);
public SaveVehicle(vehicleid)
{
    new vFile[40];
    format(vFile, sizeof(vFile), VPATH, vehicleid);
    new INI:File = INI_Open(vFile);
    INI_SetTag(File, "data");
    INI_WriteInt(File, "Owned", VehicleInfo[vehicleid][vOwned]);
    INI_WriteString(File, "Owner", VehicleInfo[vehicleid][vOwner]);
    INI_WriteInt(File, "Model", VehicleInfo[vehicleid][vModel]);
    INI_WriteFloat(File, "ParkX", VehicleInfo[vehicleid][vParkX]);
    INI_WriteFloat(File, "ParkY", VehicleInfo[vehicleid][vParkY]);
    INI_WriteFloat(File, "ParkZ", VehicleInfo[vehicleid][vParkZ]);
    INI_WriteFloat(File, "ParkA", VehicleInfo[vehicleid][vParkA]);
    INI_WriteInt(File, "Color1", VehicleInfo[vehicleid][vColor1]);
    INI_WriteInt(File, "Color2", VehicleInfo[vehicleid][vColor2]);
    INI_WriteInt(File, "Paintjob", VehicleInfo[vehicleid][vPaintjob]);
    INI_WriteInt(File, "Locked", VehicleInfo[vehicleid][vLocked]);
    INI_WriteInt(File, "Registration", VehicleInfo[vehicleid][vRegistration]);
    INI_WriteInt(File, "ControlID", VehicleInfo[vehicleid][vControlID]);
    INI_WriteInt(File, "Spoiler", VehicleInfo[vehicleid][vSpoiler]);
   	INI_WriteInt(File, "Hood", VehicleInfo[vehicleid][vHood]);
   	INI_WriteInt(File, "Roof", VehicleInfo[vehicleid][vRoof]);
   	INI_WriteInt(File, "Sideskirt", VehicleInfo[vehicleid][vSideskirt]);
   	INI_WriteInt(File, "Lamps", VehicleInfo[vehicleid][vLamps]);
   	INI_WriteInt(File, "Nitro", VehicleInfo[vehicleid][vNitro]);
   	INI_WriteInt(File, "Exhaust", VehicleInfo[vehicleid][vExhaust]);
   	INI_WriteInt(File, "Wheels", VehicleInfo[vehicleid][vWheels]);
   	INI_WriteInt(File, "Stereo", VehicleInfo[vehicleid][vStereo]);
   	INI_WriteInt(File, "Hydraulics", VehicleInfo[vehicleid][vHydraulics]);
   	INI_WriteInt(File, "Front_bumper", VehicleInfo[vehicleid][vFront_bumper]);
   	INI_WriteInt(File, "Rear_bumper", VehicleInfo[vehicleid][vRear_bumper]);
   	INI_WriteInt(File, "Vent_right", VehicleInfo[vehicleid][vVent_right]);
   	INI_WriteInt(File, "Vent_left", VehicleInfo[vehicleid][vVent_left]);
    INI_Close(File);
    return 1;
}

//---------------------------------------------------------------------------- > FORWARDS - OTHER FOR PLAYER
forward AntiRoleplayName(playerid, sendername[]);
public AntiRoleplayName(playerid, sendername[])
{
	new str[128];
    format(str, sizeof(str), "%s je kikovan zbog neprihvatljivog imena", sendername);
	SendClientMessageToAll(BOJA_CRVENA, str);
	SCM(playerid, BOJA_CRVENA, "GRESKA: Vase ime je neprihvatljivo.");
	SCM(playerid, BOJA_CRVENA, "Vase ime mora biti u formatu Ime_Prezime. Velika pocetna slova.");
	Kick(playerid);
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	Kick(playerid);
}

forward PlayerTutorial(playerid);
public PlayerTutorial(playerid)
{
	if(PlayerOnTutorial[playerid] == 1)
	{
	    TextDrawShowForPlayer(playerid, TUT1);
        TextDrawShowForPlayer(playerid, TUT2);

		ClearChatForPlayer(playerid, 10);

	    TogglePlayerControllable(playerid, 0);
	    SetPlayerCameraPos(playerid, 1589.23, -2331.07, 16.01);
		SetPlayerCameraLookAt(playerid, 1594.22, -2331.39, 15.59);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - SPAWN");
		SCM(playerid, BOJA_PLAVA, "Novi ste na nasem serveru, ne mozete da se snadjete?");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 2;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 2)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
	    SetPlayerCameraPos(playerid, 1567.04, -2372.19, 19.52);
		SetPlayerCameraLookAt(playerid, 1564.15, -2368.11, 18.92);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - SPAWN");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 3;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 3)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
        SetPlayerPos(playerid, 1496.8420, -1701.3093, 14.5469);
	    SetPlayerCameraPos(playerid, 1476.70, -1702.90, 26.91);
		SetPlayerCameraLookAt(playerid, 1476.63, -1707.90, 26.41);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - OPSTINA");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 4;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 4)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
        SetPlayerPos(playerid, 1496.8420, -1701.3093, 14.5469);
	    SetPlayerCameraPos(playerid, 1520.78, -1675.72, 23.46);
		SetPlayerCameraLookAt(playerid, 1525.77, -1675.74, 23.11);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - LSPD");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 5;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 5)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
	    SetPlayerCameraPos(playerid, 1213.22, -1323.58, 17.72);
		SetPlayerCameraLookAt(playerid, 1208.22, -1323.51, 17.36);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - BOLNICA");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 6;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 6)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
        SetPlayerPos(playerid, 610.9747, -1200.8987, 31.0528);
	    SetPlayerCameraPos(playerid, 613.42, -1204.42, 29.43);
		SetPlayerCameraLookAt(playerid, 612.17, -1209.26, 29.12);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - BANKA");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 7;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 7)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
        SetPlayerPos(playerid, 1222.1053, -954.5921, 42.9375);
	    SetPlayerCameraPos(playerid, 1214.70, -947.10, 50.26);
		SetPlayerCameraLookAt(playerid, 1213.96, -942.16, 50.15);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - BURG");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 8;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 8)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
        SetPlayerPos(playerid, 2154.5093, -1086.3624, 25.0207);
	    SetPlayerCameraPos(playerid, 2150.10, -1099.50, 34.87);
		SetPlayerCameraLookAt(playerid, 2148.89, -1104.31, 34.25);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - COUNT AND SHUTZ");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 9;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 9)
	{
	    ClearChatForPlayer(playerid, 10);

        TogglePlayerControllable(playerid, 0);
        SetPlayerPos(playerid, 2249.4092, -1644.8931, 15.4934);
	    SetPlayerCameraPos(playerid, 2247.20, -1653.38, 17.21);
		SetPlayerCameraLookAt(playerid, 2245.92, -1658.22, 17.18);

		SCM(playerid, BOJA_PLAVA, "TUTORIAL - BINCO");
		SCM(playerid, BOJA_PLAVA, "Adminima se mozete obratiti pomocu /help, /pitaj, /pomoc");
		SCM(playerid, BOJA_PLAVA, "Ne brinite, mi cemo vas upoznati sa serverom.");
		SCM(playerid, BOJA_PLAVA, "Molimo vas, strpite se i pogledajte tutorial par minuta.");
		SCM(playerid, BOJA_PLAVA, "Spawn je mesto gde se svaki igrac stvara nakon registracije.");
		SCM(playerid, BOJA_PLAVA, "Za svaku pomoc, svaki problem, svako pitanje, mozete se obratiti adminima.");

		PlayerOnTutorial[playerid] = 10;

		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}
	else if(PlayerOnTutorial[playerid] == 10)
	{
	    TextDrawHideForPlayer(playerid, TUT1);
        TextDrawHideForPlayer(playerid, TUT2);

	    SetCameraBehindPlayer(playerid);

	    TogglePlayerControllable(playerid, 1);

	    PlayerInfo[playerid][pTut] = 1;
	    SavePlayer(playerid);

	    SCM(playerid, BOJA_PLAVA, "TUTORIAL - KRAJ");
		SCM(playerid, BOJA_PLAVA, "Kraj tutorijala.");

		PlayerOnTutorial[playerid] = 9999;
	}
}

forward AntiFreezePlayer(playerid);
public AntiFreezePlayer(playerid)
{
    TogglePlayerControllable(playerid, 1);
    //TRUCKMAN JOB
    if(OnATruckMission[playerid] == 1) SCM(playerid, BOJA_ZELENA, "Utovarili ste robu, odvezite do checkpointa.");
    if(OnATruckMission[playerid] == 2) SCM(playerid, BOJA_ZELENA, "Istovarili ste robu, vratite se nazad.");
    if(OnATruckMission[playerid] == 11)
	{
	    SetPlayerCheckpoint(playerid, 637.5117, 1254.6007, 11.8052, 5.0);
		OnATruckMission[playerid] = 12;
		SCM(playerid, BOJA_ZELENA, "Utovarili ste robu, odvezite do checkpointa.");
	}
    if(OnATruckMission[playerid] == 13)
	{
	    SetPlayerCheckpoint(playerid, -78.14, -1136.04, 1.08, 5.0);
		SCM(playerid, BOJA_ZELENA, "Istovarili ste robu, vratite se nazad.");
	}

	//SMUGGLERS
	//DRUG
	if(OnASmugglerMission[playerid] == 1)
	{
		OnASmugglerMission[playerid] = 2;
		SCM(playerid, BOJA_ZELENA, "Odvezite tovar nazad u skladiste.");
		SetPlayerCheckpoint(playerid, 2184.0315, -2260.7183, 13.1357, 5.0);
	}
	else if(OnASmugglerMission[playerid] == 2)
	{
	    OnASmugglerMission[playerid] = 9999;
		SCM(playerid, BOJA_ZELENA, "Istovarili ste robu, droga je vasa. (10g)");
		PlayerInfo[playerid][pDrug] += 10;
		SavePlayer(playerid);
	}
	//MATERIALS
	if(OnASmugglerMission[playerid] == 11)
	{
		OnASmugglerMission[playerid] = 12;
		SCM(playerid, BOJA_ZELENA, "Odvezite tovar nazad u skladiste.");
		SetPlayerCheckpoint(playerid, 2184.0315, -2260.7183, 13.1357, 5.0);
	}
	else if(OnASmugglerMission[playerid] == 12)
	{
	    OnASmugglerMission[playerid] = 9999;
		SCM(playerid, BOJA_ZELENA, "Istovarili ste robu, materijali su vasi. (10g)");
		PlayerInfo[playerid][pMats] += 1000;
		SavePlayer(playerid);
	}
	//FUEL
	if(pRefuelling[playerid] == 1)
	{
	   	new vID = GetPlayerVehicleID(playerid);
	   	vFuel[vID] += RefillLitre[playerid];
	   	pRefuelling[playerid] = 9999;
	   	PlayerInfo[playerid][pMoney] -= RefillLitre[playerid]*5;
	   	GivePlayerMoney(playerid, -RefillLitre[playerid]*5);
		SavePlayer(playerid);
	}

	//COP
	if(Tazzed[playerid] == 1) Tazzed[playerid] = 9999;
}

forward ShowStats(playerid, targetid);
public ShowStats(playerid, targetid)
{
    new str[2048], str1[256], str2[256], str3[256], str4[256], str5[256], str6[256];
	new sendername[MAX_PLAYER_NAME], sex[32], years, country[32], job[32], level, respect, hours, mobilenumber, mobilecredit, money, bankaccount, bankmoney, org[32], orgrank, kills, deaths, drugs, mats, wantedtimes, arrestedtimes, houseID, apartmentID, bizzID, sbizzID;
	sendername = GetPlayerNameEx(playerid);
	sex = PlayerSex(playerid);
	years = PlayerInfo[playerid][pAge];
	country = PlayerCountry(playerid);
	job = PlayerJob(playerid);
	level = PlayerInfo[playerid][pLevel];
 	respect = PlayerInfo[playerid][pRespect];
 	hours = PlayerInfo[playerid][pHours];
 	mobilenumber = PlayerInfo[playerid][pMobileNumber];
 	mobilecredit = PlayerInfo[playerid][pMobileCredit];
 	money = PlayerInfo[playerid][pMoney];
 	bankaccount = PlayerInfo[playerid][pBankAccount];
 	bankmoney = PlayerInfo[playerid][pBankMoney];
 	org = GetOrganizationName(PlayerInfo[playerid][pOMember]);
 	orgrank = PlayerInfo[playerid][pORank];
 	kills = PlayerInfo[playerid][pKills];
 	deaths = PlayerInfo[playerid][pDeaths];
 	drugs = PlayerInfo[playerid][pDrug];
 	mats = PlayerInfo[playerid][pMats];
 	wantedtimes = PlayerInfo[playerid][pWantedTimes];
 	arrestedtimes = PlayerInfo[playerid][pArrestedTimes];
 	houseID = PlayerInfo[playerid][pHouseID];
 	apartmentID = PlayerInfo[playerid][pApartmentID];
 	bizzID = PlayerInfo[playerid][pBizzID];
	sbizzID = PlayerInfo[playerid][pSBizzID];
	format(str1, sizeof(str1), ""BELA"|----------OSNOVNI PODACI-----------------| \n| "PLAVA"Ime"BELA": %s \n| "PLAVA"Pol"BELA": %s \n| "PLAVA"Godina"BELA": %d \n| "PLAVA"Drzava"BELA": %s", sendername, sex, years, country);
	format(str2, sizeof(str2), "\n| "PLAVA"Posao"BELA": %s \n| "PLAVA"Level"BELA": %d \n| "PLAVA"Respect"BELA": %d \n| "PLAVA"Ukupan broj sati"BELA": %d \n| "PLAVA"Broj mobilnog telefona"BELA": %d \n| "PLAVA"Kredit"BELA": %d", job, level, respect, hours, mobilenumber, mobilecredit);
	format(str3, sizeof(str3), "\n"BELA"|----------NOVCANO STANJE----------------| \n| "PLAVA"Novac"BELA": %d \n| "PLAVA"Racun u banci"BELA": %d \n| "PLAVA"Novac na racunu"BELA": %d", money, bankaccount, bankmoney);
	format(str4, sizeof(str4), "\n"BELA"|----------KRIMINAL------------------------------| \n| "PLAVA"Banda"BELA": %s \n| "PLAVA"Rank"BELA": %d \n| "PLAVA"Ubistva"BELA": %d \n| "PLAVA"Smrti"BELA": %d \n| "PLAVA"Droga"BELA": %d \n| "PLAVA"Materijali"BELA": %d", org, orgrank, kills, deaths, drugs, mats);
	format(str5, sizeof(str5), "\n| "PLAVA"Trazen"BELA": %d \n| "PLAVA"Hapsen"BELA": %d", wantedtimes, arrestedtimes);
	format(str6, sizeof(str6), "\n"BELA"|----------NEKRETNINE&PREDUZECA--| \n| "PLAVA"Kuca"BELA": %d \n| "PLAVA"Stan"BELA": %d \n| "PLAVA"Biznis"BELA": %d \n| "PLAVA"Specijalan biznis"BELA": %d", houseID, apartmentID, bizzID, sbizzID);
	format(str, sizeof(str), "%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6);
    SPD(targetid, DIALOG_STATS, DIALOG_STYLE_MSGBOX, ""PLAVA"STATS", str, "U redu", "");
	return 1;
}

forward SetPlayerSkills(playerid);
public SetPlayerSkills(playerid)
{
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, PlayerInfo[playerid][pPistolSkill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[playerid][pSilencedSkill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[playerid][pDesertSkill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, PlayerInfo[playerid][pShotgunSkill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[playerid][pSawnoffSkill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[playerid][pCombatSkill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, PlayerInfo[playerid][pUziSkill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, PlayerInfo[playerid][pMP5Skill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, PlayerInfo[playerid][pAK47Skill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, PlayerInfo[playerid][pM4Skill]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[playerid][pSniperSkill]);
	return 1;
}

forward SetPlayerVariablesOnSpawn(playerid);
public SetPlayerVariablesOnSpawn(playerid)
{
    pBelt[playerid] = 9999;
    pHelmet[playerid] = 9999;
    pRefuelling[playerid] = 9999;
    RefillLitre[playerid] = 0;
    vSearching[playerid] = 9999;
    //					Jobs
    //DETECTIVE
    DetectiveDuty[playerid] = 9999;
    DetectiveSearchingOffer[playerid] = 9999;
	DetectivePlayerToFind[playerid] = 0;
	DetectiveSearchingPrice[playerid] = 0;

	//Truckman
    OnATruckMission[playerid] = 9999;

    //MECHANIC
    MechanicDuty[playerid] = 9999;
    MechanicRepairOffer[playerid] = 9999;
	MechanicRepairPlayerOffer[playerid] = 9999;
	MechanicRepairOfferPrice[playerid] = 0;
	MechanicRepairOfferVehicle[playerid] = 9999;
	MechanicRefillOffer[playerid] = 9999;
	MechanicRefillPlayerOffer[playerid] = 9999;
	MechanicRefillLitre[playerid] = 0;
	MechanicRefillOfferPrice[playerid] = 0;
	MechanicRefillOfferVehicle[playerid] = 9999;

    //TAXI
    TaxiDuty[playerid] = 9999;
    TaxiDriver[playerid] = 9999;
    TaxiStartingPrice[playerid] = 0;
    TaxiTime[playerid] = 0;
    TaxiMoney[playerid] = 0;

	//DEALER
	DrugSellOffer[playerid] = 9999;
	DrugBuyOffer[playerid] = 9999;
	DrugPlayerOffer[playerid] = 9999;
	DrugOfferAmmount[playerid] = 0;
	DrugOfferPrice[playerid] = 0;
	MaterialsSellOffer[playerid] = 9999;
	MaterialsBuyOffer[playerid] = 9999;
	MaterialsPlayerOffer[playerid] = 9999;
	MaterialsOfferAmmount[playerid] = 0;
	MaterialsOfferPrice[playerid] = 0;

	//SMUGGLER
	OnASmugglerMission[playerid] = 9999;

	//------------------------------------------------------------------------ > INTERIORS
	InBank[playerid] = 9999;
	InCityHall[playerid] = 9999;
	InGSFHQ[playerid] = 9999;
	InBallasHQ[playerid] = 9999;
	InLSVHQ[playerid] = 9999;
	InVLAHQ[playerid] = 9999;
	InHouse[playerid] = 9999;
	InApartment[playerid] = 9999;
	InBusiness[playerid] = 9999;
	//------------------------------------------------------------------------ > PHONE SYSTEM
	iCall[playerid] = 9999;
	Caller[playerid] = 9999;
	CalledPlayer[playerid] = 9999;
	InCall[playerid] = 9999;
	//------------------------------------------------------------------------ > TUTORIAL
	PlayerOnTutorial[playerid] = 9999;
	//------------------------------------------------------------------------ > OFFERS
	VehicleSellOffer[playerid] = 9999;
 	VehicleBuyOffer[playerid] = 9999;
 	VehicleForOffer[playerid] = 9999;
	VehiclePlayerOffer[playerid] = 9999;
	VehicleOfferPrice[playerid] = 0;
	HouseSellOffer[playerid] = 9999;
 	HouseBuyOffer[playerid] = 9999;
 	HouseForOffer[playerid] = 9999;
	HousePlayerOffer[playerid] = 9999;
	HouseOfferPrice[playerid] = 0;
	//------------------------------------------------------------------------ > WANTED && COP
	Tazer[playerid] = 9999;
	Tazzed[playerid] = 9999;
	Cuffed[playerid] = 9999;
	GaveUp[playerid] = 9999;
	Pulling[playerid] = 9999;
	Pulling[Pulled[playerid]] = 9999;
	Pulled[playerid] = 9999;
	CopDuty[playerid] = 9999;

	if(Pulling[playerid] != 9999)
	{
		KillTimer(CopTimer[playerid]);
		Pulled[Pulling[playerid]] = 9999;
		Pulling[playerid] = 9999;
	}

	if(Pulled[playerid] != 9999)
	{
	    KillTimer(CopTimer[Pulled[playerid]]);
	    Pulling[Pulled[playerid]] = 9999;
	    Pulled[playerid] = 9999;
	}
}

//---------------------------------------------------------------------------- > OTHER FOR VEHICLES
forward StartVehicleEngine(playerid, vehicleid);
public StartVehicleEngine(playerid, vehicleid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective, sendername[MAX_PLAYER_NAME], str[128];
 	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, 1, 1, alarm, doors, bonnet, boot, objective);

	vEngine[vehicleid] = 1;
	StartingEngine[playerid] = 9999;
	TogglePlayerControllable(playerid, 1);

	SCM(playerid, BOJA_ZELENA, "Motor vozila pokrenut.");
	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "%s pali motor vozila.", sendername);
	SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
}

forward SaveVehicleComponents(vehicleid);
public SaveVehicleComponents(vehicleid)
{
	new spoiler, hood, roof, sideskirt, lamps, nitro, exhaust, wheels;
	new stereo, hydraulics, frontbumper, rearbumper, leftvent, rightvent;
	spoiler = GetVehicleComponentInSlot(vehicleid, 0);
	hood = GetVehicleComponentInSlot(vehicleid, 1);
	roof = GetVehicleComponentInSlot(vehicleid, 2);
	sideskirt = GetVehicleComponentInSlot(vehicleid, 3);
	lamps = GetVehicleComponentInSlot(vehicleid, 4);
	nitro = GetVehicleComponentInSlot(vehicleid, 5);
	exhaust = GetVehicleComponentInSlot(vehicleid, 6);
	wheels = GetVehicleComponentInSlot(vehicleid, 7);
	stereo = GetVehicleComponentInSlot(vehicleid, 8);
	hydraulics = GetVehicleComponentInSlot(vehicleid, 9);
	frontbumper = GetVehicleComponentInSlot(vehicleid, 10);
	rearbumper = GetVehicleComponentInSlot(vehicleid, 11);
	rightvent = GetVehicleComponentInSlot(vehicleid, 12);
	leftvent = GetVehicleComponentInSlot(vehicleid, 13);

	if(spoiler != 0) { VehicleInfo[vehicleid][vSpoiler] = spoiler; }
	if(hood != 0) { VehicleInfo[vehicleid][vHood] = hood; }
	if(roof != 0) { VehicleInfo[vehicleid][vRoof] = roof; }
	if(sideskirt != 0) { VehicleInfo[vehicleid][vSideskirt] = sideskirt; }
	if(lamps != 0) { VehicleInfo[vehicleid][vLamps] = lamps; }
	if(nitro != 0) { VehicleInfo[vehicleid][vNitro] = nitro; }
	if(exhaust != 0) { VehicleInfo[vehicleid][vExhaust] = exhaust; }
	if(wheels != 0) { VehicleInfo[vehicleid][vWheels] = wheels; }
	if(stereo != 0) { VehicleInfo[vehicleid][vStereo] = stereo; }
	if(hydraulics != 0) { VehicleInfo[vehicleid][vHydraulics] = hydraulics; }
	if(frontbumper != 0) { VehicleInfo[vehicleid][vFront_bumper] = frontbumper; }
	if(rearbumper != 0) { VehicleInfo[vehicleid][vRear_bumper] = rearbumper; }
	if(rightvent != 0) { VehicleInfo[vehicleid][vVent_right] = rightvent; }
	if(leftvent != 0) { VehicleInfo[vehicleid][vVent_left] = leftvent; }
	SaveVehicle(vehicleid);
}

forward SetVehicleComponents(vehicleid);
public SetVehicleComponents(vehicleid)
{
	if(VehicleInfo[vehicleid][vSpoiler] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vSpoiler]); }
	if(VehicleInfo[vehicleid][vHood] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vHood]); }
	if(VehicleInfo[vehicleid][vRoof] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vRoof]); }
	if(VehicleInfo[vehicleid][vSideskirt] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vSideskirt]); }
	if(VehicleInfo[vehicleid][vLamps] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vLamps]); }
	if(VehicleInfo[vehicleid][vNitro] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vNitro]); }
	if(VehicleInfo[vehicleid][vExhaust] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vExhaust]); }
	if(VehicleInfo[vehicleid][vWheels] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vWheels]); }
	if(VehicleInfo[vehicleid][vStereo] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vStereo]); }
	if(VehicleInfo[vehicleid][vHydraulics] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vHydraulics]); }
	if(VehicleInfo[vehicleid][vFront_bumper] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vFront_bumper]); }
	if(VehicleInfo[vehicleid][vRear_bumper] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vRear_bumper]); }
	if(VehicleInfo[vehicleid][vVent_right] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vVent_right]); }
	if(VehicleInfo[vehicleid][vVent_left] >= 0) { AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vVent_left]); }
}

forward RemoveVehicleComponents(vehicleid);
public RemoveVehicleComponents(vehicleid)
{
    VehicleInfo[vehicleid][vSpoiler] = 0;
    VehicleInfo[vehicleid][vHood] = 0;
    VehicleInfo[vehicleid][vRoof] = 0;
    VehicleInfo[vehicleid][vSideskirt] = 0;
    VehicleInfo[vehicleid][vLamps] = 0;
    VehicleInfo[vehicleid][vNitro] = 0;
    VehicleInfo[vehicleid][vExhaust] = 0;
    VehicleInfo[vehicleid][vWheels] = 0;
    VehicleInfo[vehicleid][vStereo] = 0;
    VehicleInfo[vehicleid][vHydraulics] = 0;
    VehicleInfo[vehicleid][vFront_bumper] = 0;
    VehicleInfo[vehicleid][vRear_bumper] = 0;
    VehicleInfo[vehicleid][vVent_right] = 0;
    VehicleInfo[vehicleid][vVent_left] = 0;
    SaveVehicle(vehicleid);
}

forward CheckVehicleFuel();
public CheckVehicleFuel()
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
    for(new v = 0; v < MAX_VEHICLES; v++)
    {
   		GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
    	if(IsABoat(v)) vFuel[v] += 1;
    	if(IsAPlane(v)) vFuel[v] += 1;
    	if(vEngine[v] == 1 && vFuel[v] > 0) vFuel[v] -= 1;
    	if(vFuel[v] < 1)
		{
			SetVehicleParamsEx(v, 0, 0, alarm, doors, bonnet, boot, objective);
			vEngine[v] = 0;
		}
	}
	return 1;
}

forward GetVehiclePrice(vehicleid);
public GetVehiclePrice(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	if(model == 400) return 3700; // LANDSTALKER
	else if(model == 401) return 3000; // BRAVURA
	else if(model == 402) return 5000; // BUFFALO
	else if(model == 403) return 20000; // LINERUNER
	else if(model == 404) return 3000; // PERENNIEL
	else if(model == 405) return 3700; // SENTINEL
	else if(model == 406) return 9999; // DUMPER (NO SALE)
	else if(model == 407) return 9999; // FIRETRUCK (NO SALE)
	else if(model == 408) return 9999; // TRASHMASTER (NO SALE)
	else if(model == 409) return 10000; // STRETCH
	else if(model == 410) return 3000; // MANANA
	else if(model == 411) return 9999; // INFERNUS (DONATE)
	else if(model == 412) return 2200; // VOODOO
	else if(model == 413) return 2500; // PONY
	else if(model == 414) return 9999; // MULE (NO SALE)
	else if(model == 415) return 9999; // CHEETAH (DONATE)
	else if(model == 416) return 9999; // AMBULANCE (NO SALE)
	else if(model == 417) return 9999; // LEVIATHAN (HELICOPTER)
	else if(model == 418) return 2900; // MOONBEAM
	else if(model == 419) return 2200; // ESPERANTO
	else if(model == 420) return 10000; // TAXI
	else if(model == 421) return 4700; // WASHINGTON
	else if(model == 422) return 3000; // BOBCAT
	else if(model == 423) return 10000; // MR WHOOPE
	else if(model == 424) return 7000; // BF INJECTION
	else if(model == 425) return 9999; // HUNTER (NO SALE)
	else if(model == 426) return 4300; // PREMIER
	else if(model == 427) return 9999; // ENFORCER (NO SALE)
	else if(model == 428) return 5000; // SECURICAR (NO SALE)
	else if(model == 429) return 7500; // BANSHEE
	else if(model == 430) return 9999; // BOAT
	else if(model == 431) return 9999; // BUS (NO SALE)
	else if(model == 432) return 9999; // TANK (NO SALE)
	else if(model == 433) return 9999; // ARMY VEHICLE (NO SALE)
	else if(model == 434) return 10000; // HOTKNIFE
	else if(model == 435) return 9999; // TRAILER (NO SALE)
	else if(model == 436) return 3000; // PREVION
	else if(model == 437) return 9999; // BUS (NO SALE)
	else if(model == 438) return 6000; // CABBIE (TAXI)
	else if(model == 439) return 3000; // STALLION
	else if(model == 440) return 2500; // RUMPO
	else if(model == 441) return 9999; // RC BANDIT (NO SALE)
	else if(model == 442) return 9999; // ROMERO
	else if(model == 443) return 20000; // PACKER (NO SALE)
	else if(model == 444) return 9999; // MONSTER (NO SALE)
	else if(model == 445) return 4300; // ADMIRAL
	else if(model == 446) return 9999; // BOAT
	else if(model == 447) return 9999; // SEASPARROW (HELICOPTER)
	else if(model == 448) return 9999; // PIZZA
	else if(model == 449) return 9999; // TRAM (NO SALE)
	else if(model == 450) return 9999; // TRAILER (NO SALE)
	else if(model == 451) return 9999; // TURISMO (DONATE)
	else if(model == 452) return 9999; // SPEEDER (BOAT)
	else if(model == 453) return 9999; // REEFER (BOAT)
	else if(model == 454) return 9999; // TROPIC (BOAT)
	else if(model == 455) return 10000; // FLATBED (NO SALE)
	else if(model == 456) return 10000; // YANKEE (NO SALE)
	else if(model == 457) return 9999; // CADDY (NO SALE)
	else if(model == 458) return 4700; // SOLAIR
	else if(model == 459) return 9999; // TOPFUN VAN
	else if(model == 460) return 9999; // SKIPPER (AIRPLANE)
	else if(model == 461) return 3800; // PCJ-600 (BIKE)
	else if(model == 462) return 1500; // FAGGIO (BIKE)
	else if(model == 463) return 3700; // FREEWAY (BIKE)
	else if(model == 464) return 9999; // RC BARON (NO SALE)
	else if(model == 465) return 9999; // RC RAIDER (NO SALE)
	else if(model == 466) return 3000; // GLENDALE
	else if(model == 467) return 3000; // OCEANIC
	else if(model == 468) return 3000; // SANCHEZ (BIKE)
	else if(model == 469) return 9999; // SPARROW (HELICOPTER)
	else if(model == 470) return 7000; // PATRIOT (NO SALE)
	else if(model == 471) return 2700; // QUAD (BIKE)
	else if(model == 472) return 9999; // COASTGUARD (BOAT)
	else if(model == 473) return 9999; // DINGHY (BOAT)
	else if(model == 474) return 3000; // HERMES
	else if(model == 475) return 3000; // SABRE
	else if(model == 476) return 9999; // RUSTLER (AIRPLANE)
	else if(model == 477) return 9000; // ZR-350
	else if(model == 478) return 3000; // WALTON
	else if(model == 479) return 3800; // REGINA
	else if(model == 480) return 6700; // COMET
	else if(model == 481) return 650; // BMX (BIKE)
	else if(model == 482) return 2700; // BURRITO
	else if(model == 483) return 4000; // CAMPER
	else if(model == 484) return 9999; // MARQUIS (BOAT)
	else if(model == 485) return 9999; // BAGGAGE (NO SALE)
	else if(model == 486) return 9999; // BAGGER (NO SALE)
	else if(model == 487) return 9999; // MAVERICK (HELICOPTER)
	else if(model == 488) return 9999; // SAN NEWS MAVERICK (NO SALE)
	else if(model == 489) return 4000; // RANCHER
	else if(model == 490) return 9999; // FBI RANCHER (NO SALE)
	else if(model == 491) return 3300; // VIRGO
	else if(model == 492) return 4500; // GREENVOD
	else if(model == 493) return 9999; // JETMAX (BOAT)
	else if(model == 494) return 9999; // HOTRING (NO SALE)
	else if(model == 495) return 9000; // SANDKING
	else if(model == 496) return 1800; // BLISTA COMPACT
	else if(model == 497) return 9999; // POLICE MAVERICK (NO SALE)
	else if(model == 498) return 9999; // BOXVILLE (NO SALE)
	else if(model == 499) return 9999; // BENSON (NO SALE)
	else if(model == 500) return 3300; // MESA
	else if(model == 501) return 9999; // RC GOBLIN (NO SALE)
	else if(model == 502) return 9999; // HOTRING (NO SALE)
	else if(model == 503) return 9999; // HOTRING (NO SALE)
	else if(model == 504) return 9999; // BLOODRING RANGER (NO SALE)
	else if(model == 505) return 7000; // RANCHER
	else if(model == 506) return 10000; // SUPER GT
	else if(model == 507) return 4500; // ELEGANT
	else if(model == 508) return 7500; // JOURNEY (NO SALE)
	else if(model == 509) return 600; // BIKE (BIKE)
	else if(model == 510) return 850; // MOUNTAIN BIKE (BIKE)
	else if(model == 511) return 9999; // BEAGLE (AIRPLANE)
	else if(model == 512) return 9999; // CROPDUSTER (AIRPLANE)
	else if(model == 513) return 9999; // STUNTPLANE (AIRPLANE)
	else if(model == 514) return 9999; // TANKER
	else if(model == 515) return 9999; // ROADTRAIN
	else if(model == 516) return 3500; // NEBULA
	else if(model == 517) return 3500; // MAJESTIC
	else if(model == 518) return 2500; // BUCCANEER
	else if(model == 519) return 9999; // SHAMAL (AIRPLANE)
	else if(model == 520) return 9999; // HYDRA (NO SALE)
	else if(model == 521) return 4500; // FCR-900 (BIKE)
	else if(model == 522) return 9999; // NRG (NO SALE)
	else if(model == 523) return 9999; // PD BIKE (NO SALE)
	else if(model == 524) return 9999; // TRUCK
	else if(model == 525) return 9999; // TRUCK
	else if(model == 526) return 3700; // FORTUNE
	else if(model == 527) return 3700; // CADRONA
	else if(model == 528) return 9999; // FBI TRUCK (NO SALE)
	else if(model == 529) return 4000; // WILLARD
	else if(model == 530) return 9999; // FORKLIFT (NO SALE)
	else if(model == 531) return 9999; // TRACTOR (NO SALE)
	else if(model == 532) return 9999; // COMBINE (NO SALE)
	else if(model == 533) return 2500; // FELTZER
	else if(model == 534) return 2800; // REMINGTON
	else if(model == 535) return 3100; // SLAMVAN
	else if(model == 536) return 3500; // BLADE
	else if(model == 537) return 9999; // TRAIN (NO SALE)
	else if(model == 538) return 9999; // TRAIN (NO SALE)
	else if(model == 539) return 10000; // VORTEX
	else if(model == 540) return 2700; // VINCENT
	else if(model == 541) return 9999; // BULLET (DONATE)
	else if(model == 542) return 3200; // CLOVER
	else if(model == 543) return 3000; // SADLER
	else if(model == 544) return 9999; // FIRETRUCK (NO SALE)
	else if(model == 545) return 2000; // HUSTLER
	else if(model == 546) return 3000; // INTRUDER
	else if(model == 547) return 3000; // PRIMO
	else if(model == 548) return 9999; // CARGOBOB (HELICOPTER)
	else if(model == 549) return 3900; // TAMPA
	else if(model == 550) return 3000; // SUNRISE
	else if(model == 551) return 19000; // MERIT
	else if(model == 552) return 20000; // UTILITY VAN (NO SALE)
	else if(model == 553) return 200; // NEVADA (AIRPLANE)
	else if(model == 554) return 3300; // YOSEMITE
	else if(model == 555) return 3000; // WINDSOR
	else if(model == 556) return 40000; // MONSTER A (NO SALE)
	else if(model == 557) return 40000; // MONSTER B (NO SALE)
	else if(model == 558) return 6000; // URANUS
	else if(model == 559) return 7000; // JESTER
	else if(model == 560) return 9500; // STRATUM
	else if(model == 561) return 6500; // SULTAN
	else if(model == 562) return 10000; // ELEGY
	else if(model == 563) return 200; // RAINDANCE (HELICOPTER)
	else if(model == 564) return 500; // RC TIGER (NO SALE)
	else if(model == 565) return 7500; // FLASH
	else if(model == 566) return 35000; // TAHOMA
	else if(model == 567) return 4000; // SAVANNA
	else if(model == 568) return 10000; // BANDITO
	else if(model == 569) return 5000; // FREIGHT FLAT TRAILER (NO SALE)
	else if(model == 570) return 5000; // STREAK TRAILER (NO SALE)
	else if(model == 571) return 3000; // KART
	else if(model == 572) return 15000; // MOWER (NO SALE)
	else if(model == 553) return 40000; // DUNE
	else if(model == 574) return 15000; // SWEEPER (NO SALE)
	else if(model == 575) return 19000; // BROADWAY
	else if(model == 576) return 19000; // TORNADO
	else if(model == 577) return 200; // AT400 (AIRPLANE)
	else if(model == 578) return 5000; // DFT-30 (NO SALE)
	else if(model == 579) return 17000; // HUNTLEY
	else if(model == 580) return 4000; // STAFFORD
	else if(model == 581) return 3200; // BF-400 (BIKE)
	else if(model == 582) return 20000; // NEWSVAN (NO SALE)
	else if(model == 583) return 15000; // TUG (NO SALE)
	else if(model == 584) return 35000; // PETROL TRAILER (NO SALE)
	else if(model == 585) return 35000; // EMPEROR
	else if(model == 586) return 2700; // WAYFARER (BIKE)
	else if(model == 587) return 3500; // EUROS
	else if(model == 588) return 10000; // HOTDOG
	else if(model == 589) return 3000; // CLUB
	else if(model == 590) return 35000; // FREIGHT BOX TRAILER (NO SALE)
	else if(model == 591) return 35000; // ARTICLE TRAILER (NO SALE)
	else if(model == 592) return 200; // ANDROMADA (AIRPLANE)
	else if(model == 593) return 200; // DODO
	else if(model == 594) return 500; // RC CAM (NO SALE)
	else if(model == 595) return 200; // LAUNCH (BOAT)
	else if(model == 596) return 25000; // POLICE CAR (LSPD) (NO SALE)
	else if(model == 597) return 25000; // POLICE CAR (SFPD) (NO SALE)
	else if(model == 598) return 25000; // POLICE CAR (LVPD) (NO SALE)
	else if(model == 599) return 25000; // POLICE RANGER (NO SALE)
	else if(model == 600) return 26000; // PICADOR
	else if(model == 601) return 40000; // S.W.A.T. (NO SALE)
	else if(model == 602) return 3700; // ALPHA
	else if(model == 603) return 4500; // PHOENIX
	else if(model == 604) return 9000; // GLENDALE SHIT (NO SALE)
	else if(model == 605) return 9000; // SADLER SHIT (NO SALE)
	else if(model == 606) return 9000; // BAGGAGE TRAILER A (NO SALE)
	else if(model == 607) return 9000; // BAGGAGE TRAILER B (NO SALE)
	else if(model == 608) return 9000; // TUG STAIRS TRAILER (NO SALE)
	else if(model == 609) return 22000; // BOXVILLE (NO SALE)
	else if(model == 610) return 9000; // FARM TRAILER (NO SALE)
	else if(model == 611) return 9000; // UTILITY TRAILER  (NO SALE)
	else return 0;
}

forward GetVehicleName(vehicleid, model[], len);
public GetVehicleName(vehicleid, model[], len)
{
	new checking = GetVehicleModel(vehicleid);
	if(checking == 400) return format(model, len, "Landstalker", 0);
	else if(checking == 401) return format(model, len, "Bravura", 0);
	else if(checking == 402) return format(model, len, "Buffalo", 0);
	else if(checking == 403) return format(model, len, "Linerunner", 0);
	else if(checking == 404) return format(model, len, "Perenail", 0);
	else if(checking == 405) return format(model, len, "Sentinel", 0);
	else if(checking == 406) return format(model, len, "Dumper", 0);
	else if(checking == 407) return format(model, len, "Firetruck", 0);
	else if(checking == 408) return format(model, len, "Trashmaster", 0);
	else if(checking == 409) return format(model, len, "Stretch", 0);
	else if(checking == 410) return format(model, len, "Manana", 0);
	else if(checking == 411) return format(model, len, "Infernus", 0);
	else if(checking == 412) return format(model, len, "Vodooo", 0);
	else if(checking == 413) return format(model, len, "Pony", 0);
	else if(checking == 414) return format(model, len, "Mule", 0);
	else if(checking == 415) return format(model, len, "Cheetah", 0);
	else if(checking == 416) return format(model, len, "Ambulance", 0);
	else if(checking == 417) return format(model, len, "Leviathan", 0);
	else if(checking == 418) return format(model, len, "Moonbeam", 0);
	else if(checking == 419) return format(model, len, "Esperanto", 0);
	else if(checking == 420) return format(model, len, "Taxi", 0);
	else if(checking == 421) return format(model, len, "Washington", 0);
	else if(checking == 422) return format(model, len, "Bobcat", 0);
	else if(checking == 423) return format(model, len, "Mr Whoopee", 0);
	else if(checking == 424) return format(model, len, "BF Injection", 0);
	else if(checking == 425) return format(model, len, "Hunter", 0);
	else if(checking == 426) return format(model, len, "Premier", 0);
	else if(checking == 427) return format(model, len, "S.W.A.T Truck", 0);
	else if(checking == 428) return format(model, len, "Securicar", 0);
	else if(checking == 429) return format(model, len, "Banshee", 0);
	else if(checking == 430) return format(model, len, "Predator", 0);
	else if(checking == 431) return format(model, len, "Bus", 0);
	else if(checking == 432) return format(model, len, "Rhino", 0);
	else if(checking == 433) return format(model, len, "Barracks", 0);
	else if(checking == 434) return format(model, len, "Hotknife", 0);
	else if(checking == 435) return format(model, len, "Trailer", 0);
	else if(checking == 436) return format(model, len, "Previon", 0);
	else if(checking == 437) return format(model, len, "Coach", 0);
	else if(checking == 438) return format(model, len, "Cabbie", 0);
	else if(checking == 439) return format(model, len, "Stallion", 0);
	else if(checking == 440) return format(model, len, "Rumpo", 0);
	else if(checking == 441) return format(model, len, "RC Bandit", 0);
	else if(checking == 442) return format(model, len, "Romero", 0);
	else if(checking == 443) return format(model, len, "Packer", 0);
	else if(checking == 444) return format(model, len, "Monster", 0);
	else if(checking == 445) return format(model, len, "Admiral", 0);
	else if(checking == 446) return format(model, len, "Squalo", 0);
	else if(checking == 447) return format(model, len, "Seasparrow", 0);
	else if(checking == 448) return format(model, len, "Pizza Boy", 0);
	else if(checking == 449) return format(model, len, "Tram", 0);
	else if(checking == 450) return format(model, len, "Trailer 2", 0);
	else if(checking == 451) return format(model, len, "Turismo", 0);
	else if(checking == 452) return format(model, len, "Speeder", 0);
	else if(checking == 453) return format(model, len, "Refeer", 0);
	else if(checking == 454) return format(model, len, "Tropic", 0);
	else if(checking == 455) return format(model, len, "Flatbed", 0);
	else if(checking == 456) return format(model, len, "Yankee", 0);
	else if(checking == 457) return format(model, len, "Caddy", 0);
	else if(checking == 458) return format(model, len, "Solair", 0);
	else if(checking == 459) return format(model, len, "Top Fun", 0);
	else if(checking == 460) return format(model, len, "Skimmer", 0);
	else if(checking == 461) return format(model, len, "PCJ-600", 0);
	else if(checking == 462) return format(model, len, "Faggio", 0);
	else if(checking == 463) return format(model, len, "Freeway", 0);
	else if(checking == 464) return format(model, len, "RC Baron", 0);
	else if(checking == 465) return format(model, len, "RC Raider", 0);
	else if(checking == 466) return format(model, len, "Glendade", 0);
	else if(checking == 467) return format(model, len, "Oceanic", 0);
	else if(checking == 468) return format(model, len, "Sanchez", 0);
	else if(checking == 469) return format(model, len, "Sparrow", 0);
	else if(checking == 470) return format(model, len, "Patriot", 0);
	else if(checking == 471) return format(model, len, "Quad", 0);
	else if(checking == 472) return format(model, len, "Coastguard", 0);
	else if(checking == 473) return format(model, len, "Dinghy", 0);
	else if(checking == 474) return format(model, len, "Hermes", 0);
	else if(checking == 475) return format(model, len, "Sabre", 0);
	else if(checking == 476) return format(model, len, "Rustler", 0);
	else if(checking == 477) return format(model, len, "ZR-350", 0);
	else if(checking == 478) return format(model, len, "Walton", 0);
	else if(checking == 479) return format(model, len, "Regina", 0);
	else if(checking == 480) return format(model, len, "Comet", 0);
	else if(checking == 481) return format(model, len, "BMX", 0);
	else if(checking == 482) return format(model, len, "Burrito", 0);
	else if(checking == 483) return format(model, len, "Camper", 0);
	else if(checking == 484) return format(model, len, "Marquis", 0);
	else if(checking == 485) return format(model, len, "Baggage", 0);
	else if(checking == 486) return format(model, len, "Dozer", 0);
	else if(checking == 487) return format(model, len, "Maverick", 0);
	else if(checking == 488) return format(model, len, "News Maverick", 0);
	else if(checking == 489) return format(model, len, "Rancher", 0);
	else if(checking == 490) return format(model, len, "Federal Rancher", 0);
	else if(checking == 491) return format(model, len, "Virgo", 0);
	else if(checking == 492) return format(model, len, "Greenwood", 0);
	else if(checking == 493) return format(model, len, "Jetmax", 0);
	else if(checking == 494) return format(model, len, "Hotring", 0);
	else if(checking == 495) return format(model, len, "Sandking", 0);
	else if(checking == 496) return format(model, len, "Blista Compact", 0);
	else if(checking == 497) return format(model, len, "Police Maverick", 0);
	else if(checking == 498) return format(model, len, "Boxville", 0);
	else if(checking == 499) return format(model, len, "Benson", 0);
	else if(checking == 500) return format(model, len, "Mesa", 0);
	else if(checking == 501) return format(model, len, "RC Goblin", 0);
	else if(checking == 502) return format(model, len, "Hotring A", 0);
	else if(checking == 503) return format(model, len, "Hotring B", 0);
	else if(checking == 504) return format(model, len, "Blooding Banger", 0);
	else if(checking == 505) return format(model, len, "Rancher", 0);
	else if(checking == 506) return format(model, len, "Super GT", 0);
	else if(checking == 507) return format(model, len, "Elegant", 0);
	else if(checking == 508) return format(model, len, "Journey", 0);
	else if(checking == 509) return format(model, len, "Bike", 0);
	else if(checking == 510) return format(model, len, "Mountain Bike", 0);
	else if(checking == 511) return format(model, len, "Beagle", 0);
	else if(checking == 512) return format(model, len, "Cropduster", 0);
	else if(checking == 513) return format(model, len, "Stuntplane", 0);
	else if(checking == 514) return format(model, len, "Petrol", 0);
	else if(checking == 515) return format(model, len, "Roadtrain", 0);
	else if(checking == 516) return format(model, len, "Nebula", 0);
	else if(checking == 517) return format(model, len, "Majestic", 0);
	else if(checking == 518) return format(model, len, "Buccaneer", 0);
	else if(checking == 519) return format(model, len, "Shamal", 0);
	else if(checking == 520) return format(model, len, "Hydra", 0);
	else if(checking == 521) return format(model, len, "FCR-300", 0);
	else if(checking == 522) return format(model, len, "NRG-500", 0);
	else if(checking == 523) return format(model, len, "HPV-1000", 0);
	else if(checking == 524) return format(model, len, "Cement Truck", 0);
	else if(checking == 525) return format(model, len, "Towtruck", 0);
	else if(checking == 526) return format(model, len, "Fortune", 0);
	else if(checking == 527) return format(model, len, "Cadrona", 0);
	else if(checking == 528) return format(model, len, "Federal Truck", 0);
	else if(checking == 529) return format(model, len, "Williard", 0);
	else if(checking == 530) return format(model, len, "Fork Lift", 0);
	else if(checking == 531) return format(model, len, "Tractor", 0);
	else if(checking == 532) return format(model, len, "Combine", 0);
	else if(checking == 533) return format(model, len, "Feltzer", 0);
	else if(checking == 534) return format(model, len, "Remington", 0);
	else if(checking == 535) return format(model, len, "Slamvan", 0);
	else if(checking == 536) return format(model, len, "Blade", 0);
	else if(checking == 537) return format(model, len, "Freight", 0);
	else if(checking == 538) return format(model, len, "Streak", 0);
	else if(checking == 539) return format(model, len, "Vortex", 0);
	else if(checking == 540) return format(model, len, "Vincent", 0);
	else if(checking == 541) return format(model, len, "Bullet", 0);
	else if(checking == 542) return format(model, len, "Clover", 0);
	else if(checking == 543) return format(model, len, "Sadler", 0);
	else if(checking == 544) return format(model, len, "Stairs Firetruck", 0);
	else if(checking == 545) return format(model, len, "Hustler", 0);
	else if(checking == 546) return format(model, len, "Intruder", 0);
	else if(checking == 547) return format(model, len, "Primo", 0);
	else if(checking == 548) return format(model, len, "Cargobob", 0);
	else if(checking == 549) return format(model, len, "Tampa", 0);
	else if(checking == 550) return format(model, len, "Sunrise", 0);
	else if(checking == 551) return format(model, len, "Merit", 0);
	else if(checking == 552) return format(model, len, "Utility Van", 0);
	else if(checking == 553) return format(model, len, "Nevada", 0);
	else if(checking == 554) return format(model, len, "Yosemite", 0);
	else if(checking == 555) return format(model, len, "Windsor", 0);
	else if(checking == 556) return format(model, len, "Monster A", 0);
	else if(checking == 557) return format(model, len, "Monster B", 0);
	else if(checking == 558) return format(model, len, "Uranus", 0);
	else if(checking == 559) return format(model, len, "Jester", 0);
	else if(checking == 560) return format(model, len, "Sultan", 0);
	else if(checking == 561) return format(model, len, "Stratum", 0);
	else if(checking == 562) return format(model, len, "Elegy", 0);
	else if(checking == 563) return format(model, len, "Raindance", 0);
	else if(checking == 564) return format(model, len, "RC Tiger", 0);
	else if(checking == 565) return format(model, len, "Flash", 0);
	else if(checking == 566) return format(model, len, "Tahoma", 0);
	else if(checking == 567) return format(model, len, "Savanna", 0);
	else if(checking == 568) return format(model, len, "Bandito", 0);
	else if(checking == 569) return format(model, len, "Freight Flat", 0);
	else if(checking == 570) return format(model, len, "Streak", 0);
	else if(checking == 571) return format(model, len, "Kart", 0);
	else if(checking == 572) return format(model, len, "Mower", 0);
	else if(checking == 573) return format(model, len, "Duneride", 0);
	else if(checking == 574) return format(model, len, "Sweeper", 0);
	else if(checking == 575) return format(model, len, "Broadway", 0);
	else if(checking == 576) return format(model, len, "Tornado", 0);
	else if(checking == 577) return format(model, len, "AT-400", 0);
	else if(checking == 578) return format(model, len, "DFT-30", 0);
	else if(checking == 579) return format(model, len, "Huntley", 0);
	else if(checking == 580) return format(model, len, "Stafford", 0);
	else if(checking == 581) return format(model, len, "BF-400", 0);
	else if(checking == 582) return format(model, len, "Raindance", 0);
	else if(checking == 583) return format(model, len, "News Van", 0);
	else if(checking == 584) return format(model, len, "Tug", 0);
	else if(checking == 585) return format(model, len, "Petrol Tanker", 0);
	else if(checking == 586) return format(model, len, "Wayfarer", 0);
	else if(checking == 587) return format(model, len, "Euros", 0);
	else if(checking == 588) return format(model, len, "Hotdog", 0);
	else if(checking == 589) return format(model, len, "Club", 0);
	else if(checking == 590) return format(model, len, "Freight Box", 0);
	else if(checking == 591) return format(model, len, "Trailer 3", 0);
	else if(checking == 592) return format(model, len, "Andromada", 0);
	else if(checking == 593) return format(model, len, "Dodo", 0);
	else if(checking == 594) return format(model, len, "RC Cam", 0);
	else if(checking == 595) return format(model, len, "Launch", 0);
	else if(checking == 596) return format(model, len, "LSPD Patrol Car", 0);
	else if(checking == 597) return format(model, len, "FBI Patrol Car", 0);
	else if(checking == 598) return format(model, len, "NG Patrol Car", 0);
	else if(checking == 599) return format(model, len, "LSPD Patrol Ranger", 0);
	else if(checking == 600) return format(model, len, "Picador", 0);
	else if(checking == 601) return format(model, len, "S.W.A.T Tank", 0);
    else if(checking == 602) return format(model, len, "Alpha", 0);
	else if(checking == 603) return format(model, len, "Phoenix", 0);
	else if(checking == 609) return format(model, len, "Boxville", 0);
	return 0;
}

/*new VehicleNames[][] =
{
  "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
  "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
  "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
  "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
  "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
  "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
  "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
  "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
  "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
  "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
  "Boxvillde", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
  "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
  "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
  "Fortune", "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
  "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
  "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
  "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
  "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
  "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
  "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car", "Police Car", "Police Car",
  "Police Ranger", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
  "Boxville", "Tiller", "Utility Trailer"
};*/

forward IsAPoliceCar(vehicleid);
public IsAPoliceCar(vehicleid)
{
	for(new i = 0; i < sizeof(policecar); i++)
	{
		if(vehicleid == policecar[i]) return 1;
	}
	return 0;
}

forward IsAGSFCar(vehicleid);
public IsAGSFCar(vehicleid)
{
	for(new i = 0; i < sizeof(gsfcar); i++)
	{
		if(vehicleid == gsfcar[i]) return 1;
	}
	return 0;
}

forward IsABallasCar(vehicleid);
public IsABallasCar(vehicleid)
{
	for(new i = 0; i < sizeof(ballascar); i++)
	{
		if(vehicleid == ballascar[i]) return 1;
	}
	return 0;
}

forward IsAVLACar(vehicleid);
public IsAVLACar(vehicleid)
{
	for(new i = 0; i < sizeof(vlacar); i++)
	{
		if(vehicleid == vlacar[i]) return 1;
	}
	return 0;
}

forward IsALSVCar(vehicleid);
public IsALSVCar(vehicleid)
{
	for(new i = 0; i < sizeof(lsvcar); i++)
	{
		if(vehicleid == lsvcar[i]) return 1;
	}
	return 0;
}

forward IsASalesVehicle(vehicleid);
public IsASalesVehicle(vehicleid)
{
	for(new i = 0; i < sizeof(SalesVehicle); i++)
	{
	    if(vehicleid == SalesVehicle[i]) return 1;
	}
	return 0;
}

forward IsAOwnedVehicle(vehicleid);
public IsAOwnedVehicle(vehicleid)
{
   for(new i = 0; i < sizeof(OwnedVehicle); i++)
   {
      if(vehicleid == OwnedVehicle[i]) return 1;
   }
   return 0;
}

forward IsARentVehicle(vehicleid);
public IsARentVehicle(vehicleid)
{
   for(new i = 0; i < sizeof(RentVehicle); i++)
   {
      if(vehicleid == RentVehicle[i]) return 1;
   }
   return 0;
}

forward IsASpawnedVehicle(vehicleid);
public IsASpawnedVehicle(vehicleid)
{
	for(new i = 0; i < sizeof(SpawnedVehicle); i++)
   {
      if(vehicleid == SpawnedVehicle[i]) return 1;
   }
	return 0;
}

forward IsABike(vehicleid);
public IsABike(vehicleid)
{
    new modelid = GetVehicleModel(vehicleid);
	if(modelid == 448 || modelid == 461 || modelid == 462 || modelid == 463 || modelid == 468 || modelid == 471 || modelid == 481 || modelid == 509 || modelid == 510 || modelid == 521 || modelid == 522 || modelid == 523 || modelid == 581 || modelid == 586)
	{
		return 1;
	}
	return 0;
}

forward IsABoat(vehicleid);
public IsABoat(vehicleid)
{
    new modelid = GetVehicleModel(vehicleid);
	if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493) return 1;
	return 0;
}

forward IsAPlane(vehicleid);
public IsAPlane(vehicleid)
{
    new modelid = GetVehicleModel(vehicleid);
	if(modelid == 460 || modelid == 464 || modelid == 476 || modelid == 511 || modelid == 512 || modelid == 513 || modelid == 519 || modelid == 520 || modelid == 553 || modelid == 577 || modelid == 592 || modelid == 593) return 1;
	return 0;
}

forward IsATrain(vehicleid);
public IsATrain(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);
	if(modelid == 449 || modelid == 537 || modelid == 538 || modelid == 569 || modelid == 570 || modelid == 590) return 1;
    return 0;
}

forward IsADetectiveCar(vehicleid);
public IsADetectiveCar(vehicleid)
{
	for(new i = 0; i < sizeof(detectivecar); i++)
   	{
    	if(vehicleid == detectivecar[i]) return 1;
   	}
	return 0;
}

forward IsAMechanicCar(vehicleid);
public IsAMechanicCar(vehicleid)
{
	for(new i = 0; i < sizeof(mechaniccar); i++)
   	{
    	if(vehicleid == mechaniccar[i]) return 1;
   	}
	return 0;
}

forward IsATruckmanCar(vehicleid);
public IsATruckmanCar(vehicleid)
{
	for(new i = 0; i < sizeof(truckmancar); i++)
   	{
    	if(vehicleid == truckmancar[i]) return 1;
   	}
	return 0;
}

forward IsASanitaryCar(vehicleid);
public IsASanitaryCar(vehicleid)
{
	for(new i = 0; i < sizeof(sanitarycar); i++)
   	{
    	if(vehicleid == sanitarycar[i]) return 1;
   	}
	return 0;
}

forward IsATaxiCar(vehicleid);
public IsATaxiCar(vehicleid)
{
	for(new i = 0; i < sizeof(taxicar); i++)
   	{
    	if(vehicleid == taxicar[i]) return 1;
   	}
	return 0;
}

forward IsASmugglerCar(vehicleid);
public IsASmugglerCar(vehicleid)
{
	for(new i = 0; i < sizeof(smugglercar); i++)
   	{
    	if(vehicleid == smugglercar[i]) return 1;
   	}
	return 0;
}
//---------------------------------------------------------------------------- > FORWARDS - OFFERS
forward VehicleStopOffer(playerid, target);
public VehicleStopOffer(playerid, target)
{
    VehicleSellOffer[playerid] = 9999;
	VehicleBuyOffer[playerid] = 9999;
 	VehicleForOffer[playerid] = 9999;
	VehiclePlayerOffer[playerid] = 9999;
	VehicleOfferPrice[playerid] = 0;
	VehicleSellOffer[target] = 9999;
	VehicleBuyOffer[target] = 9999;
 	VehicleForOffer[target] = 9999;
	VehiclePlayerOffer[target] = 9999;
	VehicleOfferPrice[target] = 0;
}

forward HouseStopOffer(playerid, target);
public HouseStopOffer(playerid, target)
{
    HouseSellOffer[playerid] = 9999;
	HouseBuyOffer[playerid] = 9999;
 	HouseForOffer[playerid] = 9999;
	HousePlayerOffer[playerid] = 9999;
	HouseOfferPrice[playerid] = 0;
	HouseSellOffer[target] = 9999;
	HouseBuyOffer[target] = 9999;
 	HouseForOffer[target] = 9999;
	HousePlayerOffer[target] = 9999;
	HouseOfferPrice[target] = 0;
}

//---------------------------------------------------------------------------- > FORWARDS - GATES & DOORS
forward pdgarageclose();
public pdgarageclose()
{
	MoveDynamicObject(pdgarage, 1589.7000000, -1638.3101000, 14.2700000, 5.0, 0.0000000, 0.0000000, 90.0000000);
	pdgarageopened = 9999;
	return 1;
}

forward pdgaragedoorclose();
public pdgaragedoorclose()
{
	MoveDynamicObject(pdgaragedoor, 1582.4000000, -1638.0500000, 15.0000000, 5.0, 0.0000000, 0.0000000, 90.0000000);
	pdgaragedooropened = 9999;
	return 1;
}

forward bpgate1close();
public bpgate1close()
{
	MoveDynamicObject(bpgate1, 1627.8000000, -1145.9000000, 23.1000000, 1.0, 0.0000000, 0.0000000, 0.0000000);
	bpgate1opened = 9999;
	return 1;
}

forward bpgate2close();
public bpgate2close()
{
	MoveDynamicObject(bpgate2, 1647.6000000, -1145.9000000, 23.1000000, 1.0, 0.0000000, 0.0000000, 180.0000000);
	bpgate2opened = 9999;
	return 1;
}

forward detectivegateclose();
public detectivegateclose()
{
    MoveDynamicObject(detectivegate, 1534.7998000, -1451.4004000, 14.6000000, 1.0, 0.0000000, 0.0000000, 90.0000000);
	detectivegateopened = 9999;
	return 1;
}

forward mechanicdoorclose();
public mechanicdoorclose()
{
    MoveDynamicObject(mechanicdoor, 2530.80005, -1482.25000, 24.30000, 1.0, 0.00000, 0.00000, -1.00000);
	mechanicdooropened = 9999;
	return 1;
}

forward vaultdoorclose();
public vaultdoorclose()
{
    MoveDynamicObject(vaultdoor, 582.62872, -1267.33948, 983.59998, 0.1, 0.00000, 0.00000, 180.00000);
	vaultdooropened = 9999;
	return 1;
}

forward cellroomdoorclose();
public cellroomdoorclose()
{
    MoveDynamicObject(cellroomdoor, 247.98140, 87.49130, 1005.20001, 1.0, 0.00000, 0.00000, 0.00000);
	cellroomdooropened = 9999;
	return 1;
}

forward cell1close();
public cell1close()
{
    MoveDynamicObject(cell1, 266.29559, 79.27300, 1002.59998, 1.0, 0.00000, 0.00000, 0.00000);
	cell1opened = 9999;
	return 1;
}

forward cell2close();
public cell2close()
{
    MoveDynamicObject(cell2, 266.29559, 83.77230, 1002.59998, 1.0, 0.00000, 0.00000, 0.00000);
	cell2opened = 9999;
	return 1;
}

forward cell3close();
public cell3close()
{
    MoveDynamicObject(cell3, 266.29559, 88.26910, 1002.59998, 1.0, 0.00000, 0.00000, 0.00000);
	cell3opened = 9999;
	return 1;
}

forward lspddoor1close();
public lspddoor1close()
{
    MoveDynamicObject(lspddoor1, 250.611, 63.2995, 1003.18, 1.0, 0.00, 0.00, 0.00);
	lspddoor1opened = 9999;
	return 1;
}

forward lspddoor2close();
public lspddoor2close()
{
    MoveDynamicObject(lspddoor2, 246.228, 72.4962, 1003.04, 1.0, 0.00000, 0.00000, 90.00000);
	lspddoor2opened = 9999;
	return 1;
}

forward lspdwindowclose();
public lspdwindowclose()
{
    MoveDynamicObject(lspdwindow, 250.524, 67.650, 1002.58, 1.0, 0.00, 0.00, 90.00);
	lspdwindow = 9999;
	return 1;
}

forward smugglergate1close();
public smugglergate1close()
{
    MoveDynamicObject(smugglergate1, 2227.89941, -2209.22607, 12.54400, 1.0, 0.00000, 0.00000, -45.00000);
	smugglergate1opened = 9999;
	return 1;
}

forward smugglergate2close();
public smugglergate2close()
{
	MoveDynamicObject(smugglergate2, 2240.26001, -2221.58179, 12.54400, 1.0, 0.00000, 0.00000, 135.00000);
	smugglergate2opened = 9999;
	return 1;
}

//---------------------------------------------------------------------------- > OTHER
forward ClearChatForPlayer(playerid, lines);
public ClearChatForPlayer(playerid, lines)
{
	for(new i = 0; i < lines; i++) SCM(playerid, BOJA_BELA, "");
}

forward ClearChatForAll(lines);
public ClearChatForAll(lines)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
		for(new l = 0; l < lines; l++) SCM(i, BOJA_BELA, "");
}

stock GetPlayerNameEx(playerid)
{
	new sendername[MAX_PLAYER_NAME];
	if(DetectiveDuty[playerid] == 1) sendername = "Detektiv";
	else GetPlayerName(playerid, sendername, sizeof(sendername));

	return sendername;
}

new RandomMessages[][] =
{
	"Server u izradi! Testiranje servera u toku!"
};

forward Random_Messages();
public Random_Messages()
{
	TextDrawSetString(RandomMessagesTD, RandomMessages[random(sizeof(RandomMessages))]);
 	return 1;
}

forward SendRadiusMessage(Float:radius, playerid, string[], color1, color2, color3, color4, color5);
public SendRadiusMessage(Float:radius, playerid, string[], color1, color2, color3, color4, color5)
{
	new Float:X, Float:Y, Float:Z, Float:OX, Float:OY, Float:OZ, Float:MSGX, Float:MSGY, Float:MSGZ;
	new pVW = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, OX, OY, OZ);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(pVW != GetPlayerVirtualWorld(i)) return 1;
		GetPlayerPos(i, X, Y, Z);
		MSGX = (OX - X);
		MSGY = (OY - Y);
		MSGZ = (OZ - Z);
		if(((MSGX < radius/16) && (MSGX > -radius/16)) && ((MSGY < radius/16) && (MSGY > -radius/16)) && ((MSGZ < radius/16) && (MSGZ > -radius/16))) SCM(i, color1, string);
		else if(((MSGX < radius/8) && (MSGX > -radius/8)) && ((MSGY < radius/8) && (MSGY > -radius/8)) && ((MSGZ < radius/16) && (MSGZ > -radius/8))) SCM(i, color2, string);
		else if(((MSGX < radius/4) && (MSGX > -radius/4)) && ((MSGY < radius/4) && (MSGY > -radius/4)) && ((MSGZ < radius/16) && (MSGZ > -radius/4))) SCM(i, color3, string);
		else if(((MSGX < radius/2) && (MSGX > -radius/2)) && ((MSGY < radius/2) && (MSGY > -radius/2)) && ((MSGZ < radius/2) && (MSGZ > -radius/2))) SCM(i, color4, string);
		else if(((MSGX < radius) && (MSGX > -radius)) && ((MSGY < radius) && (MSGY > -radius)) && ((MSGZ < radius) && (MSGZ > -radius))) SCM(i, color5, string);
	}
	return 1;
}

forward SendJobMessage(job, color, string[]);
public SendJobMessage(job, color, string[])
{

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(job == 1 && PlayerInfo[i][pJob] == 1 && DetectiveDuty[i] != 9999) SCM(i, color, string);
	    if(job == 5 && PlayerInfo[i][pJob] == 5 && TaxiDuty[i] != 9999) SCM(i, color, string);
 	}
}

forward SplitString(const strsrc[], strdest[][], delimiter);
public SplitString(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

forward SetTime();
public SetTime()
{
        new str[128], year, month, day, hours, minutes, seconds;
        getdate(year, month, day);
		gettime(hours, minutes, seconds);

        format(str, sizeof(str), "%d/%s%d/%s%d", day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year);
        TextDrawSetString(DateTD, str);
        format(str, sizeof(str), "%s%d:%s%d:%s%d", (hours < 10) ? ("0") : (""), hours, (minutes < 10) ? ("0") : (""), minutes, (seconds < 10) ? ("0") : (""), seconds);
        TextDrawSetString(TimeTD, str);

        if(minutes == 00 && seconds == 00)
		{
			PayDay();
			switch(hours)
			{
				case 16: SetWorldTime(21);
				case 17: SetWorldTime(22);
				case 18: SetWorldTime(23);
				case 19: SetWorldTime(24);
				case 1: SetWorldTime(1);
				case 2: SetWorldTime(2);
				case 3: SetWorldTime(3);
				case 4: SetWorldTime(4);
				case 5: SetWorldTime(5);
				case 6: SetWorldTime(6);
				case 7: SetWorldTime(7);
				case 8: SetWorldTime(8);
			}
		}
}

forward Pulling_Timer(playerid);
public Pulling_Timer(playerid)
{
	new vID, Float:X, Float:Y, Float:Z;
	if(!IsPlayerConnected(Pulling[playerid]))
	{
		SCM(playerid, BOJA_CRVENA, "Igrac kojeg ste vukli je napustio server!");
		Pulling[playerid] = 9999;
		KillTimer(CopTimer[playerid]);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    vID = GetPlayerVehicleID(playerid);
	    if(IsSeatAvailable(vID, 1)) PutPlayerInVehicle(Pulling[playerid], vID, 1);
	    else if(IsSeatAvailable(vID, 2)) PutPlayerInVehicle(Pulling[playerid], vID, 2);
	    else if(IsSeatAvailable(vID, 3)) PutPlayerInVehicle(Pulling[playerid], vID, 3);
	    else if(IsSeatAvailable(vID, 4)) PutPlayerInVehicle(Pulling[playerid], vID, 4);
	}
	else
	{
	    GetPlayerPos(playerid, X, Y, Z);
	    SetPlayerPos(Pulling[playerid], X, Y, Z);
		SetPlayerInterior(Pulling[playerid], GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(Pulling[playerid], GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

forward CountDown();
public CountDown()
{
	CountdownSeconds --;
	if(CountdownSeconds == -1)
	{
	    KillTimer(CountdownTimer);
	    TextDrawHideForAll(CountdownTD);
	    Countdown = 9999;
	}
	else
	{
	    if(CountdownSeconds == 0)
	    {
	        TextDrawSetString(CountdownTD, "~p~Countdown: ~y~GO!");
		}
        else if(CountdownSeconds == 1)
	    {
	        TextDrawSetString(CountdownTD, "~p~Countdown: ~g~1!");
		}
		else if(CountdownSeconds == 2)
	    {
	        TextDrawSetString(CountdownTD, "~p~Countdown: ~b~2!");
		}
		else if(CountdownSeconds == 3)
	    {
	        TextDrawSetString(CountdownTD, "~p~Countdown: ~r~3!");
		}
		else
		{
		    new str[24];
		    format(str, sizeof(str),"~p~Countdown: ~w~%d", CountdownSeconds);
		    TextDrawSetString(CountdownTD, str);
		}
	}
	return 1;
}

forward PayDay();
public PayDay()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerConnected(i)) return 1;
	    if(PlayerInfo[i][pPlaytime] < 40) return SCM(i, BOJA_CRVENA, "Niste igrali dovoljno dugo da bi primili platu!");
	    new str[128], respect, lvlrespect;
	    respect = 2;
	    lvlrespect = PlayerInfo[i][pLevel]*respect;
	    PayCheck(i);
	    PlayerInfo[i][pMoney] +=  PayCash[i];
		GivePlayerMoney(i, PayCash[i]);
		if(PlayerInfo[i][pJobContract] > 0) PlayerInfo[i][pJobContract] -= 1;
		PlayerInfo[i][pRespect] += 1;
		PlayerInfo[i][pHours] += 1;
		PlayerInfo[i][pPlaytime] = 0;
		if(PlayerInfo[i][pRespect] >= lvlrespect)
		{
		    PlayerInfo[i][pLevel] += 1;
		    PlayerInfo[i][pRespect] = 0;
		    SavePlayer(i);
			format(str, sizeof(str), "Cestitamo! Sada ste level %d!", PlayerInfo[i][pLevel]);
			SCM(i, BOJA_ZELENA, str);
		}
		SavePlayer(i);
		format(str, sizeof(str), "PLATA! Zaradili ste %d$", PayCash[i]);
		SCM(i, BOJA_ZELENA, str);
	}
	return 1;
}

new Float:VehicleSpawns[4][4] =
{
  	{ 1558.3418, -1011.8014, 23.7379, 360.0 },
	{ 1559.8015, -1029.6660, 23.7379, 345.5 },
	{ 1571.9473, -1011.4725, 23.7380, 0.0 },
	{ 1573.4954, -1037.4847, 23.7417,320.0 }
};

new Float:SweeperCheckpoint[94][3] =
{
	{ 1147.8000000, -1226.6000000, 17.0000000 },
	{ 1147.8000000, -1268.3000000, 13.4000000 },
	{ 1163.6000000, -1283.3000000, 13.3000000 },
	{ 1193.7000000, -1296.2000000, 13.3000000 },
	{ 1193.7000000, -1382.5000000, 13.3000000 },
	{ 1218.6000000, -1408.4000000, 13.0000000 },
	{ 1329.3000000, -1408.3000000, 13.0000000 },
	{ 1370.8000000, -1408.3000000, 13.0000000 },
	{ 1438.1000000, -1443.5000000, 13.0000000 },
	{ 1452.2000000, -1452.9000000, 13.2000000 },
	{ 1426.9000000, -1574.0000000, 13.2000000 },
	{ 1426.9000000, -1608.5000000, 13.2000000 },
	{ 1426.9000000, -1717.0000000, 13.2000000 },
	{ 1446.2000000, -1734.9000000, 13.2000000 },
	{ 1510.1000000, -1734.9000000, 13.2000000 },
	{ 1532.6000000, -1715.0000000, 13.2000000 },
	{ 1532.6000000, -1608.5000000, 13.2000000 },
	{ 1513.2000000, -1589.8000000, 13.2000000 },
	{ 1445.8000000, -1589.8000000, 13.2000000 },
	{ 1414.4000000, -1589.8000000, 13.2000000 },
	{ 1324.9000000, -1569.8000000, 13.2000000 },
	{ 1315.5000000, -1560.6000000, 13.2000000 },
	{ 1350.5000000, -1478.9000000, 13.2000000 },
	{ 1359.5000000, -1429.9000000, 13.2000000 },
	{ 1329.3000000, -1392.4000000, 13.0000000 },
	{ 1218.6000000, -1392.4000000, 13.0000000 },
	{ 1208.0000000, -1382.5000000, 13.3000000 },
	{ 1208.0000000, -1296.2000000, 13.3000000 },
	{ 1163.6000000, -1277.9000000, 13.3000000 },
	{ 1154.1000000, -1268.3000000, 13.4000000 }, // 30 CP (31 SANITARY) - 1 ROUTE END
	{ 1154.1000000, -1226.6000000, 17.0000000 }, // 31 CP (32 SANITARY) - 2 ROUTE START
	{ 1147.8000000, -1226.6000000, 17.0000000 },
	{ 1147.8000000, -1268.3000000, 13.4000000 },
	{ 1163.6000000, -1283.3000000, 13.3000000 },
	{ 1193.7000000, -1296.2000000, 13.3000000 },
	{ 1193.7000000, -1382.5000000, 13.3000000 },
	{ 1218.6000000, -1408.4000000, 13.0000000 },
	{ 1329.3000000, -1408.3000000, 13.0000000 },
	{ 1370.7998000, -1392.4004000, 13.0000000 },
	{ 1438.1000000, -1438.2000000, 13.0000000 },
	{ 1457.0000000, -1453.0000000, 13.2000000 },
	{ 1432.1000000, -1574.0000000, 13.2000000 },
	{ 1432.1000000, -1608.5000000, 13.2000000 },
	{ 1432.1000000, -1717.0000000, 13.2000000 },
	{ 1446.2002000, -1729.6000000, 13.2000000 },
	{ 1510.1000000, -1729.6000000, 13.2000000 },
	{ 1526.9000000, -1715.0000000, 13.2000000 },
	{ 1526.9000000, -1608.6000000, 13.2000000 },
	{ 1513.2002000, -1595.1000000, 13.2000000 },
	{ 1445.8000000, -1595.1000000, 13.2000000 },
	{ 1414.4004000, -1595.1000000, 13.2000000 },
	{ 1324.9004000, -1569.7998000, 13.2000000 },
	{ 1315.5000000, -1560.5996000, 13.2000000 },
	{ 1350.5000000, -1478.9004000, 13.2000000 },
	{ 1359.5000000, -1429.9004000, 13.2000000 },
	{ 1329.2998000, -1392.4004000, 13.0000000 },
	{ 1218.5996000, -1392.4004000, 13.0000000 },
	{ 1208.0000000, -1382.5000000, 13.3000000 },
	{ 1208.0000000, -1296.2000000, 13.3000000 },
	{ 1163.6000000, -1277.9000000, 13.3000000 },
	{ 1154.1000000, -1268.3000000, 13.4000000 },
	{ 1154.1000000, -1226.6000000, 17.0000000 }, // 62 CP (63 SANITARY) - 2 ROUTE END
	{ 1147.8000000, -1226.6000000, 17.0000000 }, // 63 CP (64 SANITARY) - 3 ROUTE START
	{ 1147.7998000, -1268.2998000, 13.4000000 },
	{ 1139.2000000, -1277.7000000, 13.3000000 },
	{ 1075.9000000, -1277.7000000, 13.3000000 },
	{ 1061.3000000, -1268.7000000, 13.6000000 },
	{ 1061.3000000, -1162.3000000, 23.5000000 },
	{ 1085.8000000, -1128.4000000, 23.5000000 },
	{ 1085.8000000, -1052.3000000, 31.1000000 },
	{ 1086.6000000, -1027.9000000, 32.1000000 },
	{ 1089.0000000, -970.0000000, 41.7000000 },
	{ 1070.1000000, -946.7999900, 42.6000000 },
	{ 954.9000200, -961.7000100, 39.0000000 },
	{ 865.7000100, -992.2999900, 34.4000000 },
	{ 808.0999800, -1040.9000000, 24.7000000 },
	{ 783.5999800, -1041.5000000, 24.7000000 },
	{ 702.5000000, -1111.5000000, 17.9000000 },
	{ 647.5000000, -1192.3000000, 17.8000000 },
	{ 602.9000200, -1211.7000000, 17.9000000 },
	{ 515.2999900, -1258.4000000, 15.8000000 },
	{ 484.7000100, -1283.3000500, 15.8000000 },
	{ 486.0000000, -1313.4000000, 15.4000000 },
	{ 519.5999800, -1343.3000000, 15.7000000 },
	{ 615.2000100, -1323.1000000, 13.5000000 },
	{ 785.2999900, -1323.3000000, 13.2000000 },
	{ 810.5000000, -1329.9000000, 13.2000000 },
	{ 905.2000100, -1329.9000000, 13.2000000 },
	{ 1040.5000000, -1329.9000000, 13.2000000 },
	{ 1061.3000000, -1294.6000000, 13.6000000 },
	{ 1075.9000000, -1283.8000000, 13.3000000 },
	{ 1139.1000000, -1283.8000000, 13.3000000 },
	{ 1154.0996000, -1268.2998000, 13.4000000 },
	{ 1154.0996000, -1226.5996000, 17.0000000 } // 94 CP (95 SANITARY) - 3 ROUTE END
};

/*new TruckDieselCheckpoint[3][3] =
{
    { 991.0000000, -904.2000100, 42.9000000 },
	{ 1938.2000000, -1775.1000000, 14.5000000 },
	{ -91.2998000, -1169.2998000, 3.0000000 }
};*/

new Float:TutorialCheckpoint[11][3] =
{
	{ 100.0, 100.0, 100.0 },
	{ 1540.2250, -2300.4138, 13.5469 }, // AERODROM
	{ 1480.3815, -1738.4895, 13.5469 }, // OPSTINA
	{ 1538.8242, -1676.0610, 13.5469 }, // LSPD
	{ 1185.9417, -1322.9934, 13.5589 }, // BOLNICA
	{ 589.5142, -1241.3885, 17.8607 }, // BANKA
	{ 1223.5243, -925.3146, 42.8661 }, // BURG
	{ 1637.9056, -1150.8385, 23.9063 }, //PARKING
	{ 2166.8347, -1137.2440, 25.2545 }, // COUNT AND SHUTZ
	{ 2226.1658, -1725.0739, 13.5555 }, // TERETANA
	{ 2245.2092, -1661.5527, 15.4690 } // BINCO
};

new Float:Cells[3][3] =
{
	{ 264.9507, 87.6549, 1001.0391 },
	{ 264.7395, 82.9263, 1001.0391 },
	{ 264.6280, 78.2766, 1001.0391 }
};

new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

//--------------------JOBS--------------------
forward DetectiveStartSearching(playerid, target);
public DetectiveStartSearching(playerid, target)
{
	new Float:X, Float:Y, Float:Z;
	if(DetectiveSearchingOffer[playerid] != 9999)
	{
		if(InBank[target] != 9999) SetPlayerCheckpoint(playerid, 593.1841, -1249.7542, 18.2069, 3.0);
  		else if(InCityHall[target] != 9999) SetPlayerCheckpoint(playerid, 1479.3715, -1771.1544, 18.7958, 3.0);
  		else if(InGSFHQ[target] != 9999) SetPlayerCheckpoint(playerid, 2522.4756, -1679.2355, 15.4970, 3.0);
  		else if(InBallasHQ[target] != 9999) SetPlayerCheckpoint(playerid, 2045.5447, -1116.1219, 26.3617, 3.0);
  		else if(InVLAHQ[target] != 9999) SetPlayerCheckpoint(playerid, 1684.8185, -2099.0588, 13.8343, 3.0);
  		else if(InLSVHQ[target] != 9999) SetPlayerCheckpoint(playerid, 2808.0615, -1189.7864, 25.3446, 3.0);
  		else if(InHouse[target] != 9999) SetPlayerCheckpoint(playerid, HouseInfo[InHouse[target]][hEnterX], HouseInfo[InHouse[target]][hEnterY], HouseInfo[InHouse[target]][hEnterZ], 3.0);
  		else if(InApartment[target] != 9999) SetPlayerCheckpoint(playerid, ApartmentInfo[InApartment[target]][aEnterX], ApartmentInfo[InApartment[target]][aEnterY], ApartmentInfo[InApartment[target]][aEnterZ], 3.0);
		else if(InBusiness[target] != 9999) SetPlayerCheckpoint(playerid, BusinessInfo[InBusiness[target]][bEnterX], BusinessInfo[InBusiness[target]][bEnterY], BusinessInfo[InBusiness[target]][bEnterZ], 3.0);
		else
		{
			GetPlayerPos(target, X, Y, Z);
			SetPlayerCheckpoint(playerid, X, Y, Z, 3.0);
		}
	}
	return 1;
}

forward DetectiveStopSearching(playerid);
public DetectiveStopSearching(playerid)
{
	DisablePlayerCheckpoint(playerid);
	DetectiveSearchingOffer[playerid] = 9999;
	DetectivePlayerToFind[playerid] = 0;
	DetectiveSearchingPrice[playerid] = 0;
	return 1;
}

forward MechanicStopRepairOffer(playerid);
public MechanicStopRepairOffer(playerid)
{
    MechanicRepairOffer[playerid] = 9999;
	MechanicRepairPlayerOffer[playerid] = 9999;
	MechanicRepairOfferPrice[playerid] = 0;
	MechanicRepairOfferVehicle[playerid] = 9999;
	return 1;
}

forward MechanicStopRefillOffer(playerid);
public MechanicStopRefillOffer(playerid)
{
    MechanicRefillOffer[playerid] = 9999;
	MechanicRefillPlayerOffer[playerid] = 9999;
	MechanicRefillLitre[playerid] = 0;
	MechanicRefillOfferPrice[playerid] = 0;
	MechanicRefillOfferVehicle[playerid] = 9999;
	return 1;
}

forward DrugStopOffer(playerid, target);
public DrugStopOffer(playerid, target)
{
    DrugSellOffer[playerid] = 9999;
	DrugBuyOffer[playerid] = 9999;
	DrugPlayerOffer[playerid] = 9999;
	DrugOfferAmmount[playerid] = 0;
	DrugOfferPrice[playerid] = 0;
	DrugSellOffer[target] = 9999;
	DrugBuyOffer[target] = 9999;
	DrugPlayerOffer[target] = 9999;
	DrugOfferAmmount[target] = 0;
	DrugOfferPrice[target] = 0;
}

forward MaterialsStopOffer(playerid, target);
public MaterialsStopOffer(playerid, target)
{
    MaterialsSellOffer[playerid] = 9999;
	MaterialsBuyOffer[playerid] = 9999;
	MaterialsPlayerOffer[playerid] = 9999;
	MaterialsOfferAmmount[playerid] = 0;
	MaterialsOfferPrice[playerid] = 0;
	MaterialsSellOffer[target] = 9999;
	MaterialsBuyOffer[target] = 9999;
	MaterialsPlayerOffer[target] = 9999;
	MaterialsOfferAmmount[target] = 0;
	MaterialsOfferPrice[target] = 0;
}

forward SanitaryAntiFreeze(playerid);
public SanitaryAntiFreeze(playerid)
{
	TogglePlayerControllable(playerid, 1);
	if(SanitaryCheckpoint[playerid] == 4)
	{
	    PlayerInfo[playerid][pMoney] += 15;
		GivePlayerMoney(playerid, 15);
		SavePlayer(playerid);
		SCM(playerid, BOJA_ZELENA, "Zavrsili ste ciscenje grada, zaradili ste 15$");
		DisablePlayerCheckpoint(playerid);
		SanitaryStarted[playerid] = 0;
		SanitaryCheckpoint[playerid] = 0;
	}
}

//---------------------------------------------------------------------------- > STOCKS
stock UserPath(playerid)
{
	new str[128], sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(str, sizeof(str), PATH, sendername);
	return str;
}

stock VehiclePath(vehicleid)
{
    new str[16];
    format(str, sizeof(str), VPATH, vehicleid);
    return str;
}

stock LogBug(file[], string[])
{
	new str[256];
	new hour, minute, second, day, month, year;

	gettime(hour, minute, second);
	getdate(year, month, day);
	format(str, 256, "[%d/%d/%d - %d:%d:%d] %s\r\n", day, month, year, hour, minute, second, string);
	new File:bugFile;
	bugFile = fopen(file, io_append);
	fwrite(bugFile, str);
	fclose(bugFile);
}

stock BusinessType(b)
{
    new string[30];
    switch(BusinessInfo[b][bType])
    {
        case 5: string = "Caffe";
        case 4: string = "Clothes shop";
        case 3: string = "Restaurant";
        case 2: string = "Ammunation";
        case 1: string = "24/7";
    }
    return string;
}

stock RemoveUnderScore(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if(name[i] == '_') name[i] = ' ';
    }
    return name;
}

stock PlayerSex(playerid)
{
    new string[32];
    switch(PlayerInfo[playerid][pSex])
    {
        case 1: string = "Musko";
        case 2: string = "Zensko";
    }
    return string;
}

stock PlayerCountry(playerid)
{
    new string[32];
    switch(PlayerInfo[playerid][pCountry])
    {
        case 1: string = "Srbija";
        case 2: string = "Crna Gora";
        case 3: string = "BiH";
        case 4: string = "Makedonija";
        case 5: string = "Hrvatska";
    }
    return string;
}

stock PlayerJob(playerid)
{
    new string[32];
    switch(PlayerInfo[playerid][pJob])
    {
        case 1: string = "Detektiv";
        case 2: string = "Kamiondzija";
        case 3: string = "Komunalac";
        case 4: string = "Mehanicar";
        case 5: string = "Taxista";
    }
    return string;
}

stock PlayerFightingStyle(playerid)
{
	new string[32];
	switch(PlayerInfo[playerid][pFightingStyle])
	{
	    case 4: string = "Normal";
	    case 5: string = "Boxing";
	    case 6: string = "Kung-Fu";
	    case 7: string = "Knee-Head";
	    case 15: string = "Grab n Kick";
	    case 16: string = "Elbow";
	}
	return string;
}

stock GetOrganizationName(orgid)
{
	new orgname[32];
	switch(orgid)
	{
		case 1: orgname = "Los Santos Police Department";
		case 2: orgname = "FBI";
		case 3: orgname = "Grove Street Families";
		case 4: orgname = "Ballas";
		case 5: orgname = "Varrios Los Aztecas";
		case 6: orgname = "Los Santos Vagos";
		default: orgname = "Unknown";
	}
	return orgname;
}

stock SetPlayerOrgSkin(playerid, orgid, rank)
{
	switch(orgid)
	{
		case 1:
		{
			switch(rank)
			{
				case 1: PlayerInfo[playerid][pOSkin] = 280;
				case 2: PlayerInfo[playerid][pOSkin] = 280;
				case 3: PlayerInfo[playerid][pOSkin] = 266;
				case 4: PlayerInfo[playerid][pOSkin] = 267;
				case 5: PlayerInfo[playerid][pOSkin] = 265;
				case 6: PlayerInfo[playerid][pOSkin] = 283;
				default: PlayerInfo[playerid][pOSkin] = 280;
			}
		}
		case 2:
		{
			switch(rank)
			{
				case 1: PlayerInfo[playerid][pOSkin] = 163;
				case 2: PlayerInfo[playerid][pOSkin] = 164;
				case 3: PlayerInfo[playerid][pOSkin] = 165;
				case 4: PlayerInfo[playerid][pOSkin] = 166;
				case 5: PlayerInfo[playerid][pOSkin] = 286;
				case 6: PlayerInfo[playerid][pOSkin] = 286;
				default: PlayerInfo[playerid][pOSkin] = 163;
			}
		}
		case 3:
		{
			switch(rank)
			{
				case 1: PlayerInfo[playerid][pOSkin] = 106;
				case 2: PlayerInfo[playerid][pOSkin] = 105;
				case 3: PlayerInfo[playerid][pOSkin] = 293;
				case 4: PlayerInfo[playerid][pOSkin] = 269;
				case 5: PlayerInfo[playerid][pOSkin] = 271;
				case 6: PlayerInfo[playerid][pOSkin] = 270;
				default: PlayerInfo[playerid][pOSkin] = 106;
			}
		}
		case 4:
		{
			switch(rank)
			{
				case 1: PlayerInfo[playerid][pOSkin] = 102;
				case 2: PlayerInfo[playerid][pOSkin] = 102;
				case 3: PlayerInfo[playerid][pOSkin] = 102;
				case 4: PlayerInfo[playerid][pOSkin] = 103;
				case 5: PlayerInfo[playerid][pOSkin] = 103;
				case 6: PlayerInfo[playerid][pOSkin] = 104;
				default: PlayerInfo[playerid][pOSkin] = 102;
			}
		}
		case 5:
		{
			switch(rank)
			{
				case 1: PlayerInfo[playerid][pOSkin] = 114;
				case 2: PlayerInfo[playerid][pOSkin] = 114;
				case 3: PlayerInfo[playerid][pOSkin] = 115;
				case 4: PlayerInfo[playerid][pOSkin] = 115;
				case 5: PlayerInfo[playerid][pOSkin] = 116;
				case 6: PlayerInfo[playerid][pOSkin] = 292;
				default: PlayerInfo[playerid][pOSkin] = 114;
			}
		}
		case 6:
		{
			switch(rank)
			{
				case 1: PlayerInfo[playerid][pOSkin] = 108;
				case 2: PlayerInfo[playerid][pOSkin] = 108;
				case 3: PlayerInfo[playerid][pOSkin] = 108;
				case 4: PlayerInfo[playerid][pOSkin] = 110;
				case 5: PlayerInfo[playerid][pOSkin] = 110;
				case 6: PlayerInfo[playerid][pOSkin] = 109;
				default: PlayerInfo[playerid][pOSkin] = 108;
			}
		}
	}

	SetPlayerSkin(playerid, PlayerInfo[playerid][pOSkin]);
	return 1;
}

stock GetPlayerRank(playerid)
{
	new rank[32], playerorg = (PlayerInfo[playerid][pOMember] > 0) ? (PlayerInfo[playerid][pOMember]) : (PlayerInfo[playerid][pOLeader]);

	switch(playerorg)
	{
		case 1:
		{
			switch(PlayerInfo[playerid][pORank])
			{
				case 1: rank = "Cadet";
				case 2: rank = "Officer";
				case 3: rank = "Sergeant";
				case 4: rank = "Lieutenant";
				case 5: rank = "Captain";
				case 6: rank = "Sheriff";
				default: rank = "Unknown";
			}
		}
		case 2:
		{
			switch(PlayerInfo[playerid][pORank])
			{
				case 1: rank = "Cadet";
				case 2: rank = "Agent";
				case 3: rank = "Special Agent";
				case 4: rank = "Chief";
				case 5: rank = "Assistant of Director";
				case 6: rank = "Director";
				default: rank = "Unknown";
			}
		}
		case 3:
		{
			switch(PlayerInfo[playerid][pORank])
			{
				case 1: rank = "Little Devil";
				case 2: rank = "Big Devil";
				case 3: rank = "OG Loc";
				case 4: rank = "Big Smoke";
				case 5: rank = "Ryder";
				case 6: rank = "Sweet";
				default: rank = "Unknown";
			}
		}
		case 4:
		{
			switch(PlayerInfo[playerid][pORank])
			{
				case 1: rank = "Little Weasel";
				case 2: rank = "Little Weasel";
				case 3: rank = "Little Weasel";
				case 4: rank = "Big Weasel";
				case 5: rank = "Big Weasel";
				case 6: rank = "Kane";
				default: rank = "Unknown";
			}
		}
		case 5:
		{
			switch(PlayerInfo[playerid][pORank])
			{
				case 1: rank = "Hazer";
				case 2: rank = "Hazer";
				case 3: rank = "Gal";
				case 4: rank = "Gal";
				case 5: rank = "Jose";
				case 6: rank = "Cesar";
				default: rank = "Unknown";
			}
		}
		case 6:
		{
			switch(PlayerInfo[playerid][pORank])
			{
				case 1: rank = "Jose";
				case 2: rank = "Gustavo Mota";
				case 3: rank = "H";
				case 4: rank = "Esteban Jimenez";
				case 5: rank = "Freddy";
				case 6: rank = "Big Poppa";
				default: rank = "Unknown";
			}
		}
	}
	return rank;
}

stock IsSeatAvailable(vehicleid, seat)
{
	new vMDL = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof(OneSeatVehicles); i++ )
	{
	    if( vMDL == OneSeatVehicles[i] ) return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

stock GetVehicleRegistration(vehicle)
{
	new registration[4];
	switch(VehicleInfo[vehicle][vRegistration])
	{
	    case 1: registration = "Da";
	    case 0: registration = "Ne";
	}
	return registration;
}

stock JobPayCheck(playerid)
{
    new paycheck;
    switch(PlayerInfo[playerid][pJob])
    {
        case 1: paycheck = 300;
        case 2: paycheck = 200;
        case 3: paycheck = 200;
        case 4: paycheck = 250;
        case 5: paycheck = 200;
    }
    return paycheck;
}

stock PayCheck(playerid)
{
	new level = PlayerInfo[playerid][pLevel];
	new paycheck = JobPayCheck(playerid);
	PayCash[playerid] = level*100 + paycheck;
	return PayCash;
}

stock GetPlayerSpeed(playerid,bool:kmh)
{
  new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
  if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
  rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
  return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}

IsPlayerNearBusinessEnter(playerid)
{
    for(new b = 0; b < sizeof(BusinessInfo); b++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ])) return b;
    }
    return -1;
}

IsPlayerNearSpecBusiness(playerid)
{
    for(new sb = 0; sb < sizeof(BusinessInfo); sb++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, SpecBusinessInfo[sb][sbEnterX], SpecBusinessInfo[sb][sbEnterY], SpecBusinessInfo[sb][sbEnterZ])) return sb;
    }
    return -1;
}

IsPlayerNearHouseEnter(playerid)
{
    for(new h = 0; h < sizeof(HouseInfo); h++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hEnterX], HouseInfo[h][hEnterY], HouseInfo[h][hEnterZ])) return h;
    }
    return -1;
}

IsPlayerNearApartmentEnter(playerid)
{
    for(new a = 0; a < sizeof(HouseInfo); a++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, ApartmentInfo[a][aEnterX], ApartmentInfo[a][aEnterY], ApartmentInfo[a][aEnterZ])) return a;
    }
    return -1;
}

IsPlayerNearPump1(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1944.3260, -1772.9254, 13.3906)) return 1;
 	return 0;
}

IsPlayerNearPump2(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, -90.5515, -1169.4578, 2.4079)) return 1;
 	return 0;
}

IsPlayerNearPump3(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1004.0070, -939.3102, 42.1797)) return 1;
 	return 0;
}

main()
{
	return 1;
}
//---------------------------------------------------------------------------- >
public OnGameModeInit()
{
    ShowPlayerMarkers(0);
	ShowNameTags(1);
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();

	SetGameModeText("GoMilano RolePlay");
	//AddPlayerClass(0, 1181.6650, -1323.8400, 13.5830, 270.0, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(0, 1642.2903, -2333.3423, 13.5469, 360.0, 0, 0, 0, 0, 0, 0);

    GSFHQLocked = 1;
    BallasHQLocked = 1;
    VLAHQLocked = 1;
    LSVHQLocked = 1;

    pdgarageopened = 9999;
	pdgaragedooropened = 9999;
	bpgate1opened = 9999;
	bpgate2opened = 9999;
	detectivegateopened = 9999;
    mechanicdooropened = 9999;
    vaultdooropened = 9999;
    cell1opened = 9999;
    cell2opened = 9999;
    cell3opened = 9999;
    cellroomdooropened = 9999;
    lspddoor1opened = 9999;
    lspddoor2opened = 9999;
    lspdwindowopened = 9999;
    smugglergate1opened = 9999;
	smugglergate2opened = 9999;

    //TIME AND WEATHER ON SERVER START
    new hours, minutes, seconds;
	gettime(hours, minutes, seconds);

    switch(hours)
	{
		case 16: SetWorldTime(21);
		case 17: SetWorldTime(22);
		case 18: SetWorldTime(23);
		case 19: SetWorldTime(24);
		case 20: SetWorldTime(24);
		case 21: SetWorldTime(24);
		case 22: SetWorldTime(24);
		case 23: SetWorldTime(24);
		case 0: SetWorldTime(1);
		case 1: SetWorldTime(1);
		case 2: SetWorldTime(2);
		case 3: SetWorldTime(3);
		case 4: SetWorldTime(4);
		case 5: SetWorldTime(5);
		case 6: SetWorldTime(6);
		case 7: SetWorldTime(7);
		default: SetWorldTime(12);
	}

    //LOADING OWNED VEHICLES
    new str[64];
	for(new idx = 1; idx < sizeof(VehicleInfo); idx++)
	{
	    format(str, sizeof(str), VPATH, idx);
	    INI_ParseFile(str, "LoadVehicle_%s", .bExtra = true, .extra = idx);
	    if(VehicleInfo[idx][vOwned] == 0) OwnedVehicle[idx] = CreateVehicle(400, -1000, 4000, 1, 0, 1, 1, 0);
		else OwnedVehicle[idx] = CreateVehicle(VehicleInfo[idx][vModel], VehicleInfo[idx][vParkX], VehicleInfo[idx][vParkY], VehicleInfo[idx][vParkZ], VehicleInfo[idx][vParkA], VehicleInfo[idx][vColor1], VehicleInfo[idx][vColor2], 0);
    	SetVehicleComponents(idx);
 	}
    /*//BANK EXT
    kombank = CreateDynamicObject(6364, 590.71088, -1273.00000, 37.84380,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(kombank, 3, 10765, "airportgnd_sfse", "white", -8584965);*/
 	//--------------------BANK INTERIOR-----------------------------------------
	CreateDynamicObject(14602, 590.75989, -1273.02539, 1000.00000,  0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 567.90002, -1274.28015, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 568.73108, -1288.67261, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 567.90002, -1264.69592, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 567.90002, -1255.06689, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 567.91602, -1283.87854, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 567.90002, -1274.28015, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 567.90002, -1264.69592, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 567.90002, -1255.06689, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 567.91272, -1283.88184, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 578.32037, -1288.68005, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(14576, 582.62543, -1274.90002, 990.09882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 578.33893, -1288.67261, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 568.71912, -1288.69604, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 583.00000, -1284.91003, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 583.00000, -1284.82495, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 572.80353, -1257.40002, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 572.80353, -1257.40002, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 582.40002, -1257.40002, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 582.40002, -1257.40002, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 592.02008, -1257.40002, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 592.02008, -1257.40002, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 591.71002, -1263.96997, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 591.71002, -1263.93994, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 591.71002, -1254.33997, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 591.71002, -1254.31995, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 586.26398, -1280.09998, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 583.85925, -1280.09448, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 587.72699, -1280.09448, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 592.59943, -1280.09448, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 591.71503, -1269.38000, 999.48999,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 591.71503, -1270.97998, 999.48999,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 591.71503, -1272.53589, 999.48999,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 591.71503, -1274.09998, 999.48999,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 591.71503, -1275.69995, 999.48999,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 591.71503, -1277.30005, 999.48999,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 591.71002, -1281.90002, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 596.43903, -1277.00000, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 591.71002, -1281.72803, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 606.05640, -1277.00000, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 596.43799, -1268.69995, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 606.04102, -1268.69995, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 604.78394, -1272.72852, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 587.54297, -1276.68237, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 588.36151, -1275.96997, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 589.23462, -1276.68237, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 588.36151, -1277.39600, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 587.54303, -1276.68237, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 588.36151, -1275.96997, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 589.23462, -1276.68237, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 588.36151, -1277.39600, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 587.54303, -1269.33325, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 589.23462, -1269.33325, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 588.36151, -1270.04565, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 588.36151, -1268.62000, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 588.36151, -1270.04565, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 587.54303, -1269.33325, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 588.36151, -1268.62000, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 589.23462, -1269.33325, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.08521, -1276.68237, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.79999, -1277.39600, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 579.51923, -1276.68237, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.79999, -1275.96997, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 579.51923, -1276.68237, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.79999, -1275.96997, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 578.08521, -1276.68237, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.79999, -1277.39600, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 578.08521, -1269.34021, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.80499, -1268.62866, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 579.51923, -1269.50000, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.79999, -1270.21301, 996.39001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 579.51923, -1269.50000, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.79999, -1270.21301, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 578.08521, -1269.34021, 999.89001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 578.80499, -1268.62866, 999.89001,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 599.50000, -1272.68018, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 589.00000, -1272.68018, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 578.50000, -1272.68018, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 568.00000, -1272.68018, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 589.00000, -1263.09998, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 578.50000, -1263.09998, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 568.00000, -1263.09998, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 578.50000, -1253.47998, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 589.00000, -1253.47998, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 568.00000, -1253.47998, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 568.00000, -1282.27966, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 578.50000, -1282.27966, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 589.00000, -1282.27271, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 568.00000, -1291.90002, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 575.00043, -1287.89001, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 578.48859, -1287.89001, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 581.97998, -1287.89001, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 585.47937, -1287.89001, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 588.95898, -1287.89001, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 585.47937, -1288.92004, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 588.95898, -1288.92004, 994.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 585.40997, -1284.90002, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 587.08130, -1284.90002, 996.39001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 596.88525, -1273.49854, 997.79999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 607.38000, -1273.49854, 997.79999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 586.33722, -1275.30005, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 586.33722, -1265.69299, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 586.33722, -1256.10620, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 575.85480, -1265.69299, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 575.85480, -1275.30005, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 575.85480, -1256.10620, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 565.40002, -1265.69299, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 565.40002, -1275.30005, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 565.40002, -1256.10620, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 575.85480, -1284.92102, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 565.40002, -1284.92102, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 586.33722, -1284.92102, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 586.29498, -1280.28003, 998.89001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 586.29498, -1280.43005, 998.89001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 586.22693, -1288.90002, 997.78003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 586.22693, -1287.30005, 997.78003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 586.22491, -1285.69995, 997.78003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 586.22693, -1284.09998, 997.78003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 586.22693, -1282.50000, 997.78003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 586.22693, -1281.19995, 997.78003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18756, 585.89038, -1287.67700, 992.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18756, 590.29938, -1290.39490, 992.20001,   0.00000, 0.00000, 0.00000);
	/*CreateDynamicObject(18643, 567.52087, -1271.65002, 984.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 600.00000, -1271.65002, 984.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 567.52087, -1271.65002, 983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 600.00000, -1271.65002, 983.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 567.52087, -1276.69812, 984.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1281.97131, 984.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1281.97131, 983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1276.69812, 983.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 600.00000, -1276.69812, 984.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1276.69812, 983.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1281.97131, 983.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1281.97131, 984.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 567.52087, -1271.65002, 985.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1271.65002, 982.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1276.69812, 982.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1276.69812, 985.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1281.97131, 982.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 567.52087, -1281.97131, 985.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 600.00000, -1271.65002, 985.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1271.65002, 982.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1276.69812, 982.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1276.69812, 985.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1281.97131, 982.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18643, 600.00000, -1281.97131, 985.50000,   0.00000, 0.00000, 180.00000);*/
	vaultdoor = CreateDynamicObject(2634, 582.62872, -1267.33948, 983.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 571.61932, -1286.40149, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 571.61932, -1282.01953, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 571.61932, -1277.67480, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 571.61932, -1273.31445, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 571.61932, -1268.91162, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 571.61932, -1264.63184, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 571.61932, -1260.25183, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 571.61932, -1255.89124, 998.29999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 574.97241, -1273.41125, 995.35748,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 573.70074, -1273.18201, 994.64832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 571.62946, -1287.77869, 995.54999,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 570.23834, -1287.59412, 994.64832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 571.62952, -1280.77869, 995.54999,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 570.23828, -1280.55005, 994.64832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 571.62952, -1258.59998, 995.54999,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 570.08502, -1258.40002, 994.64832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 571.62952, -1265.59998, 995.54999,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 570.08502, -1265.40002, 994.64832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2946, 604.74738, -1277.22974, 994.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2946, 604.74738, -1268.50085, 994.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1829, 584.60461, -1252.07397, 982.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1829, 585.40997, -1252.07397, 982.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1829, 583.78491, -1252.07397, 982.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1829, 579.81299, -1252.07397, 982.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1829, 580.63507, -1252.07397, 982.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1829, 581.45728, -1252.07397, 982.40002,   0.00000, 0.00000, 0.00000);
	moneybag[0] = CreateDynamicObject(1550, 585.76355, -1257.17932, 982.29999,   0.00000, 0.00000, 0.00000);
	moneybag[1] = CreateDynamicObject(1550, 585.76349, -1255.18335, 982.29999,   0.00000, 0.00000, 0.00000);
	moneybag[2] = CreateDynamicObject(1550, 585.76349, -1256.15796, 982.29999,   0.00000, 0.00000, 0.00000);
	moneybag[3] = CreateDynamicObject(1550, 579.71600, -1257.17932, 982.29999,   0.00000, 0.00000, 0.00000);
	moneybag[4] = CreateDynamicObject(1550, 579.71600, -1255.18335, 982.29999,   0.00000, 0.00000, 0.00000);
	moneybag[5] = CreateDynamicObject(1550, 579.71600, -1256.15796, 982.29999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1212, 581.83557, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.75000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.65997, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.57001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.47998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.39001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.29999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.21002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.12000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.03003, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.94000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.84998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.76001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.66998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.58002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.48999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.40002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.31000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.21997, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.13000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.03998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.95001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.85999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.77002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.67999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.59003, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.50000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.83557, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.75000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.65997, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.57001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.47998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.39001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.29999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.21002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.12000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.03003, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.94000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.84998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.76001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.66998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.58002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.48999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.40002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.31000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.21997, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.13000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.03998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.95001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.85999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.77002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.67999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.59003, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.50000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.83557, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.75000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.65997, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.57001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.47998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.39001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.29999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.21002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.12000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 581.03003, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.94000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.84998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.76001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.66998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.58002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.48999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.40002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.31000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.21997, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.13000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 580.03998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.95001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.85999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.77002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.67999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.59003, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 579.50000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.44000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.53003, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.62000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.71002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.79999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.89001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.97998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.07001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.15997, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.25000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.34003, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.42999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.52002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.60999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.70001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.78998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.88000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.96997, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.06000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.15002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.23999, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.33002, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.41998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.51001, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.59998, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.69000, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.78003, -1251.88977, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.44000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.53003, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.62000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.71002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.79999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.89001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.97998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.07001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.15997, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.25000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.34003, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.42999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.52002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.60999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.70001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.78998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.88000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.96997, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.06000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.15002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.23999, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.33002, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.41998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.51001, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.59998, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.69000, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.78003, -1251.67004, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.44000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.53003, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.62000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.71002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.79999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.89001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 583.97998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.07001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.15997, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.25000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.34003, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.42999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.52002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.60999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.70001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.78998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.88000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 584.96997, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.06000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.15002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.23999, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.33002, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.41998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.51001, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.59998, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.69000, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1212, 585.78003, -1251.44995, 982.87262,   0.00000, 0.00000, 90.00000);
	//------------------------------------------------------------------------ > CITY HALL EXTERIOR
	//LEVA STAKLA
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 16.03740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 19.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 22.56000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 25.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 16.03740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 19.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 22.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1492.21497, -1751.33997, 25.80000,   0.00000, 0.00000, 0.00000);
	//POLU-LEVA STAKLA
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 16.03740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 19.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 22.56000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 25.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 16.03740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 19.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 22.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1486.63000, -1751.33997, 25.80000,   0.00000, 0.00000, 0.00000);
	//POLU-DESNA STAKLA
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 16.03740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 19.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 22.56000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 25.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 16.03740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 19.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 22.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1475.68994, -1751.33997, 25.80000,   0.00000, 0.00000, 0.00000);
	//DESNA STAKLA
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 16.03740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 19.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 22.56000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 25.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 16.03740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 19.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 22.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1470.16699, -1751.33997, 25.80000,   0.00000, 0.00000, 0.00000);
	//SREDNJA STAKLA
	CreateDynamicObject(1649, 1481.18542, -1751.33997, 25.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1481.18542, -1751.33997, 25.80000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1481.18542, -1751.33997, 22.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1481.18542, -1751.33997, 22.56000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1481.18542, -1751.33997, 19.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1481.18542, -1751.33997, 19.30000,   0.00000, 0.00000, 180.00000);
	//STAKLO IZNAD ULAZA
	CreateDynamicObject(10932, 1481.17737, -1787.80005, 27.42870,   0.00000, 0.00000, 0.00000);
	//PARKING LINIJE
	CreateDynamicObject(11548, 1551.69885, -1792.77197, 12.55990,   0.00000, -0.10000, 60.00000);
	CreateDynamicObject(11548, 1406.88232, -1787.57886, 12.55990,   0.00000, 0.08000, 60.00000);
	//LOGO
	CreateDynamicObject(18750, 1482.29211, -1771.79895, 131.21419,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(1214, 1493.28955, -1776.06995, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1493.28955, -1774.86426, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1493.29053, -1774.95178, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1493.29053, -1776.14294, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1493.29053, -1777.30298, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1493.28955, -1777.26001, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1487.60620, -1774.85315, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1487.60620, -1776.05005, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1487.60620, -1777.25000, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1487.60620, -1777.26001, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1487.60620, -1776.06995, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1487.60620, -1774.86426, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1484.02209, -1774.92468, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1484.02209, -1776.11060, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1484.02209, -1777.31372, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1484.02209, -1774.86426, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1484.02209, -1776.06995, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1484.02209, -1777.24023, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1477.03503, -1774.82117, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1477.03503, -1776.00806, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1477.03503, -1777.17651, 115.97470,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1477.03503, -1774.92468, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1477.03503, -1776.11060, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1477.03503, -1777.31372, 120.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.66516, -1774.77393, 115.90000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.66516, -1775.96619, 115.90000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.66516, -1777.13037, 115.90000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.48608, -1776.36792, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.48608, -1777.54834, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.48608, -1778.74841, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.48608, -1779.94922, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.48608, -1781.15002, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.48608, -1775.20764, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1775.01550, 138.84155,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1776.18774, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1777.36816, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1778.52832, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1779.70862, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1780.86890, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1775.31226, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1776.46936, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1777.62671, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1778.78833, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1779.98975, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1474.86658, -1781.17114, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1775.21851, 138.84155,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1776.41663, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1777.60364, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1778.77991, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1779.96692, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1781.16724, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1775.21851, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1776.41663, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1777.60364, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1778.77991, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1779.96692, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1480.75903, -1781.16724, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1485.93225, -1775.38025, 138.84155,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1485.93225, -1776.56311, 138.84160,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1777.73938, 138.84160,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1778.90308, 138.84160,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1780.07874, 138.84160,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1781.26123, 138.84160,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1775.38025, 135.41119,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1485.93225, -1776.56311, 135.41119,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1777.73938, 135.41119,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1778.90308, 135.41119,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1780.07874, 135.41119,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1485.93225, -1781.26123, 135.41119,   -90.00000, 0.00000, 0.24000);
	CreateDynamicObject(1214, 1490.70508, -1775.22449, 138.84155,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1490.70508, -1776.38635, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1490.70508, -1777.54382, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1490.70508, -1778.72144, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1490.70508, -1779.90271, 138.84160,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1490.70508, -1781.08777, 138.84160,   -90.00000, 0.00000, 0.00000);
	//SVETLA ISPRED ULAZA
	CreateDynamicObject(19121, 1478.50110, -1750.69727, 14.94230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1473.00256, -1750.69727, 14.94230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1467.77417, -1750.69727, 14.94230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1483.86072, -1750.69727, 14.94230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1489.40112, -1750.69727, 14.94230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1494.56628, -1750.69727, 14.94230,   0.00000, 0.00000, 0.00000);
	//SVETLA UNUTAR ULAZA
	CreateDynamicObject(19121, 1483.87488, -1758.85999, 17.13857,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1478.43518, -1758.85999, 17.13860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1484.76440, -1772.40796, 18.34751,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1477.38220, -1772.40796, 18.34750,   0.00000, 0.00000, 0.00000);
	//ZABRANA PRILASKA VOZILA DESNO
	CreateDynamicObject(1214, 1458.51599, -1750.06982, 12.33903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1458.51599, -1748.78967, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1458.51599, -1747.52625, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1458.51599, -1746.28516, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1458.51599, -1745.02490, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1458.51599, -1743.76257, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1458.51599, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	//ZABRANA PRILASKA VOZILA LEVO
	CreateDynamicObject(1214, 1503.89844, -1750.06982, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1503.89844, -1748.78967, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1503.89844, -1747.52625, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1503.89844, -1746.28516, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1503.89844, -1745.02490, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1503.89844, -1743.76257, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1503.89844, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	//ZABRANA PRILASKA VOZILA SREDINA
	CreateDynamicObject(1214, 1460.15991, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1461.81995, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1463.44409, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1465.14746, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1466.81104, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1468.45654, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1470.13684, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1471.79626, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1473.46277, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1475.12915, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1476.83020, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1478.51160, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1502.21289, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1500.53125, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1498.86548, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1497.18188, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1495.51855, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1493.87695, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1492.15625, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1490.53271, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1488.85718, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1487.19385, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1485.48303, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1483.86035, -1742.52209, 12.33900,   0.00000, 0.00000, 0.00000);
	//------------------------------------------------------------------------ > CITY HALL INTERIOR
	CreateDynamicObject(14597, 1481.30005, -1790.00000, 1000.00000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 1480.77734, -1801.83716, 998.00317, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1481.66187, -1801.51086, 998.45001, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2002, 1478.89514, -1794.76050, 998.00189, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1483.65051, -1794.73047, 998.00140, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 1483.65051, -1797.19995, 998.00140, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2165, 1492.10901, -1788.86707, 997.99707, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1492.10901, -1792.58911, 997.99707, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1492.97424, -1788.35400, 998.45001, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1492.97424, -1792.09351, 998.45001, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 1486.85852, -1787.07385, 998.00287, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1485.01257, -1787.07422, 998.00165, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 1485.68433, -1794.09668, 998.00262, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2167, 1494.88818, -1787.03223, 998.00018, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2167, 1494.88818, -1793.53003, 998.00018, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2162, 1494.90002, -1791.76001, 997.99988, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2161, 1494.89404, -1787.91809, 998.00031, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1467.87463, -1793.45679, 998.05603, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 1467.87463, -1788.26978, 998.05603, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1470.40125, -1789.79309, 997.99902, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1469.63159, -1790.38281, 998.45001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1475.56055, -1787.05286, 998.00189, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1473.07947, -1787.05286, 998.00189, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1477.56091, -1793.39050, 998.00189, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1475.04028, -1793.39050, 998.00189, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2161, 1479.24011, -1803.14368, 998.00122, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 1469.59387, -1784.65503, 997.99982, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2165, 1469.59387, -1779.11365, 997.99982, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, 1468.87854, -1785.19849, 998.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1468.87854, -1779.66064, 998.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1476.56250, -1778.75659, 998.00177, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2191, 1475.13440, -1779.22156, 998.00116, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2191, 1473.79224, -1779.22156, 998.00122, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 1477.22473, -1785.76746, 999.09998, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2002, 1476.31274, -1785.66138, 998.00262, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1475.58594, -1785.65405, 998.00092, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1998, 1493.44971, -1780.25012, 998.11108, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1494.35266, -1779.92029, 998.50000, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, 1492.37451, -1780.01855, 998.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2162, 1494.41821, -1786.14209, 998.00098, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1487.00610, -1785.65125, 998.00311, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1489.51160, -1785.65125, 998.00311, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2002, 1485.00830, -1779.26624, 998.00177, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 1487.18140, -1779.13745, 999.09998, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1488.09302, -1779.14722, 998.00085, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2249, 1493.27954, -1779.03833, 999.59998, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(644, 1490.55432, -1785.28406, 998.32166, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1494.98999, -1782.94543, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1494.98999, -1792.52661, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1489.28638, -1778.68005, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1498.92004, -1778.68005, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1489.28638, -1786.24402, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1498.92004, -1786.24402, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1484.26904, -1773.57483, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1484.26904, -1799.01794, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1479.43420, -1776.80005, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1478.32483, -1773.57483, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1478.32483, -1799.01794, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1479.43420, -1803.21997, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1473.27515, -1778.68005, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1463.65283, -1778.68005, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1473.27002, -1786.23999, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1463.65283, -1786.23999, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1473.27515, -1786.46997, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1463.65283, -1786.46997, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1473.27515, -1794.00000, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1463.65283, -1794.00000, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1489.28638, -1794.04004, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1489.28638, -1786.46997, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -1794.04004, 999.70001, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1498.92004, -1786.46997, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1498.92004, -1794.04004, 999.70001, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 1467.61328, -1791.36206, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 1467.61328, -1781.35571, 999.70001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1483.62744, -1781.74316, 997.92999, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1494.11633, -1781.74341, 997.92999, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1472.89136, -1781.74341, 997.92999, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1483.62744, -1791.37097, 997.92999, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1494.11633, -1791.37097, 997.92999, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1472.89136, -1791.37097, 997.92999, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1483.62744, -1800.98755, 997.92999, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1483.62744, -1781.74341, 1001.45001, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1494.11633, -1781.74341, 1001.45001, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1483.62939, -1800.98755, 1001.45001, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1494.11633, -1791.37097, 1001.45001, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1473.11157, -1791.37097, 1001.45001, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1473.11157, -1781.74341, 1001.45001, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1483.62744, -1791.35107, 1001.45001, 0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2946, 1484.46436, -1776.86133, 998.01440, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2946, 1478.12231, -1776.86133, 998.01440, 0.00000, 0.00000, -90.00000);
	//------------------------------------------------------------------------ > LSPD
	CreateDynamicObject(2930, 247.98140, 89.21600, 1005.20001, 0.00000, 0.00000, 0.00000);
	cellroomdoor = CreateDynamicObject(2930, 247.98140, 87.49130, 1005.20001, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2930, 266.29559, 77.55000, 1002.59998, 0.00000, 0.00000, 0.00000);
	cell1 = CreateDynamicObject(2930, 266.29559, 79.27300, 1002.59998, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2930, 266.29559, 82.05180, 1002.59998, 0.00000, 0.00000, 0.00000);
	cell2 = CreateDynamicObject(2930, 266.29559, 83.77230, 1002.59998, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2930, 266.29559, 86.54900, 1002.59998, 0.00000, 0.00000, 0.00000);
	cell3 = CreateDynamicObject(2930, 266.29559, 88.26910, 1002.59998, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 262.90793, 87.48180, 1000.44501, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 263.03015, 84.94619, 1000.54480, 0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2603, 262.90790, 82.97620, 1000.44501, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 263.03021, 80.43490, 1000.54480, 0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2603, 262.90790, 78.47430, 1000.44501, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 263.03021, 75.97380, 1000.54480, 0.00000, 0.00000, 135.00000);
	lspddoor1 = CreateDynamicObject(5422, 250.611,63.2995,1003.18,0.00,0.00,00.00); // LSPD Main Door
	lspddoor2 = CreateDynamicObject(5422, 246.228,72.4962,1003.04,0.00,0.00,90.00); // LSPD Control Room Door
	lspdwindow = CreateDynamicObject(974,250.524,67.650,1002.58,0.00,0.00,90.00); // LSPD Windows
	//------------------------------------------------------------------------ > PARKING
	CreateDynamicObject(19447,1622.9000000,-1146.3900000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1615.7000000,-1146.3900000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (2)
	CreateDynamicObject(19428,1610.1500000,-1146.1500000,24.5000000,0.0000000,0.0000000,72.0000000); //object(cs_landbit_10_a) (1)
	CreateDynamicObject(19428,1608.7100000,-1145.5100000,24.5000000,0.0000000,0.0000000,59.9963400); //object(cs_landbit_10_a) (2)
	CreateDynamicObject(19428,1607.5000000,-1144.5400000,24.5000000,0.0000000,0.0000000,42.6499900); //object(cs_landbit_10_a) (4)
	CreateDynamicObject(19428,1606.5500000,-1143.2900000,24.5000000,0.0000000,0.0000000,31.5647000); //object(cs_landbit_10_a) (5)
	CreateDynamicObject(19428,1605.9900000,-1141.8500000,24.5000000,0.0000000,0.0000000,10.7999900); //object(cs_landbit_10_a) (6)
	CreateDynamicObject(19428,1605.8250000,-1140.3000000,24.5000000,0.0000000,0.0000000,1.2000120); //object(cs_landbit_10_a) (7)
	CreateDynamicObject(19428,1605.8100000,-1138.7000000,24.5000000,0.0000000,0.0000000,359.7500000); //object(cs_landbit_10_a) (8)
	CreateDynamicObject(19428,1605.8200000,-1137.1900000,24.5000000,0.0000000,0.0000000,359.2473000); //object(cs_landbit_10_a) (9)
	CreateDynamicObject(19428,1605.8000000,-1135.6000000,24.5000000,0.0000000,0.0000000,2.2500000); //object(cs_landbit_10_a) (10)
	CreateDynamicObject(19428,1605.7000000,-1134.0000000,24.5000000,0.0000000,0.0000000,4.9967040); //object(cs_landbit_10_a) (11)
	CreateDynamicObject(19428,1605.5360000,-1132.4100000,24.5000000,0.0000000,0.0000000,6.7432860); //object(cs_landbit_10_a) (12)
	CreateDynamicObject(19428,1605.3500000,-1130.8300000,24.5000000,0.0000000,0.0000000,6.7401120); //object(cs_landbit_10_a) (13)
	CreateDynamicObject(19428,1605.1680000,-1129.3100000,24.5000000,0.0000000,0.0000000,6.7401120); //object(cs_landbit_10_a) (14)
	CreateDynamicObject(19428,1605.0000000,-1127.8000000,24.5000000,0.0000000,0.0000000,5.7401120); //object(cs_landbit_10_a) (15)
	CreateDynamicObject(19428,1604.8500000,-1126.3000000,24.5000000,0.0000000,0.0000000,5.7348630); //object(cs_landbit_10_a) (16)
	CreateDynamicObject(19428,1604.6900000,-1124.7200000,24.5000000,0.0000000,0.0000000,5.7348630); //object(cs_landbit_10_a) (17)
	CreateDynamicObject(19428,1604.5360000,-1123.2000000,24.5000000,0.0000000,0.0000000,5.7348630); //object(cs_landbit_10_a) (18)
	CreateDynamicObject(19428,1604.3600000,-1121.6200000,24.5000000,0.0000000,0.0000000,6.7348630); //object(cs_landbit_10_a) (19)
	CreateDynamicObject(19428,1604.1500000,-1120.0700000,24.5000000,0.0000000,0.0000000,8.4846190); //object(cs_landbit_10_a) (20)
	CreateDynamicObject(19428,1603.9000000,-1118.5000000,24.5000000,0.0000000,0.0000000,9.4814450); //object(cs_landbit_10_a) (21)
	CreateDynamicObject(19428,1603.6700000,-1117.0000000,24.5000000,0.0000000,0.0000000,7.9812010); //object(cs_landbit_10_a) (22)
	CreateDynamicObject(19428,1603.4400000,-1115.4300000,24.5000000,0.0000000,0.0000000,8.7260740); //object(cs_landbit_10_a) (23)
	CreateDynamicObject(19428,1603.2080000,-1113.9000000,24.5000000,0.0000000,0.0000000,8.4731450); //object(cs_landbit_10_a) (24)
	CreateDynamicObject(19428,1602.9900000,-1112.4000000,24.5000000,0.0000000,0.0000000,8.2204590); //object(cs_landbit_10_a) (25)
	CreateDynamicObject(19428,1602.7700000,-1110.8200000,24.5000000,0.0000000,0.0000000,7.7177730); //object(cs_landbit_10_a) (26)
	CreateDynamicObject(19428,1602.5520000,-1109.2400000,24.5000000,0.0000000,0.0000000,7.9624020); //object(cs_landbit_10_a) (27)
	CreateDynamicObject(19428,1602.3000000,-1107.7000000,24.5000000,0.0000000,0.0000000,10.7095900); //object(cs_landbit_10_a) (28)
	CreateDynamicObject(19428,1602.0000000,-1106.1300000,24.5000000,0.0000000,0.0000000,10.9561800); //object(cs_landbit_10_a) (29)
	CreateDynamicObject(19428,1601.7000000,-1104.6000000,24.5000000,0.0000000,0.0000000,11.2033700); //object(cs_landbit_10_a) (30)
	CreateDynamicObject(19428,1601.4000000,-1103.0600000,24.5000000,0.0000000,0.0000000,10.9505600); //object(cs_landbit_10_a) (31)
	CreateDynamicObject(19428,1601.1000000,-1101.5100000,24.5000000,0.0000000,0.0000000,10.9478800); //object(cs_landbit_10_a) (32)
	CreateDynamicObject(19428,1600.7600000,-1099.9600000,24.5000000,0.0000000,0.0000000,13.6978800); //object(cs_landbit_10_a) (33)
	CreateDynamicObject(19428,1600.3800000,-1098.4300000,24.5000000,0.0000000,0.0000000,13.9444600); //object(cs_landbit_10_a) (34)
	CreateDynamicObject(19428,1600.0600000,-1096.8600000,24.5000000,0.0000000,0.0000000,9.1916500); //object(cs_landbit_10_a) (35)
	CreateDynamicObject(19428,1599.7600000,-1095.3000000,24.5000000,0.0000000,0.0000000,12.6900600); //object(cs_landbit_10_a) (36)
	CreateDynamicObject(19428,1599.3000000,-1093.7800000,24.5000000,0.0000000,0.0000000,20.9392100); //object(cs_landbit_10_a) (37)
	CreateDynamicObject(19428,1598.7400000,-1092.2900000,24.5000000,0.0000000,0.0000000,20.1844500); //object(cs_landbit_10_a) (38)
	CreateDynamicObject(19428,1598.2000000,-1090.8000000,24.5000000,0.0000000,0.0000000,19.6818800); //object(cs_landbit_10_a) (39)
	CreateDynamicObject(19428,1597.6200000,-1089.3200000,24.5000000,0.0000000,0.0000000,23.1765100); //object(cs_landbit_10_a) (40)
	CreateDynamicObject(19428,1597.0200000,-1087.8300000,24.5000000,0.0000000,0.0000000,20.6752900); //object(cs_landbit_10_a) (41)
	CreateDynamicObject(19428,1596.4700000,-1086.3300000,24.5000000,0.0000000,0.0000000,19.6708100); //object(cs_landbit_10_a) (42)
	CreateDynamicObject(19428,1595.9500000,-1084.8100000,24.5000000,0.0000000,0.0000000,18.1655300); //object(cs_landbit_10_a) (43)
	CreateDynamicObject(19428,1595.4200000,-1083.3100000,24.5000000,0.0000000,0.0000000,20.6604000); //object(cs_landbit_10_a) (44)
	CreateDynamicObject(19428,1594.8500000,-1081.8200000,24.5000000,0.0000000,0.0000000,21.4097900); //object(cs_landbit_10_a) (45)
	CreateDynamicObject(19428,1594.2000000,-1080.4000000,24.5000000,0.0000000,0.0000000,27.6568600); //object(cs_landbit_10_a) (46)
	CreateDynamicObject(19428,1593.4300000,-1079.0000000,24.5000000,0.0000000,0.0000000,29.9025900); //object(cs_landbit_10_a) (47)
	CreateDynamicObject(19428,1592.6500000,-1077.6300000,24.5000000,0.0000000,0.0000000,29.3992900); //object(cs_landbit_10_a) (48)
	CreateDynamicObject(19428,1591.9000000,-1076.2500000,24.5000000,0.0000000,0.0000000,27.6439200); //object(cs_landbit_10_a) (49)
	CreateDynamicObject(19428,1591.1600000,-1074.8300000,24.5000000,0.0000000,0.0000000,27.3916000); //object(cs_landbit_10_a) (50)
	CreateDynamicObject(19428,1590.4300000,-1073.4200000,24.5000000,0.0000000,0.0000000,27.3889200); //object(cs_landbit_10_a) (51)
	CreateDynamicObject(19428,1589.7000000,-1072.0000000,24.5000000,0.0000000,0.0000000,26.8889200); //object(cs_landbit_10_a) (52)
	CreateDynamicObject(19428,1589.0000000,-1070.6000000,24.5000000,0.0000000,0.0000000,26.1335100); //object(cs_landbit_10_a) (53)
	CreateDynamicObject(19428,1588.3000000,-1069.2000000,24.5000000,0.0000000,0.0000000,26.8809800); //object(cs_landbit_10_a) (54)
	CreateDynamicObject(19428,1587.5700000,-1067.8000000,24.5000000,0.0000000,0.0000000,28.1280500); //object(cs_landbit_10_a) (55)
	CreateDynamicObject(19428,1586.8300000,-1066.4000000,24.5000000,0.0000000,0.0000000,27.6250000); //object(cs_landbit_10_a) (56)
	CreateDynamicObject(19428,1586.0200000,-1065.0400000,24.5000000,0.0000000,0.0000000,33.8696300); //object(cs_landbit_10_a) (58)
	CreateDynamicObject(19428,1585.1000000,-1063.7400000,24.5000000,0.0000000,0.0000000,36.8653900); //object(cs_landbit_10_a) (59)
	CreateDynamicObject(19428,1584.1000000,-1062.5000000,24.5000000,0.0000000,0.0000000,40.8646200); //object(cs_landbit_10_a) (60)
	CreateDynamicObject(19428,1583.1300000,-1061.3000000,24.5000000,0.0000000,0.0000000,36.8636500); //object(cs_landbit_10_a) (61)
	CreateDynamicObject(19428,1582.2100000,-1060.0700000,24.5000000,0.0000000,0.0000000,36.8591300); //object(cs_landbit_10_a) (62)
	CreateDynamicObject(19428,1581.2600000,-1058.8000000,24.5000000,0.0000000,0.0000000,36.8591300); //object(cs_landbit_10_a) (63)
	CreateDynamicObject(19428,1580.3000000,-1057.5200000,24.5000000,0.0000000,0.0000000,36.6091300); //object(cs_landbit_10_a) (64)
	CreateDynamicObject(19428,1579.3500000,-1056.2400000,24.5000000,0.0000000,0.0000000,36.6064500); //object(cs_landbit_10_a) (65)
	CreateDynamicObject(19428,1578.4200000,-1055.0000000,24.5000000,0.0000000,0.0000000,37.3564800); //object(cs_landbit_10_a) (66)
	CreateDynamicObject(19428,1577.4600000,-1053.7200000,24.5000000,0.0000000,0.0000000,36.6035200); //object(cs_landbit_10_a) (67)
	CreateDynamicObject(19428,1576.5000000,-1052.4400000,24.5000000,0.0000000,0.0000000,37.1009500); //object(cs_landbit_10_a) (68)
	CreateDynamicObject(19428,1575.5500000,-1051.1600000,24.5000000,0.0000000,0.0000000,36.1008300); //object(cs_landbit_10_a) (69)
	CreateDynamicObject(19428,1574.6100000,-1049.9000000,24.5000000,0.0000000,0.0000000,37.0955800); //object(cs_landbit_10_a) (70)
	CreateDynamicObject(19428,1573.6600000,-1048.6200000,24.5000000,0.0000000,0.0000000,36.0953400); //object(cs_landbit_10_a) (71)
	CreateDynamicObject(19428,1572.6500000,-1047.4000000,24.5000000,0.0000000,0.0000000,43.3400900); //object(cs_landbit_10_a) (72)
	CreateDynamicObject(19428,1571.4700000,-1046.3500000,24.5000000,0.0000000,0.0000000,53.0855700); //object(cs_landbit_10_a) (73)
	CreateDynamicObject(19428,1570.2400000,-1045.4000000,24.5000000,0.0000000,0.0000000,51.5804400); //object(cs_landbit_10_a) (74)
	CreateDynamicObject(19428,1569.0500000,-1044.4000000,24.5000000,0.0000000,0.0000000,48.3253200); //object(cs_landbit_10_a) (75)
	CreateDynamicObject(19428,1567.8300000,-1043.3800000,24.5000000,0.0000000,0.0000000,51.8225100); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1566.6100000,-1042.3900000,24.5000000,0.0000000,0.0000000,50.3225100); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1565.4100000,-1041.3900000,24.5000000,0.0000000,0.0000000,50.0673800); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1564.2200000,-1040.3900000,24.5000000,0.0000000,0.0000000,50.0647000); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1563.0500000,-1039.4000000,24.5000000,0.0000000,0.0000000,49.5647300); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1562.6000000,-1039.0200000,24.5000000,0.0000000,0.0000000,49.5593300); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1561.2600000,-1038.2900000,24.5000000,0.0000000,0.0000000,73.0593600); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1559.8000000,-1037.8500000,24.5000000,0.0000000,0.0000000,73.3090800); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19428,1558.2900000,-1037.3800000,24.5000000,0.0000000,0.0000000,72.0562700); //object(cs_landbit_10_a) (76)
	CreateDynamicObject(19447,1549.0000000,-1034.4000000,24.5000000,0.0000000,0.0000000,72.0000000); //object(cs_detrok13) (3)
	CreateDynamicObject(19447,1540.2500000,-1031.5800000,24.5000000,0.0000000,0.0000000,72.2489000); //object(cs_detrok13) (4)
	CreateDynamicObject(19428,1535.2600000,-1029.4800000,24.5000000,0.0000000,0.0000000,33.7500000); //object(cs_landbit_10_a) (3)
	CreateDynamicObject(19428,1534.7900000,-1028.0560000,24.5000000,0.0000000,0.0000000,2.7449950); //object(cs_landbit_10_a) (57)
	CreateDynamicObject(19428,1535.0300000,-1026.5450000,24.5000000,0.0000000,0.0000000,338.9911000); //object(cs_landbit_10_a) (77)
	CreateDynamicObject(19428,1535.6000000,-1025.1000000,24.5000000,0.0000000,0.0000000,337.7386000); //object(cs_landbit_10_a) (78)
	CreateDynamicObject(19428,1536.2100000,-1023.7000000,24.5000000,0.0000000,0.0000000,335.7334000); //object(cs_landbit_10_a) (79)
	CreateDynamicObject(19447,1538.5300000,-1018.6000000,24.5000000,0.0000000,0.0000000,335.5000000); //object(cs_detrok13) (8)
	CreateDynamicObject(19447,1542.5100098,-1009.8300171,24.5000000,0.0000000,0.0000000,335.7000122); //object(cs_detrok13) (9)
	CreateDynamicObject(19447,1652.5000000,-1146.3900000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1662.1000000,-1146.3900000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1671.7000000,-1146.3900000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1676.7000000,-1146.3900000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19428,1682.2700000,-1146.2000000,24.5000000,0.0000000,0.0000000,284.0000000); //object(cs_landbit_10_a) (80)
	CreateDynamicObject(19428,1683.6400000,-1145.5200000,24.5000000,0.0000000,0.0000000,308.7466000); //object(cs_landbit_10_a) (81)
	CreateDynamicObject(19428,1684.6300000,-1144.3500000,24.5000000,0.0000000,0.0000000,330.4933000); //object(cs_landbit_10_a) (82)
	CreateDynamicObject(19428,1685.3000000,-1142.9400000,24.5000000,0.0000000,0.0000000,338.4907000); //object(cs_landbit_10_a) (83)
	CreateDynamicObject(19428,1685.7000000,-1141.4200000,24.5000000,0.0000000,0.0000000,351.9888000); //object(cs_landbit_10_a) (85)
	CreateDynamicObject(19447,1685.8000000,-1135.8400000,24.5000000,0.0000000,0.0000000,0.1000061); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1685.8000000,-1126.3000000,24.5000000,0.0000000,0.0000000,359.9000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1685.8000000,-1116.7000000,24.5000000,0.0000000,0.0000000,0.1456299); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1685.8000000,-1107.1000000,24.5000000,0.0000000,0.0000000,359.8928000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1685.8000000,-1099.9000000,24.5000000,0.0000000,0.0000000,0.1401367); //object(cs_detrok13) (1)
	CreateDynamicObject(19428,1686.3350000,-1094.5900000,24.5000000,0.0000000,0.0000000,314.0000000); //object(cs_landbit_10_a) (86)
	CreateDynamicObject(19447,1691.6670000,-1094.1000000,24.5000000,0.0000000,0.0000000,89.5000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1701.2700000,-1094.1400000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1710.9000000,-1094.2000000,24.5000000,0.0000000,0.0000000,89.2999900); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1720.5000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1730.1000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1739.7000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1749.2000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1758.7000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1768.3000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1777.8000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1787.4000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1797.0000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1806.6000000,-1094.2580000,24.5000000,0.0000000,0.0000000,90.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19428,1812.1600000,-1094.2580000,24.5000000,0.0000000,0.0000000,270.0000000); //object(cs_landbit_10_a) (87)
	CreateDynamicObject(19447,1813.0500000,-1089.5300000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1080.0000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1070.5000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1060.9000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1051.3000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1041.7000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1032.1000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1022.5000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1813.0500000,-1012.9000000,24.5000000,0.0000000,0.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1546.4100000,-1001.2000000,24.5000000,0.0000000,0.0000000,335.6982000); //object(cs_detrok13) (9)
	CreateDynamicObject(8406,1635.9000000,-1146.1000000,28.4000000,0.0000000,0.0000000,0.0000000); //object(carparksign01_lvs) (1)
	CreateDynamicObject(4641,1637.7000000,-1144.4000000,24.6000000,0.0000000,0.0000000,180.0000000); //object(paypark_lan04) (1)
	bpgate1 = CreateDynamicObject(969,1627.8000000,-1145.9000000,23.1000000,0.0000000,0.0000000,0.0000000); //object(electricgate) (1)
	bpgate2 = CreateDynamicObject(969,1647.6000000,-1145.9000000,23.1000000,0.0000000,0.0000000,180.0000000); //object(electricgate) (2)
	//------------------------------------------------------------------------ > AIRPLANES HANGAR
 	CreateDynamicObject(16098,307.8999900,2466.3999000,20.5000000,0.0000000,0.0000000,270.0000000); //object(des_by_hangar_) (2)
	CreateDynamicObject(16098,227.3999900,2466.3999000,20.5000000,0.0000000,0.0000000,270.0000000); //object(des_by_hangar_) (4)
	//------------------------------------------------------------------------ > SPAWN OBJECTS
	CreateDynamicObject(984,1565.7399900,-2349.0000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (1)
	CreateDynamicObject(984,1565.7399900,-2361.7998000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (2)
	CreateDynamicObject(984,1565.7399900,-2336.1999500,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (4)
	CreateDynamicObject(984,1565.7399900,-2323.3000500,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (5)
	CreateDynamicObject(984,1565.7399900,-2311.0000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (6)
	CreateDynamicObject(9131,1565.7399900,-2367.8689000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (1)
	CreateDynamicObject(9131,1565.7399900,-2355.3999000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (2)
	CreateDynamicObject(9131,1565.7399900,-2342.6001000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (3)
	CreateDynamicObject(9131,1565.7399900,-2329.8000500,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (4)
	CreateDynamicObject(9131,1565.7399900,-2317.0000000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (5)
	CreateDynamicObject(9131,1565.7399900,-2305.8000500,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (6)
	CreateDynamicObject(983,1565.7399900,-2303.0000000,13.2500000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (3)
	CreateDynamicObject(983,1565.7399900,-2299.8000500,13.2500000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (4)
	CreateDynamicObject(9131,1565.7399900,-2296.9199200,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (7)
	CreateDynamicObject(984,1559.6999500,-2367.8999000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (9)
	CreateDynamicObject(984,1547.0000000,-2367.8999000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (10)
	CreateDynamicObject(984,1534.1999500,-2367.8999000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (11)
	CreateDynamicObject(984,1521.4000200,-2367.8999000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (12)
	CreateDynamicObject(984,1508.5999800,-2367.8999000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (13)
	CreateDynamicObject(984,1495.8000500,-2367.8999000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (14)
	CreateDynamicObject(983,1487.8000500,-2367.8999000,13.2500000,0.0000000,0.0000000,90.0000000); //object(fenceshit3) (5)
	CreateDynamicObject(9131,1553.4000200,-2367.8689000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (8)
	CreateDynamicObject(9131,1540.5999800,-2367.8689000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (9)
	CreateDynamicObject(9131,1527.6999500,-2367.8689000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (10)
	CreateDynamicObject(9131,1515.0999800,-2367.8689000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (11)
	CreateDynamicObject(9131,1502.3000500,-2367.8689000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (12)
	CreateDynamicObject(9131,1484.8000500,-2367.8689000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (13)
	CreateDynamicObject(984,1484.8000500,-2361.7998000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (15)
	CreateDynamicObject(9131,1484.8000500,-2355.3994100,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (14)
	CreateDynamicObject(984,1484.8000500,-2349.0000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (16)
	CreateDynamicObject(9131,1484.7889400,-2342.6999500,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(983,1488.0999800,-2342.1999500,13.3000000,0.0000000,0.0000000,280.0000000); //object(fenceshit3) (6)
	CreateDynamicObject(983,1494.4000200,-2341.1001000,13.3000000,0.0000000,0.0000000,279.7480000); //object(fenceshit3) (8)
	CreateDynamicObject(9131,1497.8890400,-2340.6001000,13.6000000,0.0000000,0.0000000,8.0000000); //object(shbbyhswall13_lvs) (16)
	CreateDynamicObject(984,1504.4000200,-2340.4670400,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (17)
	CreateDynamicObject(9131,1510.8000500,-2340.4670400,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (17)
	CreateDynamicObject(984,1517.0999800,-2340.4670400,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (18)
	CreateDynamicObject(9131,1523.6999500,-2340.4670400,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (18)
	CreateDynamicObject(984,1530.4000200,-2340.4670400,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (19)
	CreateDynamicObject(9131,1538.6894500,-2340.4668000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (19)
	CreateDynamicObject(983,1535.1999500,-2340.4670400,13.2500000,0.0000000,0.0000000,90.0000000); //object(fenceshit3) (9)
	CreateDynamicObject(984,1538.6899400,-2333.8000500,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (20)
	CreateDynamicObject(9131,1538.6669900,-2327.3999000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (20)
	CreateDynamicObject(984,1538.6899400,-2320.8000500,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (21)
	CreateDynamicObject(9131,1538.6400100,-2314.3999000,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (21)
	CreateDynamicObject(984,1538.6700400,-2307.8999000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (22)
	CreateDynamicObject(983,1538.6700400,-2299.8999000,13.2500000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (10)
	CreateDynamicObject(9131,1538.6099900,-2296.8730500,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (22)
	CreateDynamicObject(984,1559.6800500,-2296.8999000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (23)
	CreateDynamicObject(4639,1540.7450000,-2297.5996100,14.2000000,0.0000000,0.0000000,0.0000000); //object(paypark_lan02) (1)
	CreateDynamicObject(9131,1542.8800000,-2296.8730500,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (23)
	CreateDynamicObject(9131,1553.6200000,-2296.9199200,13.6000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (24)
	CreateDynamicObject(1215,1565.6999500,-2296.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1565.6999500,-2305.8000500,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1565.6999500,-2317.0000000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1565.6999500,-2329.8000500,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1565.6999500,-2342.6001000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,1565.6999500,-2355.3999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (6)
	CreateDynamicObject(1215,1565.6999500,-2367.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (7)
	CreateDynamicObject(1215,1553.5999800,-2296.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (8)
	CreateDynamicObject(1215,1553.4000200,-2367.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (9)
	CreateDynamicObject(1215,1540.5999800,-2367.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (10)
	CreateDynamicObject(1215,1527.6999500,-2367.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (11)
	CreateDynamicObject(1215,1515.0999800,-2367.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (12)
	CreateDynamicObject(1215,1502.3000500,-2367.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (13)
	CreateDynamicObject(1215,1484.8000500,-2367.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (14)
	CreateDynamicObject(1215,1484.8000500,-2355.3999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (15)
	CreateDynamicObject(1215,1484.8000500,-2342.6999500,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (16)
	CreateDynamicObject(1215,1497.8700000,-2340.6001000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (17)
	CreateDynamicObject(1215,1510.8000500,-2340.4499500,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (18)
	CreateDynamicObject(1215,1523.6999500,-2340.4499500,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (19)
	CreateDynamicObject(1215,1538.6700400,-2340.4499500,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (20)
	CreateDynamicObject(1215,1538.6700400,-2327.3999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (21)
	CreateDynamicObject(1215,1538.5999800,-2314.3999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (22)
	CreateDynamicObject(1215,1538.5999800,-2296.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (23)
	CreateDynamicObject(1215,1542.9000200,-2296.8999000,15.3000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (24)
	CreateDynamicObject(9339,1590.0999800,-2326.6001000,13.2000000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1616.2149700,-2326.6047400,13.2000000,0.0000000,0.0000000,270.0000000); //object(sfnvilla001_cm) (2)
	CreateDynamicObject(9339,1633.0000000,-2326.6120600,13.2000000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm) (3)
	CreateDynamicObject(9339,1646.1999500,-2339.5388200,13.2000000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(3858,1638.9000200,-2326.6001000,16.8000000,0.0000000,0.0000000,45.0000000); //object(ottosmash1) (1)
	CreateDynamicObject(3858,1625.1999500,-2326.6001000,16.8000000,0.0000000,0.0000000,44.9950000); //object(ottosmash1) (2)
	CreateDynamicObject(3858,1611.4000200,-2326.6001000,16.8000000,0.0000000,0.0000000,44.9950000); //object(ottosmash1) (3)
	CreateDynamicObject(3858,1597.5999800,-2326.6001000,16.8000000,0.0000000,0.0000000,44.9950000); //object(ottosmash1) (4)
	CreateDynamicObject(3858,1583.9000200,-2326.6001000,16.8000000,0.0000000,0.0000000,45.0000000); //object(ottosmash1) (7)
	CreateDynamicObject(3858,1646.1870100,-2333.8889200,16.8000000,0.0000000,0.0000000,315.0000000); //object(ottosmash1) (8)
	//------------------------------------------------------------------------ > DETECTIVE JOB EXTERIOR
	CreateDynamicObject(3037,1534.8000000,-1451.4000000,19.0000000,0.0000000,0.0000000,90.0000000); //object(warehouse_door2b) (2)
	detectivegate = CreateDynamicObject(3037,1534.7998000,-1451.4004000,14.6000000,0.0000000,0.0000000,90.0000000); //object(warehouse_door2b) (3)
	//------------------------------------------------------------------------ > DETECTIVE JOB INTERIOR
	CreateDynamicObject(19376, -150.00000, 150.02000, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -139.50000, 150.02000, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -150.00000, 140.39999, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, -139.50000, 140.39999, 1000.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -139.50000, 150.02000, 1003.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -150.00000, 150.02000, 1003.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -150.00000, 140.39999, 1003.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -139.50000, 140.39999, 1003.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19384, -144.83730, 154.70000, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -138.42000, 154.70000, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -151.25999, 135.51511, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -155.30000, 149.80000, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -155.30000, 140.17999, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -151.25999, 154.70000, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -141.63110, 135.51511, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -132.00000, 135.51511, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -134.19910, 140.17999, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -134.19910, 149.80000, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -140.83501, 146.85420, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -131.23320, 146.85420, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -150.38702, 146.85420, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, -145.66417, 141.94968, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -139.85970, 140.17999, 1001.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, -133.48486, 144.88336, 1001.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, -142.38757, 146.75821, 1002.07312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2987, -135.24892, 146.77708, 1000.96002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -154.72934, 136.08226, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -154.72929, 138.00000, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -154.70929, 139.89981, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -154.72929, 141.80000, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -154.72929, 143.70000, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -150.72929, 143.70000, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -150.72929, 141.80000, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -150.72929, 139.89999, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -150.72929, 138.00000, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, -150.72929, 136.08231, 1000.08740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, -145.78900, 138.95061, 1001.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2611, -145.78900, 145.32269, 1001.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2737, -145.78900, 141.97470, 1001.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1671, -150.18089, 143.66870, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -150.18089, 141.76840, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -150.18089, 139.84711, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -150.18089, 137.92619, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -150.18089, 136.00790, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -154.18570, 143.66870, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -154.18570, 141.76840, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -154.18570, 139.84711, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -154.18570, 137.92619, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -154.18570, 136.00790, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -145.07137, 137.63779, 1000.08459,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -145.07140, 144.31641, 1000.08459,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2008, -135.80330, 137.19910, 1000.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, -134.88979, 136.51494, 1000.54999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, -134.88980, 138.30110, 1000.54999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, -135.11130, 144.79846, 1000.08704,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2162, -136.88080, 144.80901, 1000.08722,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, -139.21172, 140.41263, 1000.08588,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1775, -139.34923, 139.52893, 1001.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -134.79066, 142.40048, 1000.08459,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2315, -144.99933, 141.22600, 1000.08728,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2002, -140.45490, 142.88802, 1000.08691,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1775, -140.46310, 141.99942, 1001.20001,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2611, -140.12082, 139.39818, 1001.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2612, -140.12080, 137.30980, 1001.59998,   0.00000, 0.00000, -90.00000);
	//------------------------------------------------------------------------ > SANITARY JOB
	CreateDynamicObject(19456, 1077.87500, -1207.49219, 15.14000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19456, 1077.87500, -1207.49219, 18.64000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1120.16663, -1178.85327, 21.76300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1120.16663, -1178.85327, 25.25000,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(3242, 1110.17163, -1193.00000, 18.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1092.12146, -1183.71179, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1090.09912, -1183.71179, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1088.09583, -1183.71179, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1086.04639, -1183.71179, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1092.12146, -1185.30005, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1090.09912, -1185.30005, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1088.09583, -1185.30005, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1331, 1086.04639, -1185.30005, 18.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1332, 1114.36804, -1187.97827, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1112.32813, -1187.97827, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1110.30969, -1187.97827, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1108.26990, -1187.97827, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1106.24988, -1187.97827, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1106.24988, -1186.30005, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1108.26990, -1186.30005, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1110.30969, -1186.30005, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1112.32813, -1186.30005, 18.18000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1332, 1114.36804, -1186.30005, 18.18000,   0.00000, 0.00000, 180.00000);
 	//------------------------------------------------------------------------ > TAXI JOB
 	CreateDynamicObject(983,1102.6000000,-1760.5000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (3)
	CreateDynamicObject(983,1102.6000000,-1754.1000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (4)
	CreateDynamicObject(983,1102.6000000,-1766.9000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (6)
	CreateDynamicObject(983,1102.6000000,-1771.7000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (7)
	CreateDynamicObject(983,1102.6000000,-1774.9000000,13.2000000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (8)
	CreateDynamicObject(9131,1102.5000000,-1777.8000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (3)
	CreateDynamicObject(983,1099.0000000,-1777.9000000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit3) (10)
	CreateDynamicObject(983,1092.6000000,-1777.9000000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit3) (11)
	CreateDynamicObject(983,1062.2000000,-1777.9000000,13.2500000,0.0000000,0.0000000,90.0000000); //object(fenceshit3) (12)
	CreateDynamicObject(983,1079.8000000,-1777.9000000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit3) (13)
	CreateDynamicObject(984,1070.2000000,-1777.9000000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit2) (4)
	CreateDynamicObject(983,1086.2000000,-1777.9000000,13.2000000,0.0000000,0.0000000,90.0000000); //object(fenceshit3) (16)
	CreateDynamicObject(9131,1058.6700000,-1777.8000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (4)
	CreateDynamicObject(982,1058.6000000,-1765.3000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(fenceshit) (2)
	CreateDynamicObject(984,1058.6000000,-1746.1000000,13.3000000,0.0000000,0.0000000,0.0000000); //object(fenceshit2) (5)
	CreateDynamicObject(983,1058.6000000,-1738.1000000,13.3400000,0.0000000,0.0000000,0.0000000); //object(fenceshit3) (17)
	CreateDynamicObject(9131,1058.6000000,-1735.1000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (5)
	CreateDynamicObject(9131,1102.5000000,-1751.2399900,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (6)
	CreateDynamicObject(982,1071.7200000,-1735.1000000,13.4000000,0.0000000,0.0000000,90.0000000); //object(fenceshit) (4)
	CreateDynamicObject(982,1089.3300000,-1735.1000000,13.4000000,0.0000000,0.0000000,90.0000000); //object(fenceshit) (5)
	CreateDynamicObject(9131,1102.4500000,-1735.1000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (7)
	CreateDynamicObject(1215,1102.5000000,-1751.3000000,15.4000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1102.5000000,-1777.8000000,15.4000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1058.6000000,-1777.8000000,15.4000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1058.6000000,-1735.1000000,15.4000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1102.4000000,-1735.1000000,15.4000000,0.0000000,0.0000000,0.0000000); //object(bollardlight) (5)
 	//------------------------------------------------------------------------ > MECHANIC JOB
	CreateDynamicObject(8947, 2518.74634, -1481.77686, 26.00000, 0.00000, 0.00000, 89.00000);
	CreateDynamicObject(8661, 2521.95020, -1484.61755, 23.00000, 0.10000, 0.00000, 0.00000);
	CreateDynamicObject(3593, 2537.07471, -1473.17505, 23.46900, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3594, 2534.17700, -1471.07886, 24.10000, -10.00000, 0.00000, 30.00000);
	CreateDynamicObject(10281, 2531.96997, -1481.93127, 28.08790, 0.00000, 0.00000, 89.00000);
	mechanicdoor = CreateDynamicObject(3037, 2530.80005, -1482.25000, 24.30000, 0.00000, 0.00000, -1.00000);
	CreateDynamicObject(1025, 2530.43018, -1489.86438, -1490.72205, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8674, 2511.35986, -1492.32996, 24.41100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 2521.65283, -1492.32996, 24.41100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2508.84595, -1476.21057, 23.51875, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14826, 2526.60327, -1476.91077, 23.72610, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3593, 2524.48120, -1476.18921, 23.46900, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2002, 2529.79614, -1488.87402, 22.99110, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1209, 2528.14624, -1488.57117, 22.99320, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19157, 2512.80005, -1485.80005, 22.90000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19157, 2508.41943, -1485.80005, 22.90000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 2513.42993, -1484.43994, 25.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2513.42993, -1487.14954, 25.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2510.12964, -1484.43994, 25.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2510.12964, -1487.14954, 25.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2506.84790, -1484.43994, 25.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2506.84790, -1487.14954, 25.50000, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2516.44824, -1484.43994, 24.66000, 30.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2516.44824, -1485.79065, 24.66000, 30.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2519.31006, -1485.79065, 23.00800, 30.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2519.31006, -1487.14954, 23.00800, 30.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2519.31006, -1484.43994, 23.00800, 30.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 2516.44824, -1487.14954, 24.66000, 30.00000, 0.00000, 90.00000);
	//------------------------------------------------------------------------ > SMUGGLER JOB
	CreateDynamicObject(1723, 2134.69116, -2281.19971, 19.67160,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(1723, 2132.62207, -2283.27466, 19.67160,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(3014, 2122.26855, -2268.72998, 19.88750,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3014, 2121.85791, -2269.13989, 19.88750,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3014, 2122.26855, -2268.72998, 20.35000,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3014, 2122.27905, -2268.80127, 20.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18885, 2118.75562, -2272.05566, 20.50017,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1999, 2124.67798, -2276.86328, 19.67240,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1671, 2124.71973, -2278.22339, 20.10000,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1999, 2124.36450, -2272.68433, 19.67240,   0.00000, 0.00000, -225.00000);
	CreateDynamicObject(1671, 2124.41016, -2271.32837, 20.10000,   0.00000, 0.00000, -45.00000);
	//CreateDynamicObject(2924, 2132.19019, -2277.89160, 20.87981,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2612, 2128.17212, -2274.11011, 21.42070,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2611, 2124.51074, -2270.44287, 21.42070,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(335, 2124.56812, -2276.93970, 20.47000,   90.00000, 90.00000, 15.00000);
	//CreateDynamicObject(2924, 2118.78784, -2274.06763, 20.87981,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2049, 2129.23438, -2283.32104, 21.30740,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2050, 2127.68335, -2281.76440, 21.30740,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2051, 2125.87402, -2279.95752, 21.30740,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2055, 2131.42480, -2277.34888, 21.35780,   0.00000, 0.00000, -45.00000);
	smugglergate1 = CreateDynamicObject(976, 2227.89941, -2209.22607, 12.54400,   0.00000, 0.00000, -45.00000);
	smugglergate2 = CreateDynamicObject(976, 2240.26001, -2221.58179, 12.54400,   0.00000, 0.00000, 135.00000);
 	//------------------------------------------------------------------------ > POLICE GARAGE
 	pdgarage = CreateDynamicObject(3037,1589.7000000,-1638.3101000,14.2700000,0.0000000,0.0000000,90.0000000); //object(warehouse_door2b) (2)
	pdgaragedoor = CreateDynamicObject(2930,1582.4000000,-1638.0500000,15.0000000,0.0000000,0.0000000,90.0000000); //object(chinatgate) (1)
	//------------------------------------------------------------------------ > RENT
	RentVehicle[0] = AddStaticVehicleEx(462,1560.3000500,-2309.0000000,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[1] = AddStaticVehicleEx(462,1560.3000500,-2312.3000500,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[2] = AddStaticVehicleEx(462,1560.3000500,-2315.6001000,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[3] = AddStaticVehicleEx(462,1560.3000500,-2318.8999000,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[4] = AddStaticVehicleEx(462,1560.3000500,-2322.1999500,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[5] = AddStaticVehicleEx(462,1560.3000500,-2325.5000000,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[6] = AddStaticVehicleEx(462,1560.3000500,-2328.6999500,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[7] = AddStaticVehicleEx(462,1560.3000500,-2332.0000000,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[8] = AddStaticVehicleEx(462,1560.3000500,-2335.3000500,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[9] = AddStaticVehicleEx(462,1560.3000500,-2338.5000000,13.2000000,90.0000000,-1,7,-1); //Faggio
	RentVehicle[10] = AddStaticVehicleEx(410, 1552.6835, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[11] = AddStaticVehicleEx(410, 1549.4233, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[12] = AddStaticVehicleEx(410, 1546.1617, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[13] = AddStaticVehicleEx(410, 1542.9518, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[14] = AddStaticVehicleEx(410, 1539.6881, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[15] = AddStaticVehicleEx(410, 1536.3673, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[16] = AddStaticVehicleEx(410, 1533.1079, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[17] = AddStaticVehicleEx(410, 1529.8678, -2361.0581, 13.2520, 0.0000, -1, 7, -1);
	RentVehicle[18] = AddStaticVehicleEx(462,1180.0000000,-1337.6000000,13.2000000,270.0000000,-1,7,-1); //Faggio
	RentVehicle[19] = AddStaticVehicleEx(462,1184.5996000,-1337.5996000,13.2000000,270.0000000,-1,7,-1); //Faggio
	RentVehicle[20] = AddStaticVehicleEx(462,1184.5996000,-1340.5996000,13.2000000,270.0000000,-1,7,-1); //Faggio
	RentVehicle[21] = AddStaticVehicleEx(462,1180.0000000,-1340.5996000,13.2000000,270.0000000,-1,7,-1); //Faggio
	RentVehicle[22] = AddStaticVehicleEx(462,1175.4000000,-1337.6000000,13.2000000,270.0000000,-1,7,-1); //Faggio
	RentVehicle[23] = AddStaticVehicleEx(462,1175.4000000,-1340.5996000,13.2000000,270.0000000,-1,7,-1); //Faggio
	//------------------------------------------------------------------------ > SALES VEHICLES
	//------------------------------------------------------------------------- > COUNT AND SHUTZ
	SalesVehicle[0] = AddStaticVehicleEx(580,2148.7000000,-1134.1000000,25.5000000,270.0000000, 1, 1, 15); //Stafford
	SalesVehicle[1] = AddStaticVehicleEx(566,2148.7002000,-1143.2002000,25.0000000,270.0000000, 1, 1, 15); //Tahoma
	SalesVehicle[2] = AddStaticVehicleEx(529,2148.7002000,-1148.2002000,24.2000000,270.0000000, 1, 1, 15); //Willard
	SalesVehicle[3] = AddStaticVehicleEx(445,2148.7002000,-1157.2000000,23.8000000,270.0000000, 1, 1, 15); //Admiral
	SalesVehicle[4] = AddStaticVehicleEx(516,2148.7002000,-1153.0000000,23.7000000,270.0000000, 1, 1, 15); //Nebula
	SalesVehicle[5] = AddStaticVehicleEx(401,2148.7002000,-1194.4000000,23.7000000,270.0000000, 1, 1, 15); //Bravura
	SalesVehicle[6] = AddStaticVehicleEx(410,2148.7002000,-1189.7002000,23.6000000,270.0000000, 1, 1, 15); //Manana
	SalesVehicle[7] = AddStaticVehicleEx(436,2148.7002000,-1198.9004000,23.8000000,270.0000000, 1, 1, 15); //Previon
	SalesVehicle[8] = AddStaticVehicleEx(413,2161.3000000,-1148.3000000,24.6000000,90.0000000, 1, 1, 15); //Pony
	SalesVehicle[9] = AddStaticVehicleEx(418,2161.3000000,-1158.1000000,24.0000000,90.0000000, 1, 1, 15); //Moonbeam
	SalesVehicle[10] = AddStaticVehicleEx(482,2161.3000000,-1152.9000000,24.1000000,90.0000000, 1, 1, 15); //Burrito
	SalesVehicle[11] = AddStaticVehicleEx(554,2161.2998000,-1168.1000000,24.0000000,90.0000000, 1, 1, 15); //Yosemite
	SalesVehicle[12] = AddStaticVehicleEx(543,2161.2998000,-1173.0000000,23.7523200,90.0000000, 1, 1, 15); //Sadler
	SalesVehicle[13] = AddStaticVehicleEx(546,2148.7000000,-1138.3000000,25.3000000,270.0000000, 1, 1, 15); //Intruder
	SalesVehicle[14] = AddStaticVehicleEx(422,2161.2998000,-1177.9004000,23.9000000,90.0000000, 1, 1, 15); //Bobcat
	SalesVehicle[15] = AddStaticVehicleEx(404,2161.2998000,-1192.4000000,23.7000000,90.0000000, 1, 1, 15); //Perrenial
	SalesVehicle[16] = AddStaticVehicleEx(479,2161.2998000,-1187.5000000,23.7000000,90.0000000, 1, 1, 15); //Regina
	SalesVehicle[17] = AddStaticVehicleEx(517,2148.7002000,-1175.5996000,23.8000000,270.0000000, 1, 1, 15); //Majestic
	SalesVehicle[18] = AddStaticVehicleEx(491,2148.7002000,-1170.8000000,23.7000000,270.0000000, 1, 1, 15); //Virgo
	SalesVehicle[19] = AddStaticVehicleEx(526,2148.7002000,-1180.2000000,23.7000000,270.0000000, 1, 1, 15); //Fortune
	SalesVehicle[20] = AddStaticVehicleEx(423,2120.5000000,-1128.5996000,25.0000000,315.0000000, 1, 1, 15); //Mr Whoopee
	SalesVehicle[21] = AddStaticVehicleEx(588,2120.5000000,-1134.5000000,25.3000000,315.0000000, 1, 1, 15); //Hotdog
	SalesVehicle[22] = AddStaticVehicleEx(420,2134.4004000,-1128.5996000,25.5000000,45.0000000, 1, 1, 15); //Taxi
	SalesVehicle[23] = AddStaticVehicleEx(438,2134.4004000,-1134.5000000,25.9000000,45.0000000, 1, 1, 15); //Cabbie
	//------------------------------------------------------------------------- > WANG CARS
	SalesVehicle[24] = AddStaticVehicleEx(542,-1946.7998000,273.7002000,35.3000000,135.0000000, 2, 2, 15); //Clover
	SalesVehicle[25] = AddStaticVehicleEx(475,-1946.7002000,269.0996100,35.4000000,135.0000000, 2, 2, 15); //Sabre
	SalesVehicle[26] = AddStaticVehicleEx(545,-1946.7002000,264.7002000,35.4000000,135.0000000, 2, 2, 15); //Hustler
	SalesVehicle[27] = AddStaticVehicleEx(533,-1946.7998000,260.0996100,35.3000000,135.0000000, 2, 2, 15); //Feltzer
	SalesVehicle[28] = AddStaticVehicleEx(496,-1960.7002000,256.2998000,35.3000000,315.0000000, 2, 2, 15); //Blista Compact
	SalesVehicle[29] = AddStaticVehicleEx(589,-1960.7002000,261.7002000,35.2000000,315.0000000, 2, 2, 15); //Club
	SalesVehicle[30] = AddStaticVehicleEx(500,-1960.7002000,269.1000100,35.7000000,315.0000000, 2, 2, 15); //Mesa
	SalesVehicle[31] = AddStaticVehicleEx(579,-1960.7002000,274.7999900,35.6000000,315.0000000, 2, 2, 15); //Huntley
	SalesVehicle[32] = AddStaticVehicleEx(489,-1960.7002000,283.0996100,35.7498200,315.0000000, 2, 2, 15); //Rancher
	SalesVehicle[33] = AddStaticVehicleEx(400,-1960.7002000,288.9003900,35.6000000,315.0000000, 2, 2, 15); //Landstalker
	SalesVehicle[34] = AddStaticVehicleEx(540,-1960.7002000,299.8999900,35.6000000,225.0000000, 2, 2, 15); //Vincent
	SalesVehicle[35] = AddStaticVehicleEx(412,-1947.0000000,273.5000000,41.0000000,135.0000000, 2, 2, 15); //Voodoo
	SalesVehicle[36] = AddStaticVehicleEx(419,-1947.0000000,268.7002000,41.0000000,135.0000000, 2, 2, 15); //Esperanto
	SalesVehicle[37] = AddStaticVehicleEx(518,-1947.0000000,264.0996100,40.8000000,135.0000000, 2, 2, 15); //Buccaneer
	SalesVehicle[38] = AddStaticVehicleEx(534,-1947.0000000,259.5000000,40.9000000,135.0000000, 2, 2, 15); //Remington
	SalesVehicle[39] = AddStaticVehicleEx(535,-1956.1000000,256.2000100,40.9000000,0.0000000, 2, 2, 15); //Slamvan
	SalesVehicle[40] = AddStaticVehicleEx(536,-1953.4004000,293.4003900,40.9000000,45.0000000, 2, 2, 15); //Blade
	SalesVehicle[41] = AddStaticVehicleEx(567,-1956.0000000,304.2998000,41.0000000,225.0000000, 2, 2, 15); //Savanna
	SalesVehicle[42] = AddStaticVehicleEx(550,-1956.0000000,264.5000000,41.0000000,315.0000000, 2, 2, 15); //Sunrise
	//------------------------------------------------------------------------- > OTTO'S CARS
	SalesVehicle[43] = AddStaticVehicleEx(402,-1647.5000000,1206.0000000,13.6000000,45.0000000, 3, 3, 15); //Buffalo
	SalesVehicle[44] = AddStaticVehicleEx(477,-1665.3000000,1224.3000000,13.5000000,180.0000000, 3, 3, 15); //ZR-350
	SalesVehicle[45] = AddStaticVehicleEx(506,-1679.4004000,1209.7002000,13.5000000,267.9950000, 3, 3, 15); //Super GT
	SalesVehicle[46] = AddStaticVehicleEx(603,-1656.8000000,1215.5000000,13.7000000,130.0000000, 3, 3, 15); //Phoenix
	SalesVehicle[47] = AddStaticVehicleEx(429,-1667.5000000,1216.0000000,7.0000000,250.0000000, 3, 3, 15); //Banshee
	SalesVehicle[48] = AddStaticVehicleEx(480,-1669.1000000,1206.1000000,7.1000000,320.0000000, 3, 3, 15); //Comet
	SalesVehicle[49] = AddStaticVehicleEx(560,-1679.3000000,1210.0000000,21.0000000,270.0000000, 3, 3, 15); //Sultan
	SalesVehicle[50] = AddStaticVehicleEx(562,-1665.7000000,1223.7000000,20.9000000,180.0000000, 3, 3, 15); //Elegy
	SalesVehicle[51] = AddStaticVehicleEx(565,-1646.5000000,1205.0000000,20.8000000,74.9980000, 3, 3, 15); //Flash
	SalesVehicle[52] = AddStaticVehicleEx(559,-1664.4004000,1205.0996000,20.9000000,0.0000000, 3, 3, 15); //Jester
	SalesVehicle[53] = AddStaticVehicleEx(558,-1655.0000000,1213.2000000,20.9000000,180.0000000, 3, 3, 15); //Uranus
	SalesVehicle[54] = AddStaticVehicleEx(561,-1658.7000000,1205.6000000,21.1000000,0.0000000, 3, 3, 15); //Stratum
	//------------------------------------------------------------------------- > DONATE CARS
	SalesVehicle[55] = AddStaticVehicleEx(411,564.2999900,-1289.5000000,17.0000000,0.0000000, 6, 6, 15); //Infernus
	SalesVehicle[56] = AddStaticVehicleEx(415,551.2000100,-1263.8000000,17.1000000,215.0000000, 6, 6, 15); //Cheetah
	SalesVehicle[57] = AddStaticVehicleEx(451,554.2999900,-1289.5000000,17.0000000,0.0000000, 6, 6, 15); //Turismo
	SalesVehicle[58] = AddStaticVehicleEx(541,543.2000100,-1270.1000000,16.9000000,219.9960000, 6, 6, 15); //Bullet
	SalesVehicle[59] = AddStaticVehicleEx(495,544.2999900,-1289.5000000,17.8000000,0.0000000, 6, 6, 15); //Sandking
	//------------------------------------------------------------------------- > BIKES
	SalesVehicle[60] = AddStaticVehicleEx(462,1904.8000000,-1357.9000000,13.2000000,135.0000000, 16, 16, 15); //Faggio
	SalesVehicle[61] = AddStaticVehicleEx(463,1909.1000000,-1362.9000000,13.1000000,135.0000000, 16, 16, 15); //Freeway
	SalesVehicle[62] = AddStaticVehicleEx(468,1913.1000000,-1358.8000000,13.3000000,134.9950000, 16, 16, 15); //Sanchez
	SalesVehicle[63] = AddStaticVehicleEx(471,1911.7000000,-1365.5000000,13.1000000,135.0000000, 16, 16, 15); //Quad
	SalesVehicle[64] = AddStaticVehicleEx(521,1920.0000000,-1365.7000000,13.2000000,135.0000000, 16, 16, 15); //FCR-900
	SalesVehicle[65] = AddStaticVehicleEx(522,1908.9000000,-1354.0000000,13.2000000,180.0000000, 6, 6, 15); //NRG-500
	SalesVehicle[66] = AddStaticVehicleEx(581,1915.6000000,-1361.3000000,13.2000000,135.0000000, 16, 16, 15); //BF-400
	SalesVehicle[67] = AddStaticVehicleEx(586,1906.7000000,-1360.5000000,13.1000000,135.0000000, 16, 16, 15); //Wayfarer
	SalesVehicle[68] = AddStaticVehicleEx(461,1917.9000000,-1363.6000000,13.2000000,135.0000000, 16, 16, 15); //PCJ-600
	SalesVehicle[69] = AddStaticVehicleEx(481,1883.5000000,-1369.6000000,13.2000000,135.0000000, 16, 16, 15); //BMX
	SalesVehicle[70] = AddStaticVehicleEx(510,1887.6000000,-1369.7000000,13.3000000,135.0000000, 16, 16, 15); //Mountain Bike
	//------------------------------------------------------------------------- > BOATS
	SalesVehicle[71] = AddStaticVehicleEx(493,-2231.7002000,2392.6006000,0.6637900,45.0000000, 6, 6, 15); //Jetmax
	SalesVehicle[72] = AddStaticVehicleEx(452,-2211.3000000,2413.2000000,0.0000000,45.0000000, 6, 6, 15); //Speeder
	SalesVehicle[73] = AddStaticVehicleEx(453,-2260.7000000,2421.1001000,0.0000000,225.0000000, 1, 1, 15); //Reefer
	SalesVehicle[74] = AddStaticVehicleEx(454,-2252.3000000,2429.3000000,0.0000000,225.0000000, 1, 1, 15); //Tropic
	SalesVehicle[75] = AddStaticVehicleEx(595,-2238.3000000,2440.5000000,0.0000000,225.0000000, 1, 1, 15); //Launch
	SalesVehicle[76] = AddStaticVehicleEx(484,-2232.7000000,2448.8000000,0.0000000,225.0000000, 1, 1, 15); //Marquis
	SalesVehicle[77] = AddStaticVehicleEx(473,-2204.8999000,2420.2000000,0.0000000,45.0000000, 1, 1, 15); //Dinghy
	SalesVehicle[78] = AddStaticVehicleEx(446,-2224.5000000,2400.2002000,0.0000000,45.0000000, 1, 1, 15); //Squalo
	SalesVehicle[79] = AddStaticVehicleEx(417,-2319.5000000,2323.8000000,0.0000000,180.0000000, 1, 1, 15); //Leviathan
	SalesVehicle[80] = AddStaticVehicleEx(447,-2319.5000000,2309.5000000,0.0000000,180.0000000, 1, 1, 15); //Seasparrow
	SalesVehicle[81] = AddStaticVehicleEx(460,-2319.3999000,2297.6001000,0.0000000,180.0000000, 1, 1, 15); //Skimmer
	//------------------------------------------------------------------------- > AIRPLANES
	SalesVehicle[82] = AddStaticVehicleEx(469,290.2002000,2535.7002000,16.9000000,180.0000000, 1, 1, 15); //Sparrow
	SalesVehicle[83] = AddStaticVehicleEx(476,325.7998000,2538.1006000,17.5567800,180.0000000, 1, 1, 15); //Rustler
	SalesVehicle[84] = AddStaticVehicleEx(512,290.7002000,2474.2002000,17.1000000,0.0000000, 1, 1, 15); //Cropdust
	SalesVehicle[85] = AddStaticVehicleEx(513,324.5996100,2474.7002000,17.3000000,0.0000000, 1, 1, 15); //Stunt
	SalesVehicle[86] = AddStaticVehicleEx(593,209.9003900,2474.2002000,17.0000000,0.0000000, 1, 1, 15); //Dodo
	SalesVehicle[87] = AddStaticVehicleEx(511,244.5000000,2471.5000000,18.0000000,0.0000000, 1, 1, 15); //Beagle
	SalesVehicle[88] = AddStaticVehicleEx(487,365.1000100,2536.5000000,16.9000000,180.0000000, 6, 6, 15); //Maverick
 	//------------------------------------------------------------------------ > POLICE VEHICLES
 	policecar[0] = AddStaticVehicleEx(596,1570.3000000,-1710.2000000,5.7000000,0.0000000,-1,-1,300); //Police Car (LSPD)
	policecar[1] = AddStaticVehicleEx(596,1574.4000000,-1710.2000000,5.7000000,0.0000000,-1,-1,300); //Police Car (LSPD)
	policecar[2] = AddStaticVehicleEx(596,1578.5000000,-1710.2000000,5.7000000,0.0000000,-1,-1,300); //Police Car (LSPD)
	policecar[3] = AddStaticVehicleEx(596,1583.5000000,-1710.2000000,5.7000000,0.0000000,-1,-1,300); //Police Car (LSPD)
	policecar[4] = AddStaticVehicleEx(596,1587.4000000,-1710.2000000,5.7000000,0.0000000,-1,-1,300); //Police Car (LSPD)
	policecar[5] = AddStaticVehicleEx(596,1591.5000000,-1710.2000000,5.7000000,0.0000000,-1,-1,300); //Police Car (LSPD)
	policecar[6] = AddStaticVehicleEx(596,1595.5000000,-1710.2000000,5.7000000,0.0000000,-1,-1,300); //Police Car (LSPD)
	policecar[7] = AddStaticVehicleEx(523,1601.5000000,-1704.2000000,5.6000000,90.0000000,-1,-1,300); //HPV1000
	policecar[8] = AddStaticVehicleEx(523,1601.5000000,-1700.2000000,5.6000000,90.0000000,-1,-1,300); //HPV1000
	policecar[9] = AddStaticVehicleEx(523,1601.5000000,-1696.1000000,5.6000000,90.0000000,-1,-1,300); //HPV1000
	policecar[10] = AddStaticVehicleEx(523,1601.5000000,-1692.0000000,5.6000000,90.0000000,-1,-1,300); //HPV1000
	policecar[11] = AddStaticVehicleEx(523,1601.5000000,-1688.1000000,5.6000000,90.0000000,-1,-1,300); //HPV1000
	policecar[12] = AddStaticVehicleEx(523,1601.5000000,-1684.1000000,5.6000000,90.0000000,-1,-1,300); //HPV1000
	//------------------------------------------------------------------------ > GROVE STREET FAMILIES CAR
	gsfcar[0] = AddStaticVehicleEx(567,2506.3000000,-1676.4000000,13.4786400,325.0000000,128,1,300); //Savanna
	gsfcar[1] = AddStaticVehicleEx(567,2508.0000000,-1665.5000000,13.3786400,11.5000000,128,1,300); //Savanna
	gsfcar[2] = AddStaticVehicleEx(492,2517.2000000,-1672.2000000,14.1682800,62.0000000,128,1,300); //Greenwood
	gsfcar[3] = AddStaticVehicleEx(412,2501.8000000,-1657.2000000,13.3000000,57.2500000,128,1,300); //Voodoo
	gsfcar[4] = AddStaticVehicleEx(412,2491.5000000,-1655.2000000,13.3000000,90.0000000,128,1,300); //Voodoo
	gsfcar[5] = AddStaticVehicleEx(468,2494.3000000,-1682.7000000,13.1000000,0.0000000,128,1,300); //Sanchez
	gsfcar[6] = AddStaticVehicleEx(468,2491.3000000,-1682.7000000,13.1000000,0.0000000,128,1,300); //Sanchez
	gsfcar[7] = AddStaticVehicleEx(468,2488.3000000,-1682.8000000,13.1000000,0.0000000,128,1,300); //Sanchez
	//------------------------------------------------------------------------ > BALLAS CAR
	ballascar[0] = AddStaticVehicleEx(566,2051.8000000,-1118.0000000,24.8000000,180.0000000,147,1,300); //Tahoma
	ballascar[1] = AddStaticVehicleEx(517,2046.1000000,-1130.1000000,23.9000000,90.0000000,147,1,300); //Majestic
	ballascar[2] = AddStaticVehicleEx(517,2037.1000000,-1130.1000000,24.2000000,90.0000000,147,1,300); //Majestic
	ballascar[3] = AddStaticVehicleEx(412,2046.1000000,-1141.9000000,24.0000000,90.0000000,147,1,300); //Voodoo
	ballascar[4] = AddStaticVehicleEx(412,2037.1000000,-1141.9004000,24.2000000,90.0000000,147,1,300); //Voodoo
	ballascar[5] = AddStaticVehicleEx(468,2048.3999000,-1111.6000000,25.4000000,215.0000000,147,1,300); //Sanchez
	ballascar[6] = AddStaticVehicleEx(468,2049.8999000,-1110.2000000,25.4000000,214.9970000,147,1,300); //Sanchez
	ballascar[7] = AddStaticVehicleEx(468,2055.1001000,-1113.2000000,25.1000000,135.0000000,147,1,300); //Sanchez
	//------------------------------------------------------------------------ > VARRIOS LOS AZTECAS CAR
	vlacar[0] = AddStaticVehicleEx(466,1699.0000000,-2100.0000000,13.5000000,180.0000000,135,1,300); //Glendale
	vlacar[1] = AddStaticVehicleEx(575,1693.2000000,-2107.2000000,13.3000000,90.0000000,135,1,300); //Broadway
	vlacar[2] = AddStaticVehicleEx(575,1684.2000000,-2107.2000000,13.3000000,270.0000000,135,1,300); //Broadway
	vlacar[3] = AddStaticVehicleEx(474,1693.2000000,-2118.7000000,13.3000000,90.0000000,135,1,300); //Hermes
	vlacar[4] = AddStaticVehicleEx(474,1684.2002000,-2118.7000000,13.6117400,270.0000000,135,1,300); //Hermes
	vlacar[5] = AddStaticVehicleEx(468,1696.5000000,-2091.8000000,13.3000000,180.0000000,135,1,300); //Sanchez
	vlacar[6] = AddStaticVehicleEx(468,1699.0000000,-2091.8000000,13.3000000,180.0000000,135,1,300); //Sanchez
	vlacar[7] = AddStaticVehicleEx(468,1701.5000000,-2091.8999000,13.3000000,180.0000000,135,1,300); //Sanchez
	//------------------------------------------------------------------------ > LOS SANTOS VAGOS CAR
	lsvcar[0] = AddStaticVehicleEx(576,2828.5000000,-1193.5000000,24.9000000,315.0000000,6,1,300); //Tornado
	lsvcar[1] = AddStaticVehicleEx(576,2828.5000000,-1198.5000000,24.9000000,315.0000000,6,1,300); //Tornado
	lsvcar[2] = AddStaticVehicleEx(474,2827.3000000,-1171.8000000,24.9000000,225.0000000,6,1,300); //Hermes
	lsvcar[3] = AddStaticVehicleEx(474,2827.3000000,-1166.2000000,24.9000000,225.0000000,6,1,300); //Hermes
	lsvcar[4] = AddStaticVehicleEx(467,2820.2000000,-1186.1000000,25.2196100,315.0000000,6,1,300); //Oceanic
	lsvcar[5] = AddStaticVehicleEx(468,2822.3999000,-1178.1000000,25.0000000,225.0000000,6,1,300); //Sanchez
	lsvcar[6] = AddStaticVehicleEx(468,2818.8999000,-1178.1000000,25.0000000,225.0000000,6,1,300); //Sanchez
	lsvcar[7] = AddStaticVehicleEx(468,2814.9004000,-1178.0996000,25.0000000,225.0000000,6,1,300); //Sanchez
	//------------------------------------------------------------------------ > DETECTIVE JOB VEHICLES
	detectivecar[0] = AddStaticVehicleEx(540,1538.0000000,-1478.0000000,9.5000000,0.0000000,0,0,300); //Vincent
	detectivecar[1] = AddStaticVehicleEx(540,1526.0000000,-1478.0000000,9.5000000,0.0000000,0,0,300); //Vincent
	detectivecar[2] = AddStaticVehicleEx(540,1534.0000000,-1478.0000000,9.5000000,0.0000000,0,0,300); //Vincent
	detectivecar[3] = AddStaticVehicleEx(540,1530.0000000,-1478.0000000,9.5000000,0.0000000,0,0,300); //Vincent
	detectivecar[4] = AddStaticVehicleEx(496,1512.5000000,-1480.5000000,9.3000000,270.0000000,0,0,300); //Blista Compact
	detectivecar[5] = AddStaticVehicleEx(496,1512.5000000,-1476.5000000,9.3000000,270.0000000,0,0,300); //Blista Compact
	detectivecar[6] = AddStaticVehicleEx(496,1512.5000000,-1472.5000000,9.3000000,270.0000000,0,0,300); //Blista Compact
	detectivecar[7] = AddStaticVehicleEx(496,1512.5000000,-1468.5000000,9.3000000,270.0000000,0,0,300); //Blista Compact
	detectivecar[8] = AddStaticVehicleEx(480,1526.0000000,-1460.5996000,9.4000000,180.0000000,0,0,300); //Comet
	detectivecar[8] = AddStaticVehicleEx(480,1514.0000000,-1460.5996000,9.4000000,180.0000000,0,0,300); //Comet
	detectivecar[10] = AddStaticVehicleEx(480,1518.0000000,-1460.5996000,9.4000000,180.0000000,0,0,300); //Comet
	detectivecar[11] = AddStaticVehicleEx(480,1521.9003900,-1460.5996100,9.4000000,180.0000000,0,0,300); //Comet
	//------------------------------------------------------------------------ > TRUCK JOB VEHICLES
	truckmancar[0] = AddStaticVehicleEx(403, -76.5750, -1107.6896, 1.6378, 170.0000, 130, 1, 180);
	truckmancar[1] = AddStaticVehicleEx(403, -71.9798, -1109.8821, 1.6378, 170.0000, 130, 1, 180);
	truckmancar[2] = AddStaticVehicleEx(403, -67.2076, -1111.9878, 1.6378, 170.0000, 130, 1, 180);
	truckmancar[3] = AddStaticVehicleEx(403, -62.6656, -1114.1517, 1.6378, 170.0000, 130, 1, 180);
	truckmancar[4] = AddStaticVehicleEx(403, -57.9881, -1116.4633, 1.6378, 170.0000, 130, 1, 180);

	truckmancar[5] = AddStaticVehicleEx(456, -53.6569, -1147.3914, 1.2086, -10.0000, 130, 1, 180);
	truckmancar[6] = AddStaticVehicleEx(456, -58.2421, -1145.2887, 1.2086, -10.0000, 130, 1, 180);
	truckmancar[7] = AddStaticVehicleEx(456, -62.8807, -1143.1792, 1.2086, -10.0000, 130, 1, 180);
	truckmancar[8] = AddStaticVehicleEx(456, -67.7175, -1140.8765, 1.2086, -10.0000, 130, 1, 180);
	truckmancar[9] = AddStaticVehicleEx(456, -72.1947, -1138.7968, 1.2086, -10.0000, 130, 1, 180);

	truckmancar[10] = AddStaticVehicleEx(403, 2451.8879, -2107.6772, 14.0399, 0.0000, 130, 1, 180);
	truckmancar[11] = AddStaticVehicleEx(403, 2457.3877, -2107.6772, 14.0399, 0.0000, 130, 1, 180);
	truckmancar[12] = AddStaticVehicleEx(403, 2462.8494, -2107.6772, 14.0399, 0.0000, 130, 1, 180);
	truckmancar[13] = AddStaticVehicleEx(403, 2468.3308, -2107.6772, 14.0399, 0.0000, 130, 1, 180);

	AddStaticVehicleEx(435, -52.6523, -1115.4871, 1.6378, 170.0000, 130, 1, 30);
	AddStaticVehicleEx(435, -48.1225, -1118.3649, 1.6378, 170.0000, 130, 1, 30);
	AddStaticVehicleEx(435, -43.8281, -1120.8890, 1.6378, 170.0000, 130, 1, 30);
	AddStaticVehicleEx(435, -39.3204, -1123.5275, 1.6378, 170.0000, 130, 1, 30);
	AddStaticVehicleEx(435, -34.5802, -1126.0444, 1.6378, 170.0000, 130, 1, 30);

	AddStaticVehicleEx(584, 2435.3862, -2075.4248, 14.5700, 180.0000, -1, -1, 30);
	AddStaticVehicleEx(584, 2440.4309, -2075.4248, 14.5700, 180.0000, -1, -1, 30);
	AddStaticVehicleEx(584, 2455.9026, -2075.4248, 14.5700, 180.0000, -1, -1, 30);
	AddStaticVehicleEx(584, 2460.9409, -2075.4248, 14.5700, 180.0000, -1, -1, 30);

	CreateDynamicObject(3242, -40.70499, -1153.36694, 1.90600,   0.00000, 0.00000, 240.87029);
	CreateDynamicObject(18285, -67.12770, -1110.97278, 0.11000,   0.00000, -0.35000, 0.00000);
	CreateDynamicObject(18285, -43.40746, -1119.45483, 0.11000,   0.00000, -0.35000, 0.00000);
	CreateDynamicObject(18285, -63.12856, -1144.29199, 0.11000,   0.00000, -0.35000, 0.00000);

	CreateDynamicObject(9958, -3086.78784, 1802.47461, -15.00000,   0.00000, 0.00000, 90.00000);
	//------------------------------------------------------------------------ > TAXI JOB VEHICLES
	taxicar[0] = AddStaticVehicleEx(420,1098.5000000,-1754.9000000,13.2000000,90.0000000,6,1,180); //Taxi
	taxicar[1] = AddStaticVehicleEx(420,1098.5000000,-1760.9000000,13.2000000,90.0000000,6,1,180); //Taxi
	taxicar[2] = AddStaticVehicleEx(420,1098.5000000,-1766.7000000,13.2000000,90.0000000,6,1,180); //Taxi
	taxicar[3] = AddStaticVehicleEx(420,1098.5000000,-1772.6000000,13.2000000,90.0000000,6,1,180); //Taxi
	taxicar[4] = AddStaticVehicleEx(409,1080.9000000,-1757.9000000,13.3000000,90.0000000,6,1,180); //Stretch
	taxicar[5] = AddStaticVehicleEx(409,1080.9000000,-1763.8000000,13.3000000,90.0000000,6,1,180); //Stretch
	taxicar[6] = AddStaticVehicleEx(409,1080.9000000,-1769.7000000,13.3000000,90.0000000,6,1,180); //Stretch
	taxicar[7] = AddStaticVehicleEx(409,1080.9000000,-1775.6000000,13.3000000,90.0000000,6,1,180); //Stretch
	taxicar[8] = AddStaticVehicleEx(438,1062.5000000,-1772.6000000,13.6000000,270.0000000,6,1,180); //Cabbie
	taxicar[9] = AddStaticVehicleEx(438,1062.5000000,-1766.7000000,13.6000000,270.0000000,6,1,180); //Cabbie
	taxicar[10] = AddStaticVehicleEx(438,1062.5000000,-1760.9000000,13.6000000,270.0000000,6,1,180); //Cabbie
	taxicar[11] = AddStaticVehicleEx(438,1062.5000000,-1754.9000000,13.6000000,270.0000000,6,1,180); //Cabbie
	taxicar[12] = AddStaticVehicleEx(438,1062.5000000,-1749.1000000,13.6000000,270.0000000,6,1,180); //Cabbie
	taxicar[13] = AddStaticVehicleEx(438,1062.5000000,-1743.1000000,13.6000000,270.0000000,6,1,180); //Cabbie
	taxicar[14] = AddStaticVehicleEx(438,1062.5000000,-1737.3000000,13.6000000,270.0000000,6,1,180); //Cabbie
	//------------------------------------------------------------------------ > MECHANIC JOB VEHICLES
	mechaniccar[0] = AddStaticVehicleEx(525, 2510.0000, -1470.3000, 24.5507, 0.0000, 1, 0, 180);
	mechaniccar[1] = AddStaticVehicleEx(525, 2515.0000, -1470.3000, 24.5507, 0.0000, 1, 0, 180);
	mechaniccar[2] = AddStaticVehicleEx(525, 2520.0000, -1470.3000, 24.5507, 0.0000, 1, 0, 180);
	mechaniccar[3] = AddStaticVehicleEx(525, 2525.0000, -1470.3000, 24.5507, 0.0000, 1, 0, 180);
	mechaniccar[4] = AddStaticVehicleEx(525, 2530.0000, -1470.3000, 24.5507, 0.0000, 1, 0, 180);
	//------------------------------------------------------------------------ > SANITARY DEPARTMENT VEHICLES
	sanitarycar[0] = AddStaticVehicleEx(408, 1086.1224, -1217.6094, 18.4202, 0.0000, 6, 6, 300);
	sanitarycar[1] = AddStaticVehicleEx(408, 1092.0172, -1217.6094, 18.4202, 0.0000, 6, 6, 300);
	sanitarycar[2] = AddStaticVehicleEx(408, 1097.7815, -1217.6094, 18.4202, 0.0000, 6, 6, 300);
	sanitarycar[3] = AddStaticVehicleEx(408, 1103.5643, -1217.6094, 18.4202, 0.0000, 6, 6, 300);
	sanitarycar[4] = AddStaticVehicleEx(408, 1109.3540, -1217.6094, 18.4202, 0.0000, 6, 6, 300);
	sanitarycar[5] = AddStaticVehicleEx(552, 1086.1224, -1230.0000, 16.0093, 180.0000, 6, 6, 300);
	sanitarycar[6] = AddStaticVehicleEx(552, 1092.0172, -1230.0000, 16.0093, 180.0000, 6, 6, 300);
	sanitarycar[7] = AddStaticVehicleEx(552, 1097.7815, -1230.0000, 16.0093, 180.0000, 6, 6, 300);
	sanitarycar[8] = AddStaticVehicleEx(552, 1109.3540, -1230.0000, 16.0093, 180.0000, 6, 6, 300);
	sanitarycar[9] = AddStaticVehicleEx(552, 1103.5643, -1230.0000, 16.0093, 180.0000, 6, 6, 300);
	sanitarycar[10] = AddStaticVehicleEx(574, 1086.1224, -1248.8627, 16.0000, 0.0000, 6, 6, 300);
	sanitarycar[11] = AddStaticVehicleEx(574, 1092.0172, -1248.8627, 16.0000, 0.0000, 6, 6, 300);
	sanitarycar[12] = AddStaticVehicleEx(574, 1097.7815, -1248.8627, 16.0000, 0.0000, 6, 6, 300);
	sanitarycar[13] = AddStaticVehicleEx(574, 1103.5643, -1248.8627, 16.0000, 0.0000, 6, 6, 300);
	sanitarycar[14] = AddStaticVehicleEx(574, 1109.3540, -1248.8627, 16.0000, 0.0000, 6, 6, 300);
	AddStaticVehicleEx(611, 1109.3540, -1224.0422, 16.0000, 180.0000, 6, 6, 300);
	AddStaticVehicleEx(611, 1103.5643, -1224.0422, 16.0000, 180.0000, 6, 6, 300);
	AddStaticVehicleEx(611, 1097.7815, -1224.0422, 16.0000, 180.0000, 6, 6, 300);
	AddStaticVehicleEx(611, 1092.0172, -1224.0422, 16.0000, 180.0000, 6, 6, 300);
	AddStaticVehicleEx(611, 1086.1224, -1224.0422, 16.0000, 180.0000, 6, 6, 300);
	//------------------------------------------------------------------------ > SMUGGLER VEHICLES
	smugglercar[0] = AddStaticVehicleEx(403, 2235.1880, -2245.2866, 14.0756, 45.0000, 0, 0, 180);
	smugglercar[1] = AddStaticVehicleEx(403, 2219.9524, -2260.2229, 14.0756, 45.0000, 0, 0, 180);
	smugglercar[2] = AddStaticVehicleEx(403, 2227.3271, -2252.9229, 14.0756, 45.0000, 0, 0, 180);
	smugglercar[3] = AddStaticVehicleEx(403, 2212.5017, -2267.4001, 14.0756, 45.0000, 0, 0, 180);
	smugglercar[4] = AddStaticVehicleEx(403, 2204.9531, -2274.8533, 14.0756, 45.0000, 0, 0, 180);
	AddStaticVehicleEx(435, 2205.5205, -2208.9104, 14.0756, -135.0000, 0, 0, 30);
	AddStaticVehicleEx(435, 2201.8926, -2212.5676, 14.0756, -135.0000, 0, 0, 30);
	AddStaticVehicleEx(435, 2198.2754, -2216.1721, 14.0756, -135.0000, 0, 0, 30);
	AddStaticVehicleEx(435, 2194.6257, -2219.8667, 14.0756, -135.0000, 0, 0, 30);
	AddStaticVehicleEx(435, 2191.0129, -2223.5305, 14.0756, -135.0000, 0, 0, 30);
	AddStaticVehicleEx(435, 2187.2588, -2227.3979, 14.0756, -135.0000, 0, 0, 30);
	//------------------------------------------------------------------------ > BURG PUMP
	//AddStaticVehicleEx(584,1001.2000000,-904.2000100,43.3000000,90.0000000,245,245,15); //Trailer 3
	//AddStaticVehicleEx(514,991.0000000,-904.2000100,42.9000000,90.0000000,34,25,15); //Tanker
	CreateDynamicObject(1676,1009.5500000,-936.0600000,42.9000000,0.0000000,0.0000000,6.0000000); //object(washgaspump) (1)
	CreateDynamicObject(1676,1005.2000000,-936.7399900,42.9000000,0.0000000,0.0000000,5.9990000); //object(washgaspump) (5)
	CreateDynamicObject(1676,1002.6500000,-936.9600200,42.9000000,0.0000000,0.0000000,5.9990000); //object(washgaspump) (6)
	CreateDynamicObject(1676,998.2199700,-937.7199700,42.9000000,0.0000000,0.0000000,5.9990000); //object(washgaspump) (7)
	CreateDynamicObject(979,1006.4000000,-935.9000200,42.0000000,0.0000000,0.0000000,6.5000000); //object(sub_roadleft) (1)
	CreateDynamicObject(979,1001.1000000,-936.5000000,42.0000000,0.0000000,0.0000000,6.4990000); //object(sub_roadleft) (2)
	CreateDynamicObject(979,1001.0996000,-936.5000000,42.0000000,0.0000000,0.0000000,6.4990000); //object(sub_roadleft) (3)
	CreateDynamicObject(979,1001.0996000,-937.9000200,42.0000000,0.0000000,0.0000000,186.4980000); //object(sub_roadleft) (5)
	CreateDynamicObject(979,1006.4000000,-937.2999900,42.0000000,0.0000000,0.0000000,186.4980000); //object(sub_roadleft) (4)
	//------------------------------------------------------------------------ > CITY PUMP
	//AddStaticVehicleEx(403,1938.1000000,-1785.2000000,14.1000000,180.0000000,45,58,15); //Linerunner
	//AddStaticVehicleEx(584,1938.2000000,-1775.1000000,14.5000000,180.0000000,245,245,15); //Trailer 3
	CreateDynamicObject(979,1942.2000000,-1777.6000000,13.2000000,0.0000000,0.0000000,270.0000000); //object(sub_roadleft) (1)
	CreateDynamicObject(979,1940.9000000,-1768.3000000,13.2000000,0.0000000,0.0000000,90.0000000); //object(sub_roadleft) (2)
	CreateDynamicObject(979,1940.9000000,-1777.6000000,13.2000000,0.0000000,0.0000000,90.0000000); //object(sub_roadleft) (3)
	CreateDynamicObject(979,1942.2002000,-1768.3000000,13.2000000,0.0000000,0.0000000,269.9950000); //object(sub_roadleft) (4)
	//------------------------------------------------------------------------ > TRUCK PUMP
	//AddStaticVehicleEx(403,-87.0000000,-1159.9004000,2.7000000,335.9950000,71,53,15); //Linerunner
	//AddStaticVehicleEx(584,-91.2998000,-1169.2998000,3.0000000,333.9950000,245,245,15); //Trailer 3
	CreateDynamicObject(979,-96.4000000,-1170.6000000,2.2000000,0.0000000,0.0000000,68.0000000); //object(sub_roadleft) (3)
	CreateDynamicObject(979,-93.8000000,-1164.1000000,2.2000000,0.0000000,0.0000000,68.2500000); //object(sub_roadleft) (4)
	CreateDynamicObject(979,-95.4000000,-1171.1000000,2.2000000,0.0000000,0.0000000,247.2500000); //object(sub_roadleft) (5)
	CreateDynamicObject(979,-92.7000000,-1164.7000000,2.2000000,0.0000000,0.0000000,246.7470000); //object(sub_roadleft) (6)
	CreateDynamicObject(979,-89.4000000,-1173.5000000,2.2000000,0.0000000,0.0000000,68.0000000); //object(sub_roadleft) (7)
	CreateDynamicObject(979,-86.8000000,-1167.0000000,2.2000000,0.0000000,0.0000000,68.2500000); //object(sub_roadleft) (8)
	CreateDynamicObject(979,-88.2000000,-1173.9000000,2.1900000,0.0000000,0.0000000,247.5000000); //object(sub_roadleft) (9)
	CreateDynamicObject(979,-85.5000000,-1167.5000000,2.2000000,0.0000000,0.0000000,246.7440000); //object(sub_roadleft) (10)

 	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(IsASalesVehicle(i))
	    {
	        new Float:X, Float:Y, Float:Z;
			GetVehiclePos(i, X, Y, Z);
	        new model[24];
			GetVehicleName(i, model, sizeof(model));
			new vehstr[512];
	        format(vehstr, sizeof(vehstr), "Vozilo na prodaju! \n "PLAVA"Model"BELA": %s ( %d ) \n "PLAVA"Cena"BELA": %d$ \n Da kupite ovo vozilo \n udjite u njega i kucajte \n "PLAVA"/v buy", model, GetVehicleModel(i),GetVehiclePrice(i));
			VehicleLabel[i] = Create3DTextLabel(vehstr, -1, X, Y, Z, 10, 0, 0);
	        Attach3DTextLabelToVehicle(VehicleLabel[i], i, 0, 0, 0);
		}
	}

    for(new idx = 1; idx < sizeof(BusinessInfo); idx++)
    {
        format(str, sizeof(str), BPATH, idx);
        INI_ParseFile(str, "LoadBusiness_%s", .bExtra = true, .extra = idx );
        BusinessInfo[idx][bIcon] = CreatePickup(1274, 1, BusinessInfo[idx][bEnterX], BusinessInfo[idx][bEnterY], BusinessInfo[idx][bEnterZ], BusinessInfo[idx][bVW]);
		if(BusinessInfo[idx][bOwned] == 0)
		{
		    new str1[256];
		    format(str1, sizeof(str1), "Ovaj biznis nema vlasnika!\n"PLAVA"Ime"BELA": %s\n"PLAVA"ID"BELA": %d\n"PLAVA"Cena"BELA": %d\n"BELA"Da kupite biznis, kucajte /b buy", BusinessInfo[idx][bName], BusinessInfo[idx][bID], BusinessInfo[idx][bPrice]);
		    BusinessLabelArray[idx] = Create3DTextLabel(str1, -1, BusinessInfo[idx][bEnterX], BusinessInfo[idx][bEnterY], BusinessInfo[idx][bEnterZ], 20.0, BusinessInfo[idx][bVW], 0);
		}
		if(BusinessInfo[idx][bOwned] == 1)
		{
		    new str2[512];
		    format(str2, sizeof(str2), ""BELA"Ovaj biznis ima vlasnika!\n "PLAVA"Ime"BELA": %s\n"PLAVA"ID"BELA": %d\n"PLAVA"Vlasnik"BELA": %s\n"PLAVA"Cena ulaza"BELA": %d", BusinessInfo[idx][bName], BusinessInfo[idx][bID], BusinessInfo[idx][bOwner], BusinessInfo[idx][bEnterFee]);
		    BusinessLabelArray[idx] = Create3DTextLabel(str2, -1, BusinessInfo[idx][bEnterX], BusinessInfo[idx][bEnterY], BusinessInfo[idx][bEnterZ], 20.0, BusinessInfo[idx][bVW], 0);
		}
	}

	for(new idx = 1; idx < sizeof(SpecBusinessInfo); idx++)
    {
        format(str, sizeof(str), SBPATH, idx);
        INI_ParseFile(str, "LoadSpecBusiness_%s", .bExtra = true, .extra = idx );
        SpecBusinessInfo[idx][sbIcon] = CreatePickup(1239, 1, SpecBusinessInfo[idx][sbEnterX], SpecBusinessInfo[idx][sbEnterY], SpecBusinessInfo[idx][sbEnterZ], -1);
		if(SpecBusinessInfo[idx][sbOwned] == 0)
		{
		    new str1[256];
		    format(str1, sizeof(str1), ""BELA"Ovaj biznis nema vlasnika! \n"CRVENA"ID"BELA": %d \nZa vise informacija posetite forum!", SpecBusinessInfo[idx][sbID]);
		    SpecBusinessLabelArray[idx] = Create3DTextLabel(str1, -1, SpecBusinessInfo[idx][sbEnterX], SpecBusinessInfo[idx][sbEnterY], SpecBusinessInfo[idx][sbEnterZ], 10.0, 0, 0);
		}
		if(SpecBusinessInfo[idx][sbOwned] == 1)
		{
		    new str2[512];
		    format(str2, sizeof(str2), ""PLAVA"Vlasnik"BELA": %s \n"CRVENA"ID"BELA":%d \n %s", SpecBusinessInfo[idx][sbOwner], SpecBusinessInfo[idx][sbID], SpecBusinessInfo[idx][sbDescription]);
		    SpecBusinessLabelArray[idx] = Create3DTextLabel(str2, -1, SpecBusinessInfo[idx][sbEnterX], SpecBusinessInfo[idx][sbEnterY], SpecBusinessInfo[idx][sbEnterZ], 10.0, 0, 0);
		}
	}

	for(new idx = 1; idx < sizeof(HouseInfo); idx++)
    {
        format(str, sizeof(str), HPATH, idx);
        INI_ParseFile(str, "LoadHouse_%s", .bExtra = true, .extra = idx );
		if(HouseInfo[idx][hOwned] == 0)
		{
		    new str1[256];
		    format(str1, sizeof(str1), ""BELA" Ova kuca nema vlasnika !\n "PLAVA"ID kuce"BELA": %d \n "PLAVA"Cena kuce"BELA": %d \n Da kupite ovu kucu \n kucajte "PLAVA"/buyhouse", HouseInfo[idx][hID], HouseInfo[idx][hPrice]);
        	HouseInfo[idx][hIcon] = CreatePickup(1273, 1, HouseInfo[idx][hEnterX], HouseInfo[idx][hEnterY], HouseInfo[idx][hEnterZ], HouseInfo[idx][hVW]);
			HouseLabelArray[idx] = Create3DTextLabel(str1, -1, HouseInfo[idx][hEnterX], HouseInfo[idx][hEnterY], HouseInfo[idx][hEnterZ], 10.0, HouseInfo[idx][hVW], 0);
		}
		else
		{
			new str2[256];
		    format(str2, sizeof(str2), ""BELA" Ova kuca ima vlasnika !\n "PLAVA"Vlasnik kuce"BELA": %s\n "PLAVA"ID Kuce"BELA": %d", HouseInfo[idx][hOwner], HouseInfo[idx][hID]);
            HouseInfo[idx][hIcon] = CreatePickup(1272, 1, HouseInfo[idx][hEnterX], HouseInfo[idx][hEnterY], HouseInfo[idx][hEnterZ], HouseInfo[idx][hVW]);
			HouseLabelArray[idx] = Create3DTextLabel(str2, -1, HouseInfo[idx][hEnterX], HouseInfo[idx][hEnterY], HouseInfo[idx][hEnterZ], 10.0, HouseInfo[idx][hVW], 0);
		}
	}

	for(new idx = 1; idx < sizeof(ApartmentInfo); idx++)
    {
        format(str, sizeof(str), APATH, idx);
        INI_ParseFile(str, "LoadApartment_%s", .bExtra = true, .extra = idx );
		if(ApartmentInfo[idx][aOwned] == 0)
		{
		    new str1[256];
		    format(str1, sizeof(str1), ""BELA" Ovaj stan nema vlasnika !\n "PLAVA"ID stana"BELA": %d \n "PLAVA"Cena stana"BELA": %d \n Da kupite ovaj stan\n kucajte "PLAVA"/buyapartment", ApartmentInfo[idx][aID], ApartmentInfo[idx][aPrice]);
        	ApartmentInfo[idx][aIcon] = CreatePickup(1273, 1, ApartmentInfo[idx][aEnterX], ApartmentInfo[idx][aEnterY], ApartmentInfo[idx][aEnterZ], ApartmentInfo[idx][aVW]);
			ApartmentLabelArray[idx] = Create3DTextLabel(str1, -1, ApartmentInfo[idx][aEnterX], ApartmentInfo[idx][aEnterY], ApartmentInfo[idx][aEnterZ], 10.0, ApartmentInfo[idx][aVW], 0);
		}
		else
		{
			new str2[256];
		    format(str2, sizeof(str2), ""BELA" Ovaj stan ima vlasnika !\n "PLAVA"Vlasnik stana"BELA": %s\n "PLAVA"ID Stana"BELA": %d", ApartmentInfo[idx][aOwner], ApartmentInfo[idx][aID]);
            ApartmentInfo[idx][aIcon] = CreatePickup(1272, 1, ApartmentInfo[idx][aEnterX], ApartmentInfo[idx][aEnterY], ApartmentInfo[idx][aEnterZ], ApartmentInfo[idx][aVW]);
			ApartmentLabelArray[idx] = Create3DTextLabel(str2, -1, ApartmentInfo[idx][aEnterX], ApartmentInfo[idx][aEnterY], ApartmentInfo[idx][aEnterZ], 10.0, ApartmentInfo[idx][aVW], 0);
		}
	}

	for(new v = 0; v < MAX_VEHICLES; v++)
	{
	    if(IsABike(v)) vFuel[v] = 30;
	    else vFuel[v] = 60;
	}

	CreatePickup(1314, 1, 2522.4756, -1679.2355, 15.4970, 0);
	Create3DTextLabel("Grove Street Families HQ", -1, 2522.4756, -1679.2355, 15.4970, 10.0, 0, 0);

	CreatePickup(1314, 1, 2045.5447, -1116.1219, 26.3617, 0);
	Create3DTextLabel("Ballas HQ", -1, 2045.5447, -1116.1219, 26.3617, 10.0, 0);

	CreatePickup(1314, 1, 1684.8185, -2099.0588, 13.8343, 0);
	Create3DTextLabel("Varrios Los Aztecas HQ", -1, 1684.8185, -2099.0588, 13.8343, 10.0, 0,0);

	CreatePickup(1314, 1, 2808.0615, -1189.7864, 25.3446, 0);
	Create3DTextLabel("Los Santos Vagos HQ", -1, 2808.0615, -1189.7864, 25.3446, 10.0, 0, 0);

    CreatePickup(1239, 1, 593.1841, -1249.7542, 18.2069, 0);
	Create3DTextLabel("Banka", -1, 593.1841, -1249.7542, 18.2069, 10.0, 0, 0);

    CreatePickup(1239, 1, 576.4832, -1273.1786, 995.6459, 0);
	Create3DTextLabel("Otvaranje racuna u banci \n/racun", -1, 576.4832, -1273.1786, 995.6459, 10.0, 0, 0);

    CreatePickup(1239, 1, 573.1008, -1287.5659, 995.6459, 0);
	Create3DTextLabel("Podizanje kredita \n/kredit", -1, 573.1008, -1287.5659, 995.6459, 10.0, 0, 0);

	CreatePickup(1239, 1, 573.1008, -1280.6031, 995.6459, 0);
	Create3DTextLabel("Vracanje kredita \n/vratikredit", -1, 573.0086, -1280.6031, 995.6459, 10.0, 0, 0);

    CreatePickup(1239, 1, 573.1008, -1265.4025, 995.6459, 0);
	Create3DTextLabel("Salter 1 \nStavljanje i uzimanje novca sa racuna", -1, 573.1008, -1265.4025, 995.6459, 10.0, 0, 0);

	CreatePickup(1239, 1, 573.1008, -1258.3695, 995.6459, 0);
	Create3DTextLabel("Salter 2 \nStavljanje i uzimanje novca sa racuna", -1, 573.1008, -1258.3695, 995.6459, 10.0, 0, 0);

	CreatePickup(1239, 1, 1479.3827, -1770.1901 ,18.7958, 0);
	Create3DTextLabel("Opstina\nDa udjete pritisnite F", -1, 1479.3827, -1770.1901, 18.7958, 10.0, 0, 0);

	CreatePickup(1239, 1, 1553.9333, -1675.6754, 16.1953, 0);
	Create3DTextLabel("LSPD", -1, 1553.9333, -1675.6754, 16.1953, 10.0, 0, 0);

	CreatePickup(1239, 1, 2047.0300, -1908.0302, 13.5469, 0);
	Create3DTextLabel("Auto skola", -1, 2047.0300, -1908.0302, 13.5469, 10.0, 0, 0);

	CreatePickup(1239, 1, 1481.7111, -1799.7876, 999, 0);
	Create3DTextLabel("Salter 1\nBiro\n/posao", -1, 1481.7111, -1799.7876, 999, 10.0, 0, 0);

	CreatePickup(1239, 1, 1471.5800, -1790.4379, 999, 0);
	Create3DTextLabel("Salter 2", -1, 1471.5800, -1790.4379, 999, 10.0, 0, 0);

	CreatePickup(1239, 1, 1490.7458, -1791.9382, 999, 0);
	Create3DTextLabel("Salter 3", -1, 1490.7458, -1791.9382, 999, 10.0, 0, 0);

	CreatePickup(1239, 1, 1490.5601, -1788.1923, 999, 0);
	Create3DTextLabel("Salter 4", -1, 1490.5601, -1788.1923, 999, 10.0, 0, 0);

	CreatePickup(1239, 1, 1492.3096, -1779.2615, 999, 0);
	Create3DTextLabel("Salter 5", -1, 1492.3096, -1779.2615, 999, 10.0, 0, 0);

	CreatePickup(1239, 1, 1470.7263, -1779.7361, 999, 0);
	Create3DTextLabel("Salter 6\nIzdavanje licnih karti\n/licnakarta", -1, 1470.7263, -1779.7592, 999, 10.0, 0, 0);

	CreatePickup(1239, 1, 1470.7263, -1785.3605, 999, 0);
	Create3DTextLabel("Salter 7\nIzdavanje pasosa\n/pasos", -1, 1470.7263, -1785.3062, 999, 10.0, 0, 0);

	CreatePickup(1239, 1, -45.2776, -1153.3925, 1.1169, 0);
	Create3DTextLabel("RS Haul Company", -1, -45.2776, -1153.3925, 1.1169, 10.0, 0, 0);

	CreatePickup(1239, 1, 2494.0493, -1464.1653, 24.0250, 0);
	Create3DTextLabel("/duty", -1, 2494.0493, -1464.1653, 24.0250, 10.0, 0, 0);

    CreatePickup(1239, 1, 1516.5283, -1452.8676, 14.2031, 0);
	Create3DTextLabel("DETEKTIV SLUZBA\nDa bi ste usli u zgradu pritisnite F", -1, 1516.5283, -1452.8676, 14.2031, 10.0, 0, 0);

	CreatePickup(1239, 1, -135.6795, 138.2959, 1001.0859, 0); // DETEKTIV
	Create3DTextLabel("DETEKTIV SLUZBA\nDa se zaposlite kucajte /uzmiposao", -1, -135.6795, 138.2959, 1001.0859, 10.0, 0, 0);

	CreatePickup(1239, 1, -153.1795, 136.1176, 1001.0859, 0);
	Create3DTextLabel("Duznost\n/duty", -1, -153.1795, 136.1176, 1001.0859, 10.0, 0, 0);

	CreatePickup(1239, 1, 2123.1248, -2273.5098, 20.6719, 0);
	Create3DTextLabel("POSAO: SVERCER MATERIJALA\nDa se zaposlite kucajte /uzmiposao", -1, 2123.1248, -2273.5098, 20.6719, 10.0, 0, 0);

	CreatePickup(1239, 1, 2125.7737, -2276.0076, 20.6719, 0);
	Create3DTextLabel("POSAO: SVERCER DROGE\nDa se zaposlite kucajte /uzmiposao", -1, 2125.7737, -2276.0076, 20.6719, 10.0, 0, 0);

	BoxTD = TextDrawCreate(2.000000, 433.75, "usebox");
	TextDrawLetterSize(BoxTD, 0.000000, 1.382410);
	TextDrawTextSize(BoxTD, 638.000000, 0.000000);
	TextDrawAlignment(BoxTD, 1);
	TextDrawColor(BoxTD, 0);
	TextDrawUseBox(BoxTD, true);
	TextDrawBoxColor(BoxTD, 102);
	TextDrawSetShadow(BoxTD, 0);
	TextDrawSetOutline(BoxTD, 0);
	TextDrawFont(BoxTD, 0);

	ServerTD = TextDrawCreate(5.000000, 432.250, "GoMilano RolePlay:");
	TextDrawLetterSize(ServerTD, 0.449999, 1.600000);
	TextDrawAlignment(ServerTD, 1);
	TextDrawColor(ServerTD, 0xFF0000AA);
	TextDrawSetShadow(ServerTD, 0);
	TextDrawSetOutline(ServerTD, 0);
	TextDrawBackgroundColor(ServerTD, 51);
	TextDrawFont(ServerTD, 1);
	TextDrawSetProportional(ServerTD, 1);

	RandomMessagesTD = TextDrawCreate(149.375000, 432.250, "Treba Vam pomoc? /help");
	TextDrawLetterSize(RandomMessagesTD, 0.449999, 1.600000);
	TextDrawAlignment(RandomMessagesTD, 1);
	TextDrawColor(RandomMessagesTD, -1);
	TextDrawSetShadow(RandomMessagesTD, 0);
	TextDrawSetOutline(RandomMessagesTD, 1);
	TextDrawBackgroundColor(RandomMessagesTD, 51);
	TextDrawFont(RandomMessagesTD, 1);
	TextDrawSetProportional(RandomMessagesTD, 1);

	TUT1 = TextDrawCreate(0.000001, 329.280242, "LD_SPAC:white");
	TextDrawLetterSize(TUT1, 0.000000, 0.000000);
	TextDrawTextSize(TUT1, 640.000000, 118.719993);
	TextDrawAlignment(TUT1, 1);
	TextDrawColor(TUT1, 255);
	TextDrawSetShadow(TUT1, 0);
	TextDrawSetOutline(TUT1, 0);
	TextDrawFont(TUT1, 4);

	TUT2 = TextDrawCreate(0.000000, 0.000000, "LD_SPAC:white");
	TextDrawLetterSize(TUT2, 0.000000, 0.000000);
	TextDrawTextSize(TUT2, 640.000000, 118.719993);
	TextDrawAlignment(TUT2, 1);
	TextDrawColor(TUT2, 255);
	TextDrawSetShadow(TUT2, 0);
	TextDrawSetOutline(TUT2, 0);
	TextDrawFont(TUT2, 4);

	DateTD = TextDrawCreate(547.000000, 11.000000, "--");
	TextDrawFont(DateTD,3);
	TextDrawLetterSize(DateTD,0.399999, 1.600000);
    TextDrawColor(DateTD, 0xffffffff);

	TimeTD = TextDrawCreate(547.000000, 28.000000, "--");
	TextDrawFont(TimeTD,3);
	TextDrawLetterSize(TimeTD, 0.399999 ,1.600000);
	TextDrawColor(TimeTD, 0xffffffff);

	CountdownTD = TextDrawCreate(95.000000, 321.000000, " ");
	TextDrawAlignment(CountdownTD, 2);
	TextDrawBackgroundColor(CountdownTD, 255);
	TextDrawFont(CountdownTD, 1);
	TextDrawLetterSize(CountdownTD, 0.480000, 1.799999);
	TextDrawColor(CountdownTD, -1);
	TextDrawSetOutline(CountdownTD, 1);
	TextDrawSetProportional(CountdownTD, 1);

	SetTimer("SetTime", 1000, true);
	SetTimer("Random_Messages", 10000, true);
	SetTimer("CheckVehicleFuel", 60000, true);

	CreateDynamicObject(1264, 1048.2000000, -1247.8000000, 14.9000000, 0.0000000, 0.0000000, 0.0000000);
	return 1;
}

public OnGameModeExit()
{
	for(new id = 1; id < sizeof(BusinessInfo); id++)
    {
        if(BusinessInfo[id][bPrice] == 0) break;
        SaveBizz(id);
    }

    for(new id = 1; id < sizeof(HouseInfo); id++)
    {
        if(HouseInfo[id][hPrice] == 0) break;
        SaveHouse(id);
    }

    for(new id = 1; id < sizeof(ApartmentInfo); id++)
    {
        if(ApartmentInfo[id][aPrice] == 0) break;
        SaveApartment(id);
    }

    for(new id = 1; id < sizeof(VehicleInfo); id++)
    {
        SaveVehicle(id);
    }
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	SetPlayerPos(playerid, PlayerInfo[playerid][pSpawnX], PlayerInfo[playerid][pSpawnY], PlayerInfo[playerid][pSpawnZ]);
	SetPlayerCameraPos(playerid, PlayerInfo[playerid][pSpawnX], PlayerInfo[playerid][pSpawnY], PlayerInfo[playerid][pSpawnZ]);
	SetPlayerCameraLookAt(playerid, PlayerInfo[playerid][pSpawnX], PlayerInfo[playerid][pSpawnY], PlayerInfo[playerid][pSpawnZ]);
	return 1;
}

public OnPlayerConnect(playerid)
{
	new sendername[MAX_PLAYER_NAME], str[256];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	SetPlayerColor(playerid, 0xFFFFFFAA);
    //TogglePlayerSpectating(playerid, 0);
    Rented[playerid] = 9999;
    pBelt[playerid] = 9999;
    pHelmet[playerid] = 9999;
    pRefuelling[playerid] = 9999;
    RefillLitre[playerid] = 0;
    vSearching[playerid] = 9999;
    StartingEngine[playerid] = 9999;
    //Detective
    DetectiveDuty[playerid] = 9999;
    DetectiveSearchingOffer[playerid] = 9999;
	DetectivePlayerToFind[playerid] = 0;
	DetectiveSearchingPrice[playerid] = 0;
	//Sanitary
	SanitaryStarted[playerid] = 9999;
	SanitaryCheckpoint[playerid] = 0;
	SweeperRoute[playerid] = 1;
	//Truckman
    OnATruckMission[playerid] = 9999;
    //Taxi
    TaxiDuty[playerid] = 9999;
    TaxiDriver[playerid] = 9999;
    TaxiStartingPrice[playerid] = 0;
    TaxiTime[playerid] = 0;
    TaxiMoney[playerid] = 0;
    //Mechanic
    MechanicDuty[playerid] = 9999;
    MechanicRepairOffer[playerid] = 9999;
	MechanicRepairPlayerOffer[playerid] = 9999;
	MechanicRepairOfferPrice[playerid] = 0;
	MechanicRepairOfferVehicle[playerid] = 9999;
	MechanicRefillOffer[playerid] = 9999;
	MechanicRefillPlayerOffer[playerid] = 9999;
	MechanicRefillLitre[playerid] = 0;
	MechanicRefillOfferPrice[playerid] = 0;
	MechanicRefillOfferVehicle[playerid] = 9999;
	//Dealer
	DrugSellOffer[playerid] = 9999;
	DrugBuyOffer[playerid] = 9999;
	DrugPlayerOffer[playerid] = 9999;
	DrugOfferAmmount[playerid] = 0;
	DrugOfferPrice[playerid] = 0;
	MaterialsSellOffer[playerid] = 9999;
	MaterialsBuyOffer[playerid] = 9999;
	MaterialsPlayerOffer[playerid] = 9999;
	MaterialsOfferAmmount[playerid] = 0;
	MaterialsOfferPrice[playerid] = 0;
	//Smuggler
	OnASmugglerMission[playerid] = 9999;
	//Interiors
	InPoliceHQ[playerid] = 9999;
	InBank[playerid] = 9999;
	InCityHall[playerid] = 9999;
	InGSFHQ[playerid] = 9999;
	InBallasHQ[playerid] = 9999;
	InLSVHQ[playerid] = 9999;
	InVLAHQ[playerid] = 9999;
	InHouse[playerid] = 9999;
	InApartment[playerid] = 9999;
	InBusiness[playerid] = 9999;
	InDrivingSchool[playerid] = 9999;
	//Payday
	PayCash[playerid] = 0;
	//Mobile
	iCall[playerid] = 9999;
	Caller[playerid] = 9999;
	CalledPlayer[playerid] = 9999;
	InCall[playerid] = 9999;
	//Advertise and Help
	AdvertisementTime[playerid] = 0;
	HelpTime[playerid] = 0;
	PlayerOnTutorial[playerid] = 9999;
	//Vehicle
	VehicleSellOffer[playerid] = 9999;
 	VehicleBuyOffer[playerid] = 9999;
 	VehicleForOffer[playerid] = 9999;
	VehiclePlayerOffer[playerid] = 9999;
	VehicleOfferPrice[playerid] = 0;
	//House
	HouseSellOffer[playerid] = 9999;
 	HouseBuyOffer[playerid] = 9999;
 	HouseForOffer[playerid] = 9999;
	HousePlayerOffer[playerid] = 9999;
	HouseOfferPrice[playerid] = 0;
	//RobingBank
	HaveMoneyBag[playerid] = 9999;
	//Cop
	Tazer[playerid] = 9999;
	Tazzed[playerid] = 9999;
	Cuffed[playerid] = 9999;
	GaveUp[playerid] = 9999;
	Pulling[playerid] = 9999;
	Pulled[playerid] = 9999;
	CopDuty[playerid] = 9999;

	//Antiname
	new checkname = strfind(sendername, "_", true);
	new marko = strfind(sendername, "Marko", true);
	new hudi = strfind(sendername, "Hudi", true);
	new cubrilo = strfind(sendername, "Loshmi", true);
	if(marko == -1 && hudi == -1 && cubrilo == -1 && checkname == -1)
	{
		format(str, sizeof(str),"%s, je kikovan zbog neprihvatljivog imena", sendername);
		SendClientMessageToAll(BOJA_CRVENA, str);
		SCM(playerid, BOJA_CRVENA, "GRESKA: Vase ime je neprihvatljivo.");
		SCM(playerid, BOJA_CRVENA, "Vase ime mora biti u formatu Ime_Prezime. Velika pocetna slova.");
		SetTimerEx("KickPlayer", 1000, false, "i", playerid);
		return 1;
	}

	if(fexist(UserPath(playerid)))
	{
		INI_ParseFile(UserPath(playerid), "LoadUser_data", .bExtra = true, .extra = playerid);
		if(PlayerInfo[playerid][pRegistered] == 1)
		{
			if(PlayerInfo[playerid][pBanned] == 1)
		    {
				SendClientMessageToAll(BOJA_CRVENA, str);
				SCM(playerid, BOJA_CRVENA, "GRESKA: Vas account je banovan. Potrazite unban na forumu.");
				SetTimerEx("KickPlayer", 1000, false, "i", playerid);
			}
			else
			{
	      		//INI_ParseFile(UserPath(playerid), "LoadUser_data", .bExtra = true, .extra = playerid);
			    new name[MAX_PLAYER_NAME], sex[32], age, country[32];
				GetPlayerName(playerid, name, sizeof(name));
				sex = PlayerSex(playerid);
				age = PlayerInfo[playerid][pAge];
				country = PlayerCountry(playerid);
				format(str, sizeof(str), ""PLAVA"Ime i prezime"BELA": %s \n"PLAVA"Pol"BELA": %s \n"PLAVA"Godine"BELA": %d \n"PLAVA"Drzava"BELA": %s \n"BELA"Unesite sifru da biste se ulogovali:", name, sex, age, country);
				SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", str, "U redu", "Izadji");
			}
		}
		else
		{
	    	new name[MAX_PLAYER_NAME];
		    GetPlayerName(playerid, name, sizeof(name));
		    format(str, sizeof(str), ""BELA"Dobrodosli "PLAVA"%s"BELA"! \nOvaj "PLAVA"account"BELA" nije registrovan. \nUnesite sifru da biste ga registrovali:", name);
		    SPD(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""PLAVA"Register", str, "U redu", "Izadji");
		}
	}
	else
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    format(str, sizeof(str), ""BELA"Dobrodosli "PLAVA"%s"BELA"! \nOvaj "PLAVA"account"BELA" nije registrovan. \nUnesite sifru da biste ga registrovali:", name);
	    SPD(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""PLAVA"Register", str, "U redu", "Izadji");
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAdmin(i))
	    {
	        format(str, sizeof(str), "%s je usao na server.", sendername);
	        SCM(i, BOJA_LIME, str);
		}
	}
	//------------------------------------------------------------------------ > CITY HALL
	RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
	//------------------------------------------------------------------------ > LSPD CELLS
	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);
	//------------------------------------------------------------------------ > DETECTIVE DELETE
	RemoveBuildingForPlayer(playerid, 1265, 1539.2344, -1481.0781, 8.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1536.5078, -1481.0938, 8.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1534.9297, -1480.9922, 8.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1537.2422, -1479.7422, 8.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1537.9297, -1480.6094, 8.6094, 0.25);
	//------------------------------------------------------------------------ > RS HAUL DELETE
	RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -109.1641, -1181.3438, 1.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -84.2422, -1180.2656, 0.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -77.2188, -1188.3672, 0.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, -103.6875, -1172.5781, 2.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -77.4219, -1165.5547, 1.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, -73.8047, -1141.4219, 1.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 2432.7266, -2133.0234, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 2432.7266, -2133.0234, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2446.8281, -2075.8438, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2438.3594, -2075.8438, 13.2578, 0.25);
	//------------------------------------------------------------------------ > SANITARY DELETE
	RemoveBuildingForPlayer(playerid, 5855, 1095.6797, -1212.7813, 18.2891, 0.25);
	//------------------------------------------------------------------------ > MECHANIC DELETE
 	RemoveBuildingForPlayer(playerid, 17861, 2524.0391, -1480.2109, 25.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2522.4609, -1478.7422, 24.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 2538.1641, -1490.8828, 36.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 17854, 2492.7891, -1490.0156, 34.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 2510.5859, -1474.0391, 23.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 2538.1641, -1490.8828, 36.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 17859, 2524.0391, -1480.2109, 25.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 2526.5781, -1474.3750, 24.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3594, 2526.5234, -1474.3750, 23.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 17917, 2556.2891, -1441.6484, 53.6719, 0.25);
	//------------------------------------------------------------------------ > DEALER DELETE
	RemoveBuildingForPlayer(playerid, 5171, 2124.9453, -2275.4531, 20.1406, 0.25);

	RemoveBuildingForPlayer(playerid, 3744, 2183.1719, -2237.2734, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 5305, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2165.0703, -2288.9688, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2194.4766, -2242.8750, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2217.2188, -2250.3594, 16.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2183.1719, -2237.2734, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2235.1641, -2231.8516, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2240.7813, -2240.8984, 16.3672, 0.25);
	//------------------------------------------------------------------------ > PARKING DELETE
	RemoveBuildingForPlayer(playerid, 729, 1581.5156, -1078.2656, 23.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 1595.3906, -1118.2734, 23.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 1565.6875, -1051.4297, 23.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 728, 1666.7813, -1148.7422, 23.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 728, 1607.8203, -1148.7422, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1596.1875, -1139.2578, 27.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1613.9375, -1148.2578, 24.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1593.9453, -1102.9688, 27.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1555.3906, -1042.4609, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1549.8984, -1037.6875, 24.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1622.8125, -1148.3359, 23.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 4638, 1625.7500, -1139.1484, 24.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1652.5313, -1148.2578, 24.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1675.1797, -1149.0156, 23.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1677.3438, -1148.2578, 24.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1689.9609, -1148.5938, 24.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1688.3359, -1137.1641, 23.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1688.2734, -1144.9609, 24.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1688.4922, -1117.9141, 23.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1688.7188, -1122.5156, 24.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 4642, 1623.3828, -1042.0938, 24.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 4639, 1654.0625, -1076.4219, 24.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1688.7188, -1111.4766, 24.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1688.7188, -1096.8906, 24.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4640, 1728.7891, -1065.0938, 24.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 4641, 1788.5391, -1026.3516, 24.5000, 0.25);

	BankMoney[playerid] = TextDrawCreate(610.000000, 101.000000, "");
	TextDrawAlignment(BankMoney[playerid], 3);
	TextDrawBackgroundColor(BankMoney[playerid], 255);
	TextDrawFont(BankMoney[playerid], 2);
	TextDrawLetterSize(BankMoney[playerid], 0.300000, 1.000000);
	TextDrawColor(BankMoney[playerid], -1);
	TextDrawSetOutline(BankMoney[playerid], 1);
	TextDrawSetProportional(BankMoney[playerid], 1);

	FuelTD[playerid] = TextDrawCreate(526.399963, 412.906738, "Gorivo: 100");
	TextDrawLetterSize(FuelTD[playerid], 0.449999, 1.600000);
	TextDrawAlignment(FuelTD[playerid], 1);
	TextDrawColor(FuelTD[playerid], 16711935);
	TextDrawSetShadow(FuelTD[playerid], 0);
	TextDrawSetOutline(FuelTD[playerid], 1);
	TextDrawBackgroundColor(FuelTD[playerid], 51);
	TextDrawFont(FuelTD[playerid], 1);
	TextDrawSetProportional(FuelTD[playerid], 1);

	JailTimeTD[playerid] = TextDrawCreate(222.399780, 117.226448, "U zatvoru ste jos:");
	TextDrawLetterSize(JailTimeTD[playerid], 0.449999, 1.600000);
	TextDrawAlignment(JailTimeTD[playerid], 1);
	TextDrawColor(JailTimeTD[playerid], -1);
	TextDrawSetShadow(JailTimeTD[playerid], 0);
	TextDrawSetOutline(JailTimeTD[playerid], 1);
	TextDrawBackgroundColor(JailTimeTD[playerid], 51);
	TextDrawFont(JailTimeTD[playerid], 2);
	TextDrawSetProportional(JailTimeTD[playerid], 1);

	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], reasonmsg[64], str[128];
	GetPlayerName(playerid, sendername, sizeof(sendername));

	if(Rented[playerid] != 9999) SetVehicleToRespawn(Rented[playerid]);

	if(DetectiveDuty[playerid] != 9999) detectives--;
	if(MechanicDuty[playerid] != 9999) mechanics--;
	if(TaxiDuty[playerid] != 9999) taxidrivers--;

	if(TaxiTime[playerid] > 0 && TaxiDriver[playerid] < 9999)
	{
	    if(IsPlayerConnected(TaxiDriver[playerid]))	    {
	 		TaxiMoney[TaxiDriver[playerid]] += TaxiTime[playerid];
			format(str, sizeof(str), "Putnik je platio %d$ i napustio taxi", TaxiTime[playerid]);
			SCM(TaxiDriver[playerid], BOJA_NARANDZASTA, str);
		}
	}

	if(InPoliceHQ[playerid] != 9999)
	{
	    PlayerInfo[playerid][pSpawnX] = 1553.9333;
	    PlayerInfo[playerid][pSpawnX] = -1675.6754;
	    PlayerInfo[playerid][pSpawnX] = 16.1953;
	    SavePlayer(playerid);
	}
	else if(InBank[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = 593.1841;
		PlayerInfo[playerid][pSpawnY] = -1249.7542;
		PlayerInfo[playerid][pSpawnZ] = 18.2069;
		SavePlayer(playerid);
	}
	else if(InCityHall[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = 1479.3715;
		PlayerInfo[playerid][pSpawnY] = -1771.1544;
		PlayerInfo[playerid][pSpawnZ] = 18.7958;
		SavePlayer(playerid);
	}
	else if(InGSFHQ[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = 1479.3715;
		PlayerInfo[playerid][pSpawnY] = -1771.1544;
		PlayerInfo[playerid][pSpawnZ] = 18.7958;
		SavePlayer(playerid);
	}
	else if(InBallasHQ[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = 2045.5447;
		PlayerInfo[playerid][pSpawnY] = -1116.1219;
		PlayerInfo[playerid][pSpawnZ] = 26.3617;
		SavePlayer(playerid);
	}
	else if(InVLAHQ[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = 1684.8185;
		PlayerInfo[playerid][pSpawnY] = -2099.0588;
		PlayerInfo[playerid][pSpawnZ] = 13.8343;
		SavePlayer(playerid);
	}
	else if(InLSVHQ[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = 2808.0615;
		PlayerInfo[playerid][pSpawnY] = -1189.7864;
		PlayerInfo[playerid][pSpawnZ] = 25.3446;
		SavePlayer(playerid);
	}
	else if(InHouse[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = HouseInfo[InHouse[playerid]][hEnterX];
		PlayerInfo[playerid][pSpawnY] = HouseInfo[InHouse[playerid]][hEnterY];
		PlayerInfo[playerid][pSpawnZ] = HouseInfo[InHouse[playerid]][hEnterZ];
		SavePlayer(playerid);
	}
	else if(InApartment[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = ApartmentInfo[InApartment[playerid]][aEnterX];
		PlayerInfo[playerid][pSpawnY] = ApartmentInfo[InApartment[playerid]][aEnterY];
		PlayerInfo[playerid][pSpawnZ] = ApartmentInfo[InApartment[playerid]][aEnterZ];
		SavePlayer(playerid);
	}
	else if(InBusiness[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = BusinessInfo[InBusiness[playerid]][bEnterX];
		PlayerInfo[playerid][pSpawnY] = BusinessInfo[InBusiness[playerid]][bEnterY];
		PlayerInfo[playerid][pSpawnZ] = BusinessInfo[InBusiness[playerid]][bEnterZ];
		SavePlayer(playerid);
	}
	else if(InDrivingSchool[playerid] != 9999)
	{
		PlayerInfo[playerid][pSpawnX] = 2047.0300;
		PlayerInfo[playerid][pSpawnY] = -1908.0302;
		PlayerInfo[playerid][pSpawnZ] = 13.5469;
		SavePlayer(playerid);
	}
	else
	{
	    GetPlayerPos(playerid, X, Y, Z);
	    PlayerInfo[playerid][pSpawnX] = X;
	    PlayerInfo[playerid][pSpawnY] = Y;
	    PlayerInfo[playerid][pSpawnZ] = Z;
	    SavePlayer(playerid);
	}

	KillTimer(CopTimer[playerid]);

    TextDrawHideForPlayer(playerid, DateTD);
	TextDrawHideForPlayer(playerid, TimeTD);
    PlayerInfo[playerid][pPlaytime] = 0;
    PlayerInfo[playerid][pLogged] = 9999;
	SavePlayer(playerid);

	if(reason == 0) reasonmsg = "Crashovan";
	else if(reason == 1) reasonmsg = "Svojevoljno napustio server";
	else if(reason == 2) reasonmsg = "Kickovan/Banovan";

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAdmin(i))
	    {
	        format(str, sizeof(str), "Nazalost, %s je izasao sa servera. [%s]", sendername, reasonmsg);
	        SCM(i, BOJA_CRVENA, str);
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    if(PlayerInfo[playerid][pDead] != 9999)
	{
		SetPlayerPos(playerid, 1177.6237, -1323.6194, 14.0799);
		PlayerInfo[playerid][pDead] = 9999;
		SavePlayer(playerid);
	}

	if(PlayerInfo[playerid][pArrested] != 9999)
	{
		new cell;
		cell = random(sizeof(Cells));
		SetPlayerPos(playerid, Cells[cell][0], Cells[cell][1], Cells[cell][2]);
		SetPlayerInterior(playerid, 6);
		GameTextForPlayer(playerid, "~r~Vracamo vas nazad u zatvor!", 3500, 3);
	}

	if(CopDuty[playerid] != 9999)
	{
 		ResetPlayerWeapons(playerid);
 		SetPlayerColor(playerid, 0xFFFFFFAA);
 		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		CopDuty[playerid] = 9999;
	}

    /*if(PlayerInfo[playerid][pTut] == 9999)
	{
		SCM(playerid, BOJA_PLAVA, "UCITAVANJE TUTORIALA...");
		TogglePlayerControllable(playerid, 0);
   		PlayerOnTutorial[playerid] = 1;
		SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	}*/

	if(PlayerInfo[playerid][pWanted] != 9999) SetPlayerColor(playerid, 0xFA9600AA);


    SetCameraBehindPlayer(playerid);

    TextDrawShowForPlayer(playerid, DateTD);
	TextDrawShowForPlayer(playerid, TimeTD);
    TextDrawShowForPlayer(playerid, ServerTD);
    TextDrawShowForPlayer(playerid, BoxTD);
    TextDrawShowForPlayer(playerid, RandomMessagesTD);
    TextDrawShowForPlayer(playerid, BankMoney[playerid]);

    if(PlayerInfo[playerid][pOSkin] != 9999 && PlayerInfo[playerid][pOMember] != 9999)
	{
	 	if(PlayerInfo[playerid][pOMember] == 1 || PlayerInfo[playerid][pOMember] == 2) return SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
    	else SetPlayerSkin(playerid, PlayerInfo[playerid][pOSkin]);
    }
    else SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

    if(PlayerInfo[playerid][pTut] == 9999)
    {
        SCM(playerid, BOJA_PLAVA, "Niste jos odradili tutorial.");
        SCM(playerid, BOJA_PLAVA, "Odradite tutorial, i po zavrsetku tutoriala dobicete 500$");
	}

	SetPlayerSkills(playerid);
	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightingStyle]);
	SetPlayerVariablesOnSpawn(playerid);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	new weapon;
	//STATS
	PlayerInfo[playerid][pDead] = 1;
	PlayerInfo[killerid][pKills]++;
	PlayerInfo[playerid][pDeaths]++;
	DisablePlayerCheckpoint(playerid);
	//WEAPON SKILL
	weapon = GetPlayerWeapon(killerid);
	switch(weapon)
	{
	    case 22:
	    {
	        PlayerInfo[killerid][pPistolSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_PISTOL, PlayerInfo[killerid][pPistolSkill]);
	    }
	    case 23:
	    {
	        PlayerInfo[killerid][pSilencedSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[killerid][pSilencedSkill]);
	    }
	    case 24:
		{
	        PlayerInfo[killerid][pDesertSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[killerid][pDesertSkill]);
		}
		case 25:
		{
	        PlayerInfo[killerid][pShotgunSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_SHOTGUN, PlayerInfo[killerid][pShotgunSkill]);
		}
		case 26:
		{
	        PlayerInfo[killerid][pSawnoffSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[killerid][pSawnoffSkill]);
		}
		case 27:
		{
	        PlayerInfo[killerid][pCombatSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[killerid][pCombatSkill]);
		}
		case 28:
		{
	        PlayerInfo[killerid][pUziSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_MICRO_UZI, PlayerInfo[killerid][pUziSkill]);
		}
		case 29:
		{
	        PlayerInfo[killerid][pMP5Skill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_MP5, PlayerInfo[killerid][pMP5Skill]);
		}
		case 30:
		{
	        PlayerInfo[killerid][pAK47Skill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_AK47, PlayerInfo[killerid][pAK47Skill]);
		}
		case 31:
		{
	        PlayerInfo[killerid][pM4Skill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_M4, PlayerInfo[killerid][pM4Skill]);
		}
		case 32:
		{
	        PlayerInfo[killerid][pUziSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_MICRO_UZI, PlayerInfo[killerid][pUziSkill]);
		}
		case 34:
		{
	        PlayerInfo[killerid][pSniperSkill] += 5;
	        SavePlayer(killerid);
	        SetPlayerSkillLevel(killerid, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[killerid][pSniperSkill]);
		}
	}
	//MONEY BALANCE
	GivePlayerMoney(playerid, 100);
	TextDrawDestroy(BankMoney[playerid]);
	//SETTING VARIABLES ON SPAWN
	SetPlayerVariablesOnSpawn(playerid);
	//SANITARY STOP JOB
	SanitaryStarted[playerid] = 9999;
	SanitaryCheckpoint[playerid] = 0;
	SweeperRoute[playerid] = 1;
	//CANCEL TUTORIAL
	PlayerOnTutorial[playerid] = 9999;
	//OFF DUTYES
	if(DetectiveDuty[playerid] != 9999) detectives--;
	if(MechanicDuty[playerid] != 9999) mechanics--;
	if(TaxiDuty[playerid] != 9999) taxidrivers--;
	//VW & INT
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
   	SetVehicleParamsEx(vehicleid, 0, 0, alarm, doors, bonnet, boot, objective);
   	vEngine[vehicleid] = 0;
   	vehHood[vehicleid] = 0;
    if(IsAOwnedVehicle(vehicleid))
    {
        SetVehicleComponents(vehicleid);
        ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2]);
        if(VehicleInfo[vehicleid][vPaintjob] != 9999) ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	new Float:health;
	new Float:vehHealth,engine, lights, alarm, doors, bonnet, boot, objective;
	GetPlayerHealth(playerid, health);
	if(IsABike(vehicleid)) if(pHelmet[playerid] == 9999) SetPlayerHealth(playerid,floatround(health, floatround_round) -15);
	else if(pBelt[playerid] == 9999) SetPlayerHealth(playerid,floatround(health, floatround_round) -15);

 	if(vEngine[vehicleid] == 1)
  	{
   		GetVehicleHealth(vehicleid, vehHealth);
	    if(vehHealth <= 500.0)
	    {
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
  			SetVehicleParamsEx(vehicleid, 0, 0, alarm, doors, bonnet, boot, objective);
			vEngine[vehicleid] = 0;
  		}
	}
    return 1;
}

public OnPlayerText(playerid, text[])
{
	new prefix[64], sendername[MAX_PLAYER_NAME], str[128];
	/*if(DetectiveDuty[playerid] != 9999) sendername = "Detektiv";
	else GetPlayerNameEx(playerid, sendername, MAX_PLAYER_NAME);*/
	sendername = GetPlayerNameEx(playerid);
	if(PlayerInfo[playerid][pMuted] != 9999)
	{
	    format(str, sizeof(str), "Mutirani ste, ne mozete da pisete! Sacekajte jos %d sekundi", PlayerInfo[playerid][pMutedTime]);
		SCM(playerid, BOJA_CRVENA, str);
	}
	else
	{
	    if(text[0] == '#' && PlayerInfo[playerid][pAdmin] != 9999)
	    {
			if(PlayerInfo[playerid][pAdmin] == 2) prefix = "[MODERATOR]";
			else if(PlayerInfo[playerid][pAdmin] == 3) prefix = "[ADMIN]";
			else if(PlayerInfo[playerid][pAdmin] == 4) prefix = "[ADMIN]";
			else if(PlayerInfo[playerid][pAdmin] == 5) prefix = "[SUVLASNIK]";
			else if(PlayerInfo[playerid][pAdmin] == 6) prefix = "[VLASNIK]";
			else if(PlayerInfo[playerid][pLevel] == 1) prefix = "[POCETNIK]";


			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(PlayerInfo[i][pAdmin] != 9999)
			    {
			        format(str, sizeof(str), ""CRVENA"%s %s "BELA"adminima: %s", prefix, sendername, text[1]);
			        SCM(i, BOJA_BELA, str);
				}
			}

		}
		else if(text[0] == '@' && PlayerInfo[playerid][pAdmin] != 9999)
	    {
	    	if(PlayerInfo[playerid][pAdmin] == 1) prefix = "[MODERATOR]";
			else if(PlayerInfo[playerid][pAdmin] == 2) prefix = "[MODERATOR]";
			else if(PlayerInfo[playerid][pAdmin] == 3) prefix = "[ADMIN]";
			else if(PlayerInfo[playerid][pAdmin] == 4) prefix = "[ADMIN]";
			else if(PlayerInfo[playerid][pAdmin] == 5) prefix = "[SUVLASNIK]";
			else if(PlayerInfo[playerid][pAdmin] == 6) prefix = "[VLASNIK]";
			format(str, sizeof(str), ""CRVENA"%s %s "BELA": %s", prefix, sendername, text[1]);
			SendClientMessageToAll(BOJA_BELA, str);
		}
		else
		{
			if(InCall[playerid] == 9999)
			{
				format(str, sizeof(str), ""BELA"["PLAVA"IC"BELA"]["PLAVA"ID %d"BELA"] "PLAVA"%s"BELA" kaze: %s", playerid, sendername, text);
		  		SRM(50.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
				SetPlayerChatBubble(playerid, str, BOJA_BELA, 50.0, 10000);
			}
			else if(InCall[playerid] == 1)
			{
			    format(str, sizeof(str), "[MOBILNI]"CRVENA"%s"PLAVA"["BELA"ID %d"PLAVA"] %s"BELA" kaze: %s", playerid, sendername, text);
			    SRM(50.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
			    if(iCall[playerid] != 9999) SCM(CalledPlayer[playerid], BOJA_PLAVA, str);
			    else SCM(Caller[playerid], BOJA_PLAVA, str);
			}
		}
	}
	return 0;
}

// OOC CHAT
YCMD:b(playerid, params[], help)
{
	#pragma unused help
	new text[128], sendername[MAX_PLAYER_NAME], str[256];
	if(sscanf(params, "s[128]", text)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /b [text]");

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), ""BELA"["PLAVA"OOC"BELA"]["PLAVA"ID %d"BELA"] "PLAVA"%s"BELA": (( %s ))", playerid, sendername, text);
	SRM(50.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	if (strcmp("/mycommand", cmdtext, true, 10) == 0)
	{
		// Do something here
		return 1;
	}
	return 0;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success) SCM(playerid, BOJA_CRVENA, "GRESKA: Nepoznata komanda! (/komande)");
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new vehiclename[32], str[128];
	GetVehicleName(vehicleid, vehiclename, sizeof(vehiclename));
	if(IsAOwnedVehicle(vehicleid))
	{
	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: %s", vehiclename, vehicleid, VehicleInfo[vehicleid][vOwner]);
	    SCM(playerid, BOJA_PLAVA, str);
	    if(VehicleInfo[vehicleid][vLocked] == 1)
		{
			format(str, sizeof(str), "Vozilo: zakljucano");
			SetVehicleParamsForPlayer(vehicleid, playerid, 0, 1);
		}
	    else
		{
			format(str, sizeof(str), "Vozilo: otkljucano");
			SetVehicleParamsForPlayer(vehicleid, playerid, 0, 0);
		}
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsASalesVehicle(vehicleid))
	{
	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Dealership", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
 	}
 	else if(IsAPoliceCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: LSPD", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsAGSFCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Grove Street Families", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsABallasCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Ballas", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsAVLACar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Varrios Los Aztecas", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsALSVCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Los Santos Vagos", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsADetectiveCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s(%d). Vlasnik: Detektiv sluzba", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsAMechanicCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Mechanic Service", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsATruckmanCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s(%d). Vlasnik: RS Haul Truck Company", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsASanitaryCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: JKP", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsATaxiCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: S Taxi", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else if(IsASmugglerCar(vehicleid))
 	{
 	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Nepoznat", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}
	else
	{
	    format(str, sizeof(str), "Ulazite u %s (%d). Vlasnik: Drzava", vehiclename, vehicleid);
	    SCM(playerid, BOJA_PLAVA, str);
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new str[128];
    if(newstate == 2)
	{
	    new newcar = GetPlayerVehicleID(playerid);
	    new vMDL = GetVehicleModel(newcar);

	    if(IsABike(newcar)) SCM(playerid, BOJA_PLAVA, "Ne zaboravite da stavite kacigu, da se ne bi povredili. /kaciga");
	    else SCM(playerid, BOJA_PLAVA, "Ne zaboravite da vezete pojas. /pojas");

	    if(IsABoat(newcar) && (PlayerInfo[playerid][pSailingLicence] == 9999))
		{
		    RemovePlayerFromVehicle(playerid);
		    SCM(playerid, BOJA_CRVENA, "Nemate dozvolu za plovidbu!");
		}
		else if(IsAPlane(newcar) && (PlayerInfo[playerid][pFlyingLicence] == 9999))
		{
		    RemovePlayerFromVehicle(playerid);
		    SCM(playerid, BOJA_CRVENA, "Nemate dozvolu za letenje!");
		}
		else if(PlayerInfo[playerid][pDrivingLicence] == 9999) SCM(playerid, BOJA_CRVENA, "Nemate dozvolu za voznju! Vozite pazljivo, i pazite se policije!");

	    format(str, sizeof(str), "Gorivo: %i", vFuel[newcar]);
		TextDrawSetString(FuelTD[playerid], str);
	    TextDrawShowForPlayer(playerid, FuelTD[playerid]);

   		if(IsARentVehicle(newcar))
   		{
    		if (Rented[playerid] != newcar)
   			{
         		TogglePlayerControllable(playerid, 0);
         		SCM(playerid, BOJA_NARANDZASTA, "Da iznajmite vozilo kucajte /iznajmivozilo");
         		SCM(playerid, BOJA_NARANDZASTA, "Da izadjete iz vozila kucajte /napustivozilo");
   			}
   			else return 1;
  		}

  		if(IsAPoliceCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pOMember] != 1)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste clan LSPDa!");
			}
		}

		if(IsAGSFCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pOMember] != 3)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste clan Grove Street Familiesa!");
			}
		}

		if(IsABallasCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pOMember] != 4)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste clan Ballasa!");
			}
		}

		if(IsAVLACar(newcar))
  		{
  		    if(PlayerInfo[playerid][pOMember] != 5)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste clan Varrios Los Aztecasa!");
			}
		}

		if(IsALSVCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pOMember] != 6)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste clan Los Santos Vagosa!");
			}
		}

		if(IsADetectiveCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pJob] != 1)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste Detektiv!");
			}
			else if(PlayerInfo[playerid][pDetectiveLevel] == 1 && (vMDL == 496 || vMDL == 480))
			{
				SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete voziti ovo vozilo, nemate dovoljno iskustva!");
				RemovePlayerFromVehicle(playerid);
		        TogglePlayerControllable(playerid, 1);
    		}
    		else if(PlayerInfo[playerid][pDetectiveLevel] == 2 && vMDL == 480)
			{
				RemovePlayerFromVehicle(playerid);
		        TogglePlayerControllable(playerid, 1);
				SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete voziti ovo vozilo, nemate dovoljno iskustva!");
			}
		}

		if(IsAMechanicCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pJob] != 4)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste mehanicar!");
			}
		}

		if(IsATruckmanCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pJob] != 2)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste kamiondzija!");
			}
		}

		if(IsASanitaryCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pJob] != 3)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste komunalac!");
			}
		}

		if(IsATaxiCar(newcar))
		{
		    if(PlayerInfo[playerid][pJob] != 5)
		    {
		        RemovePlayerFromVehicle(playerid);
		        TogglePlayerControllable(playerid, 1);
		        SCM(playerid, BOJA_CRVENA, "Niste taxista!");
			}
			else if(PlayerInfo[playerid][pTaxiLevel] == 1 && (vMDL == 409 || vMDL == 420))
			{
				SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete voziti ovaj taxi, nemate dovoljno iskustva!");
				RemovePlayerFromVehicle(playerid);
		        TogglePlayerControllable(playerid, 1);
    		}
    		else if(PlayerInfo[playerid][pTaxiLevel] == 2 && vMDL == 409)
			{
				RemovePlayerFromVehicle(playerid);
		        TogglePlayerControllable(playerid, 1);
				SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete voziti ovaj taxi, nemate dovoljno iskustva!");
			}
		}

		if(IsASmugglerCar(newcar))
  		{
  		    if(PlayerInfo[playerid][pJob] != 11 && PlayerInfo[playerid][pJob] != 12)
  		    {
  		    	RemovePlayerFromVehicle(playerid);
  		    	TogglePlayerControllable(playerid, 1);
  		    	SCM(playerid, BOJA_CRVENA, "Niste svercer!");
			}
		}
	}

	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new newcar = GetPlayerVehicleID(playerid);
 		for(new i = 0 ; i < MAX_PLAYERS; i++)
 		{
	 		if(IsPlayerInVehicle(i, newcar) && GetPlayerState(i) == PLAYER_STATE_DRIVER && IsATaxiCar(newcar) && TaxiDuty[i] == 1)
 			{
 				if(GetPlayerMoney(playerid) < TaxiStartingPrice[i])
 				{
 					SCM(playerid, BOJA_CRVENA, "Nemate dovoljno novca da bi zapoceli voznju!");
      				RemovePlayerFromVehicle(playerid);
      				TogglePlayerControllable(playerid, 1);
				}
				else
				{
				    TaxiTime[playerid] = 1;
				    TaxiMoney[i] += TaxiStartingPrice[i];
				    TaxiDriver[playerid] = i;
				    PlayerInfo[playerid][pMoney] -= TaxiStartingPrice[i];
				    GivePlayerMoney(playerid, -TaxiStartingPrice[i]);
				    SavePlayer(i);
				    format(str, sizeof(str), "Platili ste vozacu taxija %d$.", TaxiStartingPrice[i]);
				    SCM(playerid, BOJA_NARANDZASTA, str);
				}
			}
		}

		if(IsABike(newcar)) return SCM(playerid, BOJA_PLAVA, "Ne zaboravite da stavite kacigu, da se ne bi povredili. /kaciga");
	    else SCM(playerid, BOJA_PLAVA, "Ne zaboravite da vezete pojas, da se ne bi povredili. /pojas");

		format(str, sizeof(str), "Gorivo: %i", vFuel[newcar]);
		TextDrawSetString(FuelTD[playerid], str);
	    TextDrawShowForPlayer(playerid, FuelTD[playerid]);
	}

	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    TextDrawHideForPlayer(playerid, FuelTD[playerid]);

	    new sendername[MAX_PLAYER_NAME];
	    sendername = GetPlayerNameEx(playerid);
	    if(pBelt[playerid] == 1)
		{
		    pBelt[playerid] = 9999;
		    format(str, sizeof(str), "Odvezali ste pojas.");
		    SCM(playerid, BOJA_CRVENA, str);
		    format(str, sizeof(str), "%s odvezuje svoj pojas.", sendername);
		    SRM(10.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
		}

	    if(pHelmet[playerid] == 1)
		{
		    pHelmet[playerid] = 9999;
		    RemovePlayerAttachedObject(playerid, 1);
		    format(str, sizeof(str), "Skinuli ste kacigu.");
		    SCM(playerid, BOJA_CRVENA, str);
		    format(str, sizeof(str), "%s skida kacigu.", sendername);
		    SRM(10.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
		}

	    if(TaxiDuty[playerid] == 1)
	    {
	        PlayerInfo[playerid][pMoney] += TaxiMoney[playerid];
	        GivePlayerMoney(playerid, TaxiMoney[playerid]);
	        SavePlayer(playerid);
	        TaxiDuty[playerid] = 9999;
	        TaxiStartingPrice[playerid] = 0;
	        TaxiMoney[playerid] = 0;
	        format(str, sizeof(str), ""NARANDZASTA"Vise niste na duznosti, zaradili ste %d$", TaxiMoney[playerid]);
	        SCM(playerid, -1, str);
		}

	    if(TaxiTime[playerid] > 0 && TaxiDriver[playerid] < 9999)
		{
		    PlayerInfo[playerid][pMoney] -= TaxiTime[playerid];
		    GivePlayerMoney(playerid, -TaxiTime[playerid]);
		    SavePlayer(playerid);
		    TaxiMoney[TaxiDriver[playerid]] += TaxiTime[playerid];
			format(str, sizeof(str), ""NARANDZASTA"Platili ste taxi %d$", TaxiTime[playerid]);
			SCM(playerid, -1, str);
			format(str, sizeof(str), ""NARANDZASTA"Putnik je platio %d$ i napustio taxi", TaxiTime[playerid]);
			SCM(TaxiDriver[playerid], -1, str);
			TaxiTime[playerid] = 0;
			TaxiDriver[playerid] = 9999;
		}

		if(SanitaryStarted[playerid] == 1)
		{
			SanitaryStarted[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
		    SCM(playerid, BOJA_CRVENA, "Prekinuli ste ciscenje grada!");
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	new str1[256], str2[256], str3[256], str4[256], str5[256], str6[256], str7[256], str[2048];
	if(vSearching[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		vSearching[playerid] = 9999;
	}
	if(DetectiveSearchingOffer[playerid] == 1) DisablePlayerCheckpoint(playerid);
	if(OnATruckMission[playerid] == 1)
	{
	    new vID = GetPlayerVehicleID(playerid);
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
		}
	    else if(!IsATruckmanCar(vID) && GetVehicleModel(vID) != 403)
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli sa kamionom! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
		}
		else if(!IsTrailerAttachedToVehicle(vID))
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli sa prikolicom! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
		}
		else
		{
		    new vTID = GetVehicleTrailer(vID);
			SCM(playerid, BOJA_ZELENA, "Vratite se do mesta utovara da bi ste preuzeli novac.");
			SetVehicleToRespawn(vTID);
			SetPlayerCheckpoint(playerid, -78.14, -1136.04, 1.08, 5.0);
			OnATruckMission[playerid] = 2;
		}
	}
	else if(OnATruckMission[playerid] == 2)
	{
	    new vID = GetPlayerVehicleID(playerid);
        if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
			return 1;
		}
	    else if(!IsATruckmanCar(vID))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli sa kamionom! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
			return 1;
		}
		else
		{
			SCM(playerid, BOJA_ZELENA, "Uspesno ste odvezli utovar. Nagrada: 350$");
			DisablePlayerCheckpoint(playerid);
            PlayerInfo[playerid][pMoney] += 350;
			GivePlayerMoney(playerid, 350);
			SavePlayer(playerid);
			OnATruckMission[playerid] = 9999;
		}
	}
	else if(OnATruckMission[playerid] == 11)
	{
	    new vID = GetPlayerVehicleID(playerid);
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
		}
	    else if(!IsATruckmanCar(vID) && GetVehicleModel(vID) != 456)
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli sa kamionom! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
		}
		else
		{
		    TogglePlayerControllable(playerid, 0);
			GameTextForPlayer(playerid, "~w~Utovaranje tereta...", 10000, 3);
			DisablePlayerCheckpoint(playerid);
			SetTimerEx("AntiFreezePlayer", 10000, false, "i", playerid);
		}
	}
	else if(OnATruckMission[playerid] == 12)
	{
	    new vID = GetPlayerVehicleID(playerid);
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
		}
	    else if(!IsATruckmanCar(vID) && GetVehicleModel(vID) != 456)
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli sa kamionom! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
		}
		else
		{
		    TogglePlayerControllable(playerid, 0);
			GameTextForPlayer(playerid, "~w~Istovaranje tereta...", 10000, 3);
			OnATruckMission[playerid] = 13;
			DisablePlayerCheckpoint(playerid);
			SetTimerEx("AntiFreezePlayer", 10000, false, "i", playerid);
		}
	}
	else if(OnATruckMission[playerid] == 13)
	{
	    new vID = GetPlayerVehicleID(playerid);
        if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
			return 1;
		}
	    else if(!IsATruckmanCar(vID) && GetVehicleModel(vID) != 456)
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli sa kamionom! Misija prekinuta!");
			DisablePlayerCheckpoint(playerid);
			OnATruckMission[playerid] = 9999;
			return 1;
		}
		else
		{
			DisablePlayerCheckpoint(playerid);
			PlayerInfo[playerid][pMoney] += 250;
			GivePlayerMoney(playerid, 250);
			SavePlayer(playerid);
			OnATruckMission[playerid] = 0;
			PlayerInfo[playerid][pTruckmanPoints] += 1;
			SavePlayer(playerid);
			SCM(playerid, BOJA_ZELENA, "Uspesno ste odvezli utovar. Nagrada: 250$");
		}
	}

	//JKP
	if(SanitaryCheckpoint[playerid] == 1)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[1][0], SweeperCheckpoint[1][1], SweeperCheckpoint[1][2], 3.0);
	    SanitaryCheckpoint[playerid] = 2;
	}
	else if(SanitaryCheckpoint[playerid] == 2)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[2][0], SweeperCheckpoint[2][1], SweeperCheckpoint[2][2], 3.0);
	    SanitaryCheckpoint[playerid] = 3;
	}
	else if(SanitaryCheckpoint[playerid] == 3)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[3][0], SweeperCheckpoint[3][1], SweeperCheckpoint[3][2], 3.0);
	    SanitaryCheckpoint[playerid] = 4;
	}
	else if(SanitaryCheckpoint[playerid] == 4)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[4][0], SweeperCheckpoint[4][1], SweeperCheckpoint[4][2], 3.0);
	    SanitaryCheckpoint[playerid] = 5;
	}
	else if(SanitaryCheckpoint[playerid] == 5)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[5][0], SweeperCheckpoint[5][1], SweeperCheckpoint[5][2], 3.0);
	    SanitaryCheckpoint[playerid] = 6;
	}
	else if(SanitaryCheckpoint[playerid] == 6)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[6][0], SweeperCheckpoint[6][1], SweeperCheckpoint[6][2], 3.0);
	    SanitaryCheckpoint[playerid] = 7;
	}
	else if(SanitaryCheckpoint[playerid] == 7)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[7][0], SweeperCheckpoint[7][1], SweeperCheckpoint[7][2], 3.0);
	    SanitaryCheckpoint[playerid] = 8;
	}
	else if(SanitaryCheckpoint[playerid] == 8)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[8][0], SweeperCheckpoint[8][1], SweeperCheckpoint[8][2], 3.0);
	    SanitaryCheckpoint[playerid] = 9;
	}
	else if(SanitaryCheckpoint[playerid] == 9)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[9][0], SweeperCheckpoint[9][1], SweeperCheckpoint[9][2], 3.0);
	    SanitaryCheckpoint[playerid] = 10;
	}
	else if(SanitaryCheckpoint[playerid] == 10)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[10][0], SweeperCheckpoint[10][1], SweeperCheckpoint[10][2], 3.0);
	    SanitaryCheckpoint[playerid] = 11;
	}
	else if(SanitaryCheckpoint[playerid] == 11)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[11][0], SweeperCheckpoint[11][1], SweeperCheckpoint[11][2], 3.0);
	    SanitaryCheckpoint[playerid] = 12;
	}
	else if(SanitaryCheckpoint[playerid] == 12)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[12][0], SweeperCheckpoint[12][1], SweeperCheckpoint[12][2], 3.0);
	    SanitaryCheckpoint[playerid] = 13;
	}
	else if(SanitaryCheckpoint[playerid] == 13)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[13][0], SweeperCheckpoint[13][1], SweeperCheckpoint[13][2], 3.0);
	    SanitaryCheckpoint[playerid] = 14;
	}
	else if(SanitaryCheckpoint[playerid] == 14)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[14][0], SweeperCheckpoint[14][1], SweeperCheckpoint[14][2], 3.0);
	    SanitaryCheckpoint[playerid] = 15;
	}
	else if(SanitaryCheckpoint[playerid] == 15)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[15][0], SweeperCheckpoint[15][1], SweeperCheckpoint[15][2], 3.0);
	    SanitaryCheckpoint[playerid] = 16;
	}
	else if(SanitaryCheckpoint[playerid] == 16)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[16][0], SweeperCheckpoint[16][1], SweeperCheckpoint[16][2], 3.0);
	    SanitaryCheckpoint[playerid] = 17;
	}
	else if(SanitaryCheckpoint[playerid] == 17)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[17][0], SweeperCheckpoint[17][1], SweeperCheckpoint[17][2], 3.0);
	    SanitaryCheckpoint[playerid] = 18;
	}
	else if(SanitaryCheckpoint[playerid] == 18)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[18][0], SweeperCheckpoint[18][1], SweeperCheckpoint[18][2], 3.0);
	    SanitaryCheckpoint[playerid] = 19;
	}
	else if(SanitaryCheckpoint[playerid] == 19)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[19][0], SweeperCheckpoint[19][1], SweeperCheckpoint[19][2], 3.0);
	    SanitaryCheckpoint[playerid] = 20;
	}
	else if(SanitaryCheckpoint[playerid] == 20)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[20][0], SweeperCheckpoint[20][1], SweeperCheckpoint[20][2], 3.0);
	    SanitaryCheckpoint[playerid] = 21;
	}
	else if(SanitaryCheckpoint[playerid] == 21)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[21][0], SweeperCheckpoint[21][1], SweeperCheckpoint[21][2], 3.0);
	    SanitaryCheckpoint[playerid] = 22;
	}
	else if(SanitaryCheckpoint[playerid] == 22)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[22][0], SweeperCheckpoint[22][1], SweeperCheckpoint[22][2], 3.0);
	    SanitaryCheckpoint[playerid] = 23;
	}
	else if(SanitaryCheckpoint[playerid] == 23)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[23][0], SweeperCheckpoint[23][1], SweeperCheckpoint[23][2], 3.0);
	    SanitaryCheckpoint[playerid] = 24;
	}
	else if(SanitaryCheckpoint[playerid] == 24)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[24][0], SweeperCheckpoint[24][1], SweeperCheckpoint[24][2], 3.0);
	    SanitaryCheckpoint[playerid] = 25;
	}
	else if(SanitaryCheckpoint[playerid] == 25)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[25][0], SweeperCheckpoint[25][1], SweeperCheckpoint[25][2], 3.0);
	    SanitaryCheckpoint[playerid] = 26;
	}
	else if(SanitaryCheckpoint[playerid] == 26)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[26][0], SweeperCheckpoint[26][1], SweeperCheckpoint[26][2], 3.0);
	    SanitaryCheckpoint[playerid] = 27;
	}
	else if(SanitaryCheckpoint[playerid] == 27)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[27][0], SweeperCheckpoint[27][1], SweeperCheckpoint[27][2], 3.0);
	    SanitaryCheckpoint[playerid] = 28;
	}
	else if(SanitaryCheckpoint[playerid] == 28)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[28][0], SweeperCheckpoint[28][1], SweeperCheckpoint[28][2], 3.0);
	    SanitaryCheckpoint[playerid] = 29;
	}
	else if(SanitaryCheckpoint[playerid] == 29)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[29][0], SweeperCheckpoint[29][1], SweeperCheckpoint[29][2], 3.0);
	    SanitaryCheckpoint[playerid] = 30;
	}
	else if(SanitaryCheckpoint[playerid] == 30)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[30][0], SweeperCheckpoint[30][1], SweeperCheckpoint[30][2], 3.0);
	    SanitaryCheckpoint[playerid] = 31;
	}
	else if(SanitaryCheckpoint[playerid] == 31)
	{
	    DisablePlayerCheckpoint(playerid);
	    SanitaryStarted[playerid] = 9999;
	    SanitaryCheckpoint[playerid] = 0;
	    if(SweeperRoute[playerid] >= 4) SweeperRoute[playerid] += 1;
	    else SweeperRoute[playerid] = 1;

     	PlayerInfo[playerid][pMoney] += 50;
	    GivePlayerMoney(playerid, 50);
	    SavePlayer(playerid);

	    SCM(playerid, BOJA_ZELENA, "Zavrsili ste ciscenje grada, zaradili ste 50$.");
	}
	else if(SanitaryCheckpoint[playerid] == 32)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[31][0], SweeperCheckpoint[31][1], SweeperCheckpoint[31][2], 3.0);
	    SanitaryCheckpoint[playerid] = 33;
	}
	else if(SanitaryCheckpoint[playerid] == 33)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[32][0], SweeperCheckpoint[32][1], SweeperCheckpoint[32][2], 3.0);
	    SanitaryCheckpoint[playerid] = 34;
	}
	else if(SanitaryCheckpoint[playerid] == 34)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[33][0], SweeperCheckpoint[33][1], SweeperCheckpoint[33][2], 3.0);
	    SanitaryCheckpoint[playerid] = 35;
	}
	else if(SanitaryCheckpoint[playerid] == 35)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[34][0], SweeperCheckpoint[34][1], SweeperCheckpoint[34][2], 3.0);
	    SanitaryCheckpoint[playerid] = 36;
	}
	else if(SanitaryCheckpoint[playerid] == 36)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[35][0], SweeperCheckpoint[35][1], SweeperCheckpoint[35][2], 3.0);
	    SanitaryCheckpoint[playerid] = 37;
	}
	else if(SanitaryCheckpoint[playerid] == 37)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[36][0], SweeperCheckpoint[36][1], SweeperCheckpoint[36][2], 3.0);
	    SanitaryCheckpoint[playerid] = 38;
	}
	else if(SanitaryCheckpoint[playerid] == 38)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[37][0], SweeperCheckpoint[37][1], SweeperCheckpoint[37][2], 3.0);
	    SanitaryCheckpoint[playerid] = 39;
	}
	else if(SanitaryCheckpoint[playerid] == 39)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[38][0], SweeperCheckpoint[38][1], SweeperCheckpoint[38][2], 3.0);
	    SanitaryCheckpoint[playerid] = 40;
	}
	else if(SanitaryCheckpoint[playerid] == 40)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[39][0], SweeperCheckpoint[39][1], SweeperCheckpoint[39][2], 3.0);
	    SanitaryCheckpoint[playerid] = 41;
	}
	else if(SanitaryCheckpoint[playerid] == 41)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[40][0], SweeperCheckpoint[40][1], SweeperCheckpoint[40][2], 3.0);
	    SanitaryCheckpoint[playerid] = 42;
	}
	else if(SanitaryCheckpoint[playerid] == 42)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[41][0], SweeperCheckpoint[41][1], SweeperCheckpoint[41][2], 3.0);
	    SanitaryCheckpoint[playerid] = 43;
	}
	else if(SanitaryCheckpoint[playerid] == 43)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[42][0], SweeperCheckpoint[42][1], SweeperCheckpoint[42][2], 3.0);
	    SanitaryCheckpoint[playerid] = 44;
	}
	else if(SanitaryCheckpoint[playerid] == 44)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[43][0], SweeperCheckpoint[43][1], SweeperCheckpoint[43][2], 3.0);
	    SanitaryCheckpoint[playerid] = 45;
	}
	else if(SanitaryCheckpoint[playerid] == 45)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[44][0], SweeperCheckpoint[44][1], SweeperCheckpoint[44][2], 3.0);
	    SanitaryCheckpoint[playerid] = 46;
	}
	else if(SanitaryCheckpoint[playerid] == 46)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[45][0], SweeperCheckpoint[45][1], SweeperCheckpoint[45][2], 3.0);
	    SanitaryCheckpoint[playerid] = 47;
	}
	else if(SanitaryCheckpoint[playerid] == 47)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[46][0], SweeperCheckpoint[46][1], SweeperCheckpoint[46][2], 3.0);
	    SanitaryCheckpoint[playerid] = 48;
	}
	else if(SanitaryCheckpoint[playerid] == 48)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[47][0], SweeperCheckpoint[47][1], SweeperCheckpoint[47][2], 3.0);
	    SanitaryCheckpoint[playerid] = 49;
	}
	else if(SanitaryCheckpoint[playerid] == 49)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[48][0], SweeperCheckpoint[48][1], SweeperCheckpoint[48][2], 3.0);
	    SanitaryCheckpoint[playerid] = 50;
	}
	else if(SanitaryCheckpoint[playerid] == 50)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[49][0], SweeperCheckpoint[49][1], SweeperCheckpoint[49][2], 3.0);
	    SanitaryCheckpoint[playerid] = 51;
	}
	else if(SanitaryCheckpoint[playerid] == 51)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[50][0], SweeperCheckpoint[50][1], SweeperCheckpoint[50][2], 3.0);
	    SanitaryCheckpoint[playerid] = 52;
	}
	else if(SanitaryCheckpoint[playerid] == 52)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[51][0], SweeperCheckpoint[51][1], SweeperCheckpoint[51][2], 3.0);
	    SanitaryCheckpoint[playerid] = 53;
	}
	else if(SanitaryCheckpoint[playerid] == 53)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[52][0], SweeperCheckpoint[52][1], SweeperCheckpoint[52][2], 3.0);
	    SanitaryCheckpoint[playerid] = 54;
	}
	else if(SanitaryCheckpoint[playerid] == 54)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[53][0], SweeperCheckpoint[53][1], SweeperCheckpoint[53][2], 3.0);
	    SanitaryCheckpoint[playerid] = 55;
	}
	else if(SanitaryCheckpoint[playerid] == 55)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[54][0], SweeperCheckpoint[54][1], SweeperCheckpoint[54][2], 3.0);
	    SanitaryCheckpoint[playerid] = 56;
	}
	else if(SanitaryCheckpoint[playerid] == 56)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[55][0], SweeperCheckpoint[55][1], SweeperCheckpoint[55][2], 3.0);
	    SanitaryCheckpoint[playerid] = 57;
	}
	else if(SanitaryCheckpoint[playerid] == 57)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[56][0], SweeperCheckpoint[56][1], SweeperCheckpoint[56][2], 3.0);
	    SanitaryCheckpoint[playerid] = 58;
	}
	else if(SanitaryCheckpoint[playerid] == 58)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[57][0], SweeperCheckpoint[57][1], SweeperCheckpoint[57][2], 3.0);
	    SanitaryCheckpoint[playerid] = 59;
	}
	else if(SanitaryCheckpoint[playerid] == 59)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[58][0], SweeperCheckpoint[58][1], SweeperCheckpoint[58][2], 3.0);
	    SanitaryCheckpoint[playerid] = 60;
	}
	else if(SanitaryCheckpoint[playerid] == 60)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[59][0], SweeperCheckpoint[59][1], SweeperCheckpoint[59][2], 3.0);
	    SanitaryCheckpoint[playerid] = 61;
	}
	else if(SanitaryCheckpoint[playerid] == 61)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[60][0], SweeperCheckpoint[60][1], SweeperCheckpoint[60][2], 3.0);
	    SanitaryCheckpoint[playerid] = 62;
	}
	else if(SanitaryCheckpoint[playerid] == 62)
	{
	    SetPlayerCheckpoint(playerid, SweeperCheckpoint[61][0], SweeperCheckpoint[61][1], SweeperCheckpoint[61][2], 3.0);
	    SanitaryCheckpoint[playerid] = 63;
	}
	else if(SanitaryCheckpoint[playerid] == 63)
	{
	    DisablePlayerCheckpoint(playerid);
	    SanitaryStarted[playerid] = 9999;
	    SanitaryCheckpoint[playerid] = 0;
	    if(SweeperRoute[playerid] >= 4) SweeperRoute[playerid] += 1;
	    else SweeperRoute[playerid] = 1;

        PlayerInfo[playerid][pMoney] += 100;
	    GivePlayerMoney(playerid, 100);
	    SavePlayer(playerid);

	    SCM(playerid, BOJA_ZELENA, "Zavrsili ste ciscenje, zaradili ste 100$.");
	}

	//TAXI JOB
	if(TaxiDuty[playerid] != 9999) DisablePlayerCheckpoint(playerid);
	if(MechanicDuty[playerid] != 9999) DisablePlayerCheckpoint(playerid);
	//SMUGGLERS
	if(OnASmugglerMission[playerid] == 1)
	{
	    new vID;
	    vID = GetPlayerVehicleID(playerid);
	    TogglePlayerControllable(playerid, 0);
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			OnASmugglerMission[playerid] = 9999;
			DisablePlayerCheckpoint(playerid);
		}
		else if(!IsASmugglerCar(vID) && GetVehicleModel(vID) != 403)
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli kamionom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else if(!IsTrailerAttachedToVehicle(vID))
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli prikolicom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else
		{
			GameTextForPlayer(playerid, "~w~Utovaranje droge...", 60000, 3);
			DisablePlayerCheckpoint(playerid);
			SetTimerEx("AntiFreezePlayer", 60000, false, "i", playerid);
		}
	}
	else if(OnASmugglerMission[playerid] == 2)
	{
	    new vID;
	    vID = GetPlayerVehicleID(playerid);
	    TogglePlayerControllable(playerid, 0);
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			OnASmugglerMission[playerid] = 9999;
			DisablePlayerCheckpoint(playerid);
		}
		else if(!IsASmugglerCar(vID) && GetVehicleModel(vID) != 403)
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli kamionom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else if(!IsTrailerAttachedToVehicle(vID))
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli prikolicom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else
		{
			GameTextForPlayer(playerid, "~w~Istovaranje robe...", 60000, 3);
			DisablePlayerCheckpoint(playerid);
			SetTimerEx("AntiFreezePlayer", 60000, false, "i", playerid);
		}
	}
	else if(OnASmugglerMission[playerid] == 11)
	{
	    new vID;
	    vID = GetPlayerVehicleID(playerid);
	    TogglePlayerControllable(playerid, 0);
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			OnASmugglerMission[playerid] = 9999;
			DisablePlayerCheckpoint(playerid);
		}
		else if(!IsASmugglerCar(vID) && GetVehicleModel(vID) != 403)
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli kamionom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else if(!IsTrailerAttachedToVehicle(vID))
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli prikolicom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else
		{
			GameTextForPlayer(playerid, "~w~Utovaranje materijala...", 60000, 3);
			DisablePlayerCheckpoint(playerid);
			SetTimerEx("AntiFreezePlayer", 60000, false, "i", playerid);
		}
	}
	else if(OnASmugglerMission[playerid] == 12)
	{
	    new vID;
	    vID = GetPlayerVehicleID(playerid);
	    TogglePlayerControllable(playerid, 0);
	    if(!IsPlayerInAnyVehicle(playerid))
		{
			SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu! Misija prekinuta!");
			OnASmugglerMission[playerid] = 9999;
			DisablePlayerCheckpoint(playerid);
		}
		else if(!IsASmugglerCar(vID) && GetVehicleModel(vID) != 403)
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli kamionom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else if(!IsTrailerAttachedToVehicle(vID))
		{
		    SCM(playerid, BOJA_CRVENA, "GRESKA: Niste dosli prikolicom! Misija prekinuta!");
		    OnASmugglerMission[playerid] = 9999;
		    DisablePlayerCheckpoint(playerid);
		}
		else
		{
			GameTextForPlayer(playerid, "~w~Istovaranje robe...", 60000, 3);
			DisablePlayerCheckpoint(playerid);
			SetTimerEx("AntiFreezePlayer", 60000, false, "i", playerid);
		}
	}
	//TUTORIAL
	if(PlayerOnTutorial[playerid] != 9999)
	{
		if(PlayerInfo[playerid][pOnTut] == 1) // AERODROM
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 1/9\n");
			format(str2, sizeof(str2), "Usli ste u prvi checkpoint. To znaci da se nalazite na samom pocetku, SPAWNu. \n");
			format(str3, sizeof(str3), "Spawn je mesto gde se svaki igrac 'radja' nakon registracije odnosno prvog logina. \n");
			format(str4, sizeof(str4), "Potrudicemo se da vas kroz ovaj tutorijal upoznamo sa gradom i pomognemo da dobijete \n");
			format(str5, sizeof(str5), "sve osnovno sto je potrebno za pocetak igranja na nasem serveru. Nastavljamo sa tutorijalom, \n");
			format(str6, sizeof(str6), "predlazemo Vam da sednete u neko od slobodnih plavih vozila i iznajmite ga (/iznajmivozilo). \n");
			format(str, sizeof(str), "%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - UVOD", str, "U redu", "");
		}
		else if(PlayerInfo[playerid][pOnTut] == 2) // OPSTINA
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 2/9\n");
			format(str2, sizeof(str2), "Usli ste u drugi checkpoint. To znaci da se nalazite ispred Opstine, kod Trga. \n");
			format(str3, sizeof(str3), "Opstina je mesto gde se odvijaju glavne radnje. U Opstini se vrsi svaka 'papirologija'. \n");
			format(str4, sizeof(str4), "Zaposljavate se, vadite licnu kartu, placate porez, registrujete vozila, i slicno. \n");
			format(str5, sizeof(str5), "Za pocetak, predlazemo Vam da udjete u Opstinu i odete do Saltera 5 i izvadite licnu kartu. \n");
			format(str6, sizeof(str6), "A zatim, posle vadjenja licne karte, idite to Saltera za zaposljavanje (Biro) i zaposlite se. \n");
			format(str7, sizeof(str7), "Kada to obavite, nastavite sa tutorialom do sledeceg checkpointa. \n");
			format(str, sizeof(str), "%s%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6, str7);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - OPSTINA", str, "U redu", "");
		}
	 	else if(PlayerInfo[playerid][pOnTut] == 3) // LSPD
	 	{
	 	    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 3/9\n");
			format(str2, sizeof(str2), "Usli ste u treci checkpoint. To znaci da se nalazite ispred Policija, kod Trga. \n");
			format(str3, sizeof(str3), "Policija je mesto cijim prostorijama ne bi ste hteli da se nalazite, i gde takodje \n");
			format(str4, sizeof(str4), "ne bi trebalo da se zadrzavate dugo u blizni. U Policiji se svi Kriminalci privode pravdi, \n");
			format(str5, sizeof(str5), "kupuju se dozvole, placaju kaucije i slicno. Za clanove Policije, nije odredjeno ko moze biti \n");
			format(str6, sizeof(str6), "Policajac, svaki igrac je u mogucnosti da to bude, samo ako zasluzi i ukoliko mu Upravnik to dozvoli. \n");
			format(str, sizeof(str), "%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - LSPD", str, "U redu", "");
		}
		else if(PlayerInfo[playerid][pOnTut] == 4) // HOSPITAL
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 4/9\n");
			format(str2, sizeof(str2), "Usli ste u cetvrti checkpoint. To znaci da se nalazite ispred Bolnice. \n");
			format(str3, sizeof(str3), "Bolnica je mesto gde se svaki igrac nakon svoje smrti pojavljuje. \n");
			format(str4, sizeof(str4), "Takodje, ukoliko ste bolesni, mozete dodji do Bolnice da bi ste izleceli. \n");
			format(str5, sizeof(str5), "U suprotnom, bolest ce vas ubiti. To je sve sto se tice Bolnice, nastavljamo sa tutorijalom. \n");
	  		format(str, sizeof(str), "%s%s%s%s%s", str1, str2, str3, str4, str5);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - BOLNICA", str, "U redu", "");
		}
		else if(PlayerInfo[playerid][pOnTut] == 5) // BANK
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 5/9\n");
			format(str2, sizeof(str2), "Usli ste u peti checkpoint. To znaci da se nalazite ispred Banke. \n");
			format(str3, sizeof(str3), "Banka je mesto gde je vas novac siguran. Niko Vam ne moze ukrasti nista sa vaseg racuna. \n");
			format(str4, sizeof(str4), "U Banku mozete stavljati novac, podizati iz nje ili sa Bankomata, cak i podici kredite. \n");
			format(str5, sizeof(str5), "Predlazemo Vam da sada udjete u banku, i za pocetak otvorite racun u njoj na salteru za otvaranje (/racun). \n");
			format(str6, sizeof(str6), "Kada to obavite, nastavite sa Tutorialom do sledeceg checkpointa. \n");
			format(str, sizeof(str), "%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - BANKA", str, "U redu", "");
		}
		else if(PlayerInfo[playerid][pOnTut] == 6) // PARKING
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 6/9\n");
			format(str2, sizeof(str2), "Usli ste u sesti checkpoint. To znaci da se nalazite ispred Parkinga. \n");
			format(str3, sizeof(str3), "Parking je mesto gde mozete staviti vase vozilo na prodaju po odredjenoj ceni. \n");
			format(str4, sizeof(str4), "Nakon stavljanja vozila na prodaju, necete moci vise da vozite vase vozilo. \n");
			format(str5, sizeof(str5), "Igraca kada sedne u vozilo, moze ga kupiti i time postati novi vlasnik vozila. \n");
			format(str6, sizeof(str6), "Nastavljamo sa tutorijalom, jos samo malo i kraj. Idite do sledeceg checkpointa. \n");
			format(str, sizeof(str), "%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - PARKING", str, "U redu", "");
		}
		else if(PlayerInfo[playerid][pOnTut] == 7) // COUNT AND SHUTZ
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 7/9\n");
			format(str2, sizeof(str2), "Usli ste u sedmi checkpoint. To znaci da se nalazite ispred Count and Shutz. \n");
			format(str3, sizeof(str3), "Count and Shutz je samo jedno od mnogih 'salona' automobila. U ovom salonu se \n");
			format(str4, sizeof(str4), "nalaze sporija i losija vozila, a za pocetak su Vam sasvim dovoljna. Kasnije, u drugim \n");
			format(str5, sizeof(str5), "salonima i gradovima, mozete naci bolja vozila. Jos samo malo, izdrzite. Idite do sledeceg checkpointa. \n");
			format(str, sizeof(str), "%s%s%s%s%s", str1, str2, str3, str4, str5);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - COUNT AND SHUTZ", str, "U redu", "");
		}
		else if(PlayerInfo[playerid][pOnTut] == 8) // GYM
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 8/9\n");
			format(str2, sizeof(str2), "Usli ste u osmi checkpoint. To znaci da se nalazite ispred Teretane. \n");
			format(str3, sizeof(str3), "Teretana je mesto gde ucite da se bijete. Postoje razliciti nacini borbe. \n");
			format(str4, sizeof(str4), "A njih mozete izabrati i platiti za njihovo treniranje i nauciti ih. \n");
			format(str5, sizeof(str5), "Ostao je jos samo jedan checkpoint i zavrsili ste sa tutorijalom. Ne brinite, \n");
			format(str6, sizeof(str6), "blizu je, idite do njega i zavrsite sa upoznavanjem servera. \n");
			format(str, sizeof(str), "%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - TERETANA", str, "U redu", "");
		}
		else if(PlayerInfo[playerid][pOnTut] == 9) // Binco
		{
		    DisablePlayerCheckpoint(playerid);
			format(str1, sizeof(str1), "CHECKPOINT 9/9\n");
			format(str2, sizeof(str2), "Usli ste u poslednji checkpoint. To znaci da se nalazite ispred prodavnice odece Binco. \n");
			format(str3, sizeof(str3), "Binco je mesto gde mozete 'kupiti novo odelo' za vas odnosno promeniti vas skin. \n");
			format(str4, sizeof(str4), "Binco je samo jedna od prodavnica odece, i naravno u njoj ne mozete pronaci svaki moguci skin. \n");
			format(str5, sizeof(str5), "Ukoliko nekog skina nema u ovoj prodavnici, morate potraziti druge prodavnice. \n");
			format(str6, sizeof(str6), "Ako niste zadovoljni vasim sadasnjim izgledom, predlazemo Vam da udjete u prodavnicu \n");
			format(str7, sizeof(str7), "i promenite skin. (/skin). Mi cemo Vam dati novac za skin, koji niste u obavezi da kupite. \n");
			format(str, sizeof(str), "%s%s%s%s%s%s%s", str1, str2, str3, str4, str5, str6, str7);
			SPD(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "TUTORIAL - BINCO", str, "U redu", "");
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(newkeys == KEY_SECONDARY_ATTACK)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 593.1841, -1249.7542, 18.2069)) // BANK ENTER
		{
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
			SetPlayerPos(playerid, 603.5001, -1269.4661, 996.6459);
			InBank[playerid] = 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 603.5001, -1276.2461, 995.6459))  // BANK EXIT
		{
			SetPlayerPos(playerid, 596.9100, -1248.3107, 18.2580);
			InBank[playerid] = 9999;
		}

        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1479.3827, -1770.1901, 18.7958)) // CITY HALL ENTER
		{
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
			SetPlayerPos(playerid, 1479.2421, -1779.2054, 999.0159);
			InCityHall[playerid] = 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1483.3208, -1779.2054, 999.0159))  // CITY HALL EXIT
		{
			SetPlayerPos(playerid, 1482.6449, -1770.1901, 18.7958);
			InCityHall[playerid] = 9999;
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1553.9333, -1675.6754, 16.1953)) // PoliceHQ ENTER
		{
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
			SetPlayerPos(playerid, 246.783996, 63.900199, 1003.640625);
			SetPlayerInterior(playerid, 6);
			InPoliceHQ[playerid] = 1;
		}
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 246.783996, 63.900199, 1003.640625)) // PoliceHQ EXIT
		{
			SetPlayerPos(playerid, 1553.9333, -1675.6754, 16.1953);
			SetPlayerInterior(playerid, 0);
			InPoliceHQ[playerid] = 9999;
		}

        for(new b = 0; b < sizeof(BusinessInfo); b++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ]))
	        {
	            if(GetPlayerMoney(playerid) < BusinessInfo[b][bEnterFee]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da bi usli u biznis!");
	            if(BusinessInfo[b][bLocked] == 1) return 1;
                PlayerInfo[playerid][pMoney] -= -BusinessInfo[b][bEnterFee];
				GivePlayerMoney(playerid, -BusinessInfo[b][bEnterFee]);
	            SavePlayer(playerid);
	            TogglePlayerControllable(playerid, 0);
		    	SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
	            SetPlayerPos(playerid, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]);
	            SetPlayerFacingAngle(playerid, BusinessInfo[b][bExitA]);
	            SetPlayerInterior(playerid, BusinessInfo[b][bInInt]);
	            SetPlayerVirtualWorld(playerid, BusinessInfo[b][bInVW]);
	            BusinessInfo[b][bMoney] += BusinessInfo[b][bEnterFee];
	            InBusiness[playerid] = b;
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0, BusinessInfo[b][bExitX], BusinessInfo[b][bExitY], BusinessInfo[b][bExitZ]) && GetPlayerVirtualWorld(playerid) == BusinessInfo[b][bInVW])
	        {
	            SetPlayerPos(playerid, BusinessInfo[b][bEnterX], BusinessInfo[b][bEnterY], BusinessInfo[b][bEnterZ]);
	            SetPlayerFacingAngle(playerid, BusinessInfo[b][bEnterA]);
	            SetPlayerInterior(playerid, BusinessInfo[b][bInt]);
	            SetPlayerVirtualWorld(playerid, BusinessInfo[b][bVW]);
	            InBusiness[playerid] = 9999;
	            return 1;
	        }
	    }

	    for(new b = 0; b < sizeof(HouseInfo); b++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[b][hEnterX], HouseInfo[b][hEnterY], HouseInfo[b][hEnterZ]))
	        {
	            if(HouseInfo[b][hLocked] == 1) return 1;
	            TogglePlayerControllable(playerid, 0);
		    	SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
	            SetPlayerPos(playerid, HouseInfo[b][hExitX], HouseInfo[b][hExitY], HouseInfo[b][hExitZ]);
	            SetPlayerFacingAngle(playerid, HouseInfo[b][hExitA]);
	            SetPlayerInterior(playerid, HouseInfo[b][hInInt]);
	            SetPlayerVirtualWorld(playerid, HouseInfo[b][hInVW]);
	            InHouse[playerid] = b;
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[b][hExitX], HouseInfo[b][hExitY], HouseInfo[b][hExitZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[b][hInVW])
	        {
				if(InHouse[playerid] == 9999) return 1;
	            SetPlayerPos(playerid, HouseInfo[b][hEnterX], HouseInfo[b][hEnterY], HouseInfo[b][hEnterZ]);
	            SetPlayerFacingAngle(playerid, HouseInfo[b][hEnterA]);
	            SetPlayerInterior(playerid, HouseInfo[b][hInt]);
	            SetPlayerVirtualWorld(playerid, HouseInfo[b][hVW]);
	            InHouse[playerid] = 9999;
	            return 1;
	        }
	    }

	    for(new a = 0; a < sizeof(ApartmentInfo); a++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, ApartmentInfo[a][aEnterX], ApartmentInfo[a][aEnterY], ApartmentInfo[a][aEnterZ]))
	        {
	            if(ApartmentInfo[a][aLocked] == 1) return 1;
	            TogglePlayerControllable(playerid, 0);
		    	SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
	            SetPlayerPos(playerid, ApartmentInfo[a][aExitX], ApartmentInfo[a][aExitY], ApartmentInfo[a][aExitZ]);
	            SetPlayerFacingAngle(playerid, ApartmentInfo[a][aExitA]);
	            SetPlayerInterior(playerid, ApartmentInfo[a][aInInt]);
	            SetPlayerVirtualWorld(playerid, ApartmentInfo[a][aInVW]);
	            InApartment[playerid] = a;
	            return 1;
	        }
	        else if(IsPlayerInRangeOfPoint(playerid, 2.0, ApartmentInfo[a][aExitX], ApartmentInfo[a][aExitY], ApartmentInfo[a][aExitZ]) && GetPlayerVirtualWorld(playerid) == ApartmentInfo[a][aInVW])
	        {
	            if(InApartment[playerid] == 9999) return 1;
	            SetPlayerPos(playerid, ApartmentInfo[a][aEnterX], ApartmentInfo[a][aEnterY], ApartmentInfo[a][aEnterZ]);
	            SetPlayerFacingAngle(playerid, ApartmentInfo[a][aEnterA]);
	            SetPlayerInterior(playerid, ApartmentInfo[a][aInt]);
	            SetPlayerVirtualWorld(playerid, ApartmentInfo[a][aVW]);
	            InApartment[playerid] = 9999;
	            return 1;
	        }
	    }

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 2522.4756, -1679.2355, 15.4970))
		{
		    if(GSFHQLocked == 1) return 1;
		    TogglePlayerControllable(playerid, 0);
	    	SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
		    SetPlayerPos(playerid, 2496.05, -1692.73, 1015.75);
		    SetPlayerInterior(playerid, 3);
		    SetPlayerVirtualWorld(playerid, 99);
		    InGSFHQ[playerid] = 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2496.05, -1692.73, 1015.75) && GetPlayerVirtualWorld(playerid) == 99)
		{
		    SetPlayerPos(playerid, 2522.4756, -1679.2355, 15.4970);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    InGSFHQ[playerid] = 9999;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2045.5447, -1116.1219, 26.361))
		{
		    if(BallasHQLocked == 1) return 1;
		    TogglePlayerControllable(playerid, 0);
	    	SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
		    SetPlayerPos(playerid, 2365.3, -1134.92, 1051.91);
		    SetPlayerInterior(playerid, 8);
		    SetPlayerVirtualWorld(playerid, 99);
		    InBallasHQ[playerid] = 1;
		}
		else if((IsPlayerInRangeOfPoint(playerid, 3.0, 2365.3, -1134.5808, 1050.875)) && (GetPlayerVirtualWorld(playerid) == 99))
		{
		    SetPlayerPos(playerid, 2045.5447, -1116.1219, 26.361);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    InBallasHQ[playerid] = 9999;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1684.8185, -2099.0588, 13.8343))
		{
			if(VLAHQLocked == 1) return 1;
			TogglePlayerControllable(playerid, 0);
  			SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
		    SetPlayerPos(playerid, 2196.79, -1204.35, 1050.05);
		    SetPlayerInterior(playerid, 6);
		    SetPlayerVirtualWorld(playerid, 99);
		    InVLAHQ[playerid] = 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2196.79, -1204.35, 1050.05) && GetPlayerVirtualWorld(playerid) == 99)
		{
		    SetPlayerPos(playerid, 1684.8185, -2099.0588, 13.8343);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    InVLAHQ[playerid] = 9999;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2808.0615, -1189.7864, 25.3446))
		{
		    if(LSVHQLocked == 1) return 1;
		    TogglePlayerControllable(playerid, 0);
    		SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
		    SetPlayerPos(playerid, 82.95, 1322.44, 1084.99);
		    SetPlayerInterior(playerid, 9);
		    SetPlayerVirtualWorld(playerid, 99);
		    InLSVHQ[playerid] = 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 82.95, 1322.44, 1084.99) && GetPlayerVirtualWorld(playerid) == 99)
		{
		    SetPlayerPos(playerid, 2808.0615, -1189.7864, 25.3446);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    InLSVHQ[playerid] = 9999;
		}

		if(IsPlayerInRangeOfPoint(playerid, 3.0,  2047.0300, -1908.0302, 13.5469))
		{
		    SetPlayerPos(playerid, 1494.325195, 1304.942871, 1093.289062);
		    SetPlayerInterior(playerid, 3);
		    SetPlayerVirtualWorld(playerid, 99);
		    InDrivingSchool[playerid] = 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1494.325195, 1304.942871, 1093.289062) && GetPlayerVirtualWorld(playerid) == 99)
		{
		    SetPlayerPos(playerid, 2047.0300, -1908.0302, 13.5469);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    InDrivingSchool[playerid] = 9999;
		}

		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1516.5283, -1452.8676, 14.2031)) // DETECTIVE ENTER
		{
		    SetPlayerPos(playerid, -135.5, 146, 1001.1);
		    TogglePlayerControllable(playerid, 0);
		   	SetTimerEx("AntiFreezePlayer", 2000, false, "i", playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -135.5, 146, 1001.1)) // DETECTIVE EXIT
		{
		    SetPlayerPos(playerid, 1521.3309, -1452.8676, 14.2031);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		}
	}

	if(newkeys == KEY_CROUCH)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1627.8000000, -1145.9000000, 23.1000000)) // PARKING
		{
			new money = GetPlayerMoney(playerid);
			new sendername[MAX_PLAYER_NAME];
			sendername = GetPlayerNameEx(playerid);
			new id = 1;
			new str[128];
			if(bpgate1opened == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Kapija je vec otvorena!");
			if(SpecBusinessInfo[id][sbOwned] == 1)
			{
			    if(money < SpecBusinessInfo[id][sbEnterFee]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da bi otvorili kapiju!");
			    SpecBusinessInfo[id][sbMoney] += SpecBusinessInfo[id][sbEnterFee];
			    if(PlayerInfo[playerid][pSBizzID] != 1)
			    {
			        PlayerInfo[playerid][pMoney] -= SpecBusinessInfo[id][sbEnterFee];
			     	GivePlayerMoney(playerid, -SpecBusinessInfo[id][sbEnterFee]);
			     	SavePlayer(playerid);
			     	SCM(playerid, BOJA_CRVENA, "Platili ste i otvorili kapiju na parkingu!");
			     	format(str, sizeof(str), ""CRVENA"%s"BELA" placa i otvara kapiju na parkingu.!", sendername);
			     	SRM(15.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
				}
				else
				{
					SCM(playerid, BOJA_ZELENA, "Otvorili ste kapiju na parkingu.");
					format(str, sizeof(str), ""CRVENA"%s"BELA" otvara kapiju na parkingu.", sendername);
			     	SRM(15.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
				}
		     	MoveDynamicObject(bpgate1, 1618.8000000,-1145.9000000,23.1000000, 1.0, 0.0000000, 0.0000000, 0.0000000);
		     	bpgate1opened = 1;
		     	SetTimer("bpgate1close", 10000, 0);
		     	SavePlayer(playerid);
		     	SaveSpecBizz(id);
			}
			else
			{
				MoveDynamicObject(bpgate1, 1618.8000000, -1145.9000000, 23.1000000, 1.0, 0.0000000, 0.0000000, 0.0000000);
				bpgate1opened = 1;
				SetTimer("bpgate1close", 10000, 0);
		     	SCM(playerid, BOJA_ZELENA, "Otvorili ste kapiju na parkingu.");
		     	format(str, sizeof(str), ""CRVENA"%s"BELA" otvara kapiju na parkingu.", sendername);
		     	SRM(15.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 1647.6000000, -1145.9000000, 23.1000000)) // PARKING
		{
		    new money = GetPlayerMoney(playerid);
			new sendername[MAX_PLAYER_NAME];
			sendername = GetPlayerNameEx(playerid);
			new id = 1;
			new str[128];
			if(bpgate2opened == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Kapija je vec otvorena!");
			if(SpecBusinessInfo[id][sbOwned] == 1)
			{
			    if(money < SpecBusinessInfo[id][sbEnterFee]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da bi otvorili kapiju!");
			    SpecBusinessInfo[id][sbMoney] += SpecBusinessInfo[id][sbEnterFee];
		     	if(PlayerInfo[playerid][pSBizzID] != 1)
			    {
			        PlayerInfo[playerid][pMoney] -= SpecBusinessInfo[id][sbEnterFee];
			     	GivePlayerMoney(playerid, -SpecBusinessInfo[id][sbEnterFee]);
			     	SavePlayer(playerid);
			     	SCM(playerid, BOJA_CRVENA, "Platili ste i otvorili kapiju na parkingu!");
			     	format(str, sizeof(str), ""CRVENA"%s"BELA" placa i otvara kapiju na parkingu!", sendername);
		     		SRM(15.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
				}
				else
				{
					SCM(playerid, BOJA_ZELENA, "Otvorili ste kapiju na parkingu!");
					format(str, sizeof(str), ""CRVENA"%s"BELA" otvara kapiju na parkingu!", sendername);
		     		SRM(15.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
				}
		     	MoveDynamicObject(bpgate2, 1656.6000000, -1145.9000000, 23.1000000, 1.0, 0.0000000, 0.0000000, 180.0000000);
		     	bpgate2opened = 1;
		     	SetTimer("bpgate2close", 10000, 0);
		     	SavePlayer(playerid);
		     	SaveSpecBizz(id);
			}
			else
			{
				MoveDynamicObject(bpgate2, 1656.6000000, -1145.9000000, 23.1000000, 1.0, 0.0000000, 0.0000000, 180.0000000);
				bpgate2opened = 1;
				SetTimer("bpgate2close", 10000, 0);
		     	SCM(playerid, BOJA_ZELENA, "Otvorili ste kapiju na parkingu!");
		     	format(str, sizeof(str), ""CRVENA"%s"BELA" otvara kapiju na parkingu!", sendername);
		     	SRM(15.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2530.80005, -1482.25000, 24.30000)) // MEHANICARSKA GARAZA
		{
		    new sendername[MAX_PLAYER_NAME], str[128];
		    sendername = GetPlayerNameEx(playerid);
		    if(mechanicdooropened == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Garaza je vec otvorena!");
		    if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste mehanicar!");
		    MoveDynamicObject(mechanicdoor, 2530.80005, -1482.25000, 20.7, 1.0, 0.00000, 0.00000, -1.00000);
		    SetTimer("mechanicdoorclose", 10000, 0);
		    mechanicdooropened = 1;
		    SCM(playerid, BOJA_ZELENA, "Otvorili ste vrata od garaze, zatvorice se sama za 10 sekundi.");
		    format(str, sizeof(str), ""PLAVA"%s otvara vrata od garaze.", sendername);
		    SRM(15.0, playerid, str, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA, BOJA_BELA);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1589.7000000, -1638.3101000, 14.2700000)) // LSPD
		{
		    new sendername[MAX_PLAYER_NAME], str[128];
			sendername = GetPlayerNameEx(playerid);
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(pdgarageopened == 1) return 1;
			MoveDynamicObject(pdgarage, 1597.7000000, -1638.3101000, 14.2700000, 5.0, 0.0000000, 0.0000000, 90.0000000);
			pdgarageopened = 1;
			SCM(playerid, BOJA_ZELENA, "Otvorili ste PD garazu, zatvorice se sama za 10 sekundi!");
			format(str, sizeof(str), "%s otvara garazu LSPDa!", sendername);
			SRM(15.0, playerid, str, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA);
			SetTimer("pdgarageclose", 10000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1582.4000000, -1638.0500000, 15.0000000)) // LSPD
		{
		    new sendername[MAX_PLAYER_NAME], str[128];
			sendername = GetPlayerNameEx(playerid);
			if(PlayerInfo[playerid][pOMember] != 1 || PlayerInfo[playerid][pOLeader] != 1) return 1;
			if(pdgaragedooropened == 1) return 1;
			MoveDynamicObject(pdgaragedoor, 1582.4000000, -1638.0500000, 12.5000000, 5.0, 0.0000000, 0.0000000, 90.0000000);
			pdgaragedooropened = 1;
			SCM(playerid, BOJA_ZELENA, "Otvorili ste PD garazu, zatvorice se sama za 10 sekundi!");
			format(str, sizeof(str), "%s otvara garazu LSPDa!", sendername);
			SRM(15.0, playerid, str, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA);
			SetTimer("pdgaragedoorclose", 10000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 250.611, 63.2995, 1003.18))
		{
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(lspddoor1opened == 1) return 1;
			MoveDynamicObject(lspddoor1, 250.611, 63.2995, 1000.18, 1.0, 0.00, 0.00, 0.00);
			lspddoor1opened = 1;
			SetTimer("cell1close", 5000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 246.228, 72.4962, 1003.04))
		{
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(lspddoor2opened == 1) return 1;
			MoveDynamicObject(lspddoor2, 246.228, 72.4962, 1000.04, 1.0, 0.00, 0.00, 90.00);
			lspddoor2opened = 1;
			SetTimer("lspddoor2close", 5000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 250.524, 67.650, 1002.58))
		{
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(lspdwindowopened == 1) return 1;
			MoveDynamicObject(lspdwindow, 250.524, 67.650, 999.58, 1.0, 0.00, 0.00, 90.00);
			lspdwindowopened = 1;
			SetTimer("lspdwindowclose", 5000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 266.29559, 79.27300, 1002.59998))
		{
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(cell1opened == 1) return 1;
			MoveDynamicObject(cell1, 266.29559, 77.55000, 1002.59998, 1.0, 0.00000, 0.00000, 0.00000);
			cell1opened = 1;
			SetTimer("cell1close", 5000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 266.29559, 83.77230, 1002.59998))
		{
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(cell2opened == 1) return 1;
			MoveDynamicObject(cell2, 266.29559, 82.05180, 1002.59998, 1.0, 0.00000, 0.00000, 0.00000);
			cell2opened = 1;
			SetTimer("cell2close", 5000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 266.29559, 88.26910, 1002.59998))
		{
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(cell3opened == 1) return 1;
			MoveDynamicObject(cell3, 266.29559, 86.54900, 1002.59998, 1.0, 0.00000, 0.00000, 0.00000);
			cell3opened = 1;
			SetTimer("cell3close", 5000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 247.98140, 87.49130, 1005.20001))
		{
			if(PlayerInfo[playerid][pOMember] != 1) return 1;
			if(cellroomdooropened == 1) return 1;
			MoveDynamicObject(cellroomdoor, 247.98140, 85.8, 1005.20001, 1.0, 0.00000, 0.00000, 0.00000);
			cellroomdooropened = 1;
			SetTimer("cellroomdoorclose", 5000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 1534.7998000, -1451.4004000, 14.6000000))
		{
		    if(PlayerInfo[playerid][pJob] != 1) return 1;
		    if(detectivegateopened == 1) return 1;
			MoveDynamicObject(detectivegate, 1534.7998000, -1451.4004000, 10.0000000, 1.0, 0.00000, 0.00000, 90.00000);
			detectivegateopened = 1;
			SetTimer("detectivegateclose", 10000, 0);
		}
		//SMUGGLERS GATES
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2227.89941, -2209.22607, 12.54400))
		{
		    if(PlayerInfo[playerid][pJob] != 11 && PlayerInfo[playerid][pJob] != 12) return 1;
		    if(smugglergate1opened == 1) return 1;
			MoveDynamicObject(smugglergate1, 2223.19897, -2204.54761, 12.54400, 5.0, 0.00000, 0.00000, -45.00000);
			smugglergate1opened = 1;
			SetTimer("smugglergate1close", 10000, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2240.26001, -2221.58179, 12.54400))
		{
		    if(PlayerInfo[playerid][pJob] != 11 && PlayerInfo[playerid][pJob] != 12) return 1;
		    if(smugglergate2opened == 1) return 1;
			MoveDynamicObject(smugglergate2, 2245.28906, -2226.61572, 12.54400, 5.0, 0.00000, 0.00000, 135.00000);
			smugglergate2opened = 1;
			SetTimer("smugglergate2close", 10000, 0);
		}
	}
	if(newkeys == KEY_YES)
	{
		new vID, sendername[MAX_PLAYER_NAME], Float:vehHealth, str[128];
		if(!IsPlayerInAnyVehicle(playerid)) return 1;
		vID = GetPlayerVehicleID(playerid);
		if(IsASalesVehicle(vID)) return 1;
		if(IsARentVehicle(vID) && Rented[playerid] == 9999) return 1;
		if(vEngine[vID] == 1) return 1;

		GetVehicleHealth(vID, vehHealth);
	    if(vehHealth <= 500.0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete upaliti motor vozila. Motor je ostecen!");
	    if(StartingEngine[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec pokusavate da upalite motor vozila!");
	    StartingEngine[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("StartVehicleEngine", 3500, false, "ii", playerid, vID);
	    GameTextForPlayer(playerid, "~w~Pokretanje motora vozila...", 3500, 3);

	    sendername = GetPlayerNameEx(playerid);
    	format(str, sizeof(str), "%s okrece kljuc i pokusava da upali motor vozila.", sendername);
    	SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	new sendername[MAX_PLAYER_NAME], str[128];
	//------------------------------------------------------------------------ > ANTICHEAT FOR MONEY
	if(GetPlayerMoney(playerid) > PlayerInfo[playerid][pMoney])
	{
	    SCM(playerid, BOJA_CRVENA, "------------------------------------------------------------");
	    SCM(playerid, BOJA_CRVENA, "Kickovani ste od strane AntiCheata zbog moguceg Money Hack-a.");
	    SCM(playerid, BOJA_CRVENA, "Ukoliko nastavi da Vam se desava ovo, a nemate Money Hack, obratite se na Forumu.");
	    SCM(playerid, BOJA_CRVENA, "------------------------------------------------------------");
		sendername = GetPlayerNameEx(playerid);
 		format(str, sizeof(str), "%s je kickovan od strane Anticheata zbog moguceg Money Hack-a!", sendername);
 		SendClientMessageToAll(BOJA_CRVENA, str);
	}
	//------------------------------------------------------------------------ > JOBS
	if(DetectiveSearchingOffer[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pDetectiveLevel] == 1 && PlayerInfo[playerid][pDetectivePoints] == 20)
	    {
	        PlayerInfo[playerid][pDetectiveLevel] = 2;
	        PlayerInfo[playerid][pDetectivePoints] = 0;
	        SCM(playerid, BOJA_ZELENA, "Cestitamo, sada ste Detektiv level 2!");
	        SavePlayer(playerid);
		}
		else if(PlayerInfo[playerid][pDetectiveLevel] == 2 && PlayerInfo[playerid][pDetectivePoints] == 30)
	    {
	        PlayerInfo[playerid][pDetectiveLevel] = 3;
	        PlayerInfo[playerid][pDetectivePoints] = 0;
	        SCM(playerid, BOJA_ZELENA, "Cestitamo, sada ste Detektiv level 3!");
	        SavePlayer(playerid);
		}
	}

	if(PlayerInfo[playerid][pTruckmanLevel] == 1 && PlayerInfo[playerid][pTruckmanPoints] == 10)
	{
		PlayerInfo[playerid][pTruckmanLevel] = 2;
		PlayerInfo[playerid][pTruckmanPoints] = 0;
		SavePlayer(playerid);
		SCM(playerid, BOJA_ZELENA, "Cestitamo, sad ste Kamiondzija Level 2!");
	}
	else if (PlayerInfo[playerid][pTruckmanLevel] == 2 && PlayerInfo[playerid][pTruckmanPoints] == 15)
	{
		PlayerInfo[playerid][pTruckmanLevel] = 3;
		PlayerInfo[playerid][pTruckmanPoints] = 0;
		SavePlayer(playerid);
		SCM(playerid, BOJA_ZELENA, "Cestitamo, sad ste Kamiondzija Level 3!");
	}

	if(PlayerInfo[playerid][pMechanicLevel] == 1 && PlayerInfo[playerid][pMechanicPoints] == 20)
	{
	    PlayerInfo[playerid][pMechanicLevel] = 2;
     	PlayerInfo[playerid][pMechanicPoints] = 0;
      	SavePlayer(playerid);
       	SCM(playerid, BOJA_ZELENA, "Cestitamo, sada ste Mehanicar level 2!");
	}
	else if(PlayerInfo[playerid][pMechanicLevel] == 2 && PlayerInfo[playerid][pMechanicPoints] == 30)
	{
	    PlayerInfo[playerid][pMechanicLevel] = 3;
     	PlayerInfo[playerid][pMechanicPoints] = 0;
      	SavePlayer(playerid);
       	SCM(playerid, BOJA_ZELENA, "Cestitamo, sada ste Mehanicar level 3!");
	}


	new bankmoney[128];
    format(bankmoney, sizeof(bankmoney),"$ %d",PlayerInfo[playerid][pBankMoney]);
    TextDrawSetString(BankMoney[playerid], bankmoney);
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
	    case DIALOG_REGISTER:
	    {
	        if(!response) return Kick(playerid);
	        if(response)
			{
			    if(!strlen(inputtext)) return SPD(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""PLAVA"Register", ""BELA"Uneli ste nemogucu sifru.\nUnesite sifru da bi ste se registrovali!", "U redu", "Izadji");
       			new INI:File = INI_Open(UserPath(playerid));
			    INI_SetTag(File, "PlayerData");
			    new HashPass[129];
			    WP_Hash(HashPass, sizeof(HashPass), inputtext);
			    INI_WriteString(File, "Password", HashPass);
				PlayerInfo[playerid][pPassword] = HashPass;
				PlayerInfo[playerid][pSex] = 9999;
				PlayerInfo[playerid][pAge] = 9999;
				PlayerInfo[playerid][pCountry] = 9999;
				PlayerInfo[playerid][pIdentityCard] = 9999;
				PlayerInfo[playerid][pBanned] = 9999;
				PlayerInfo[playerid][pBannedTime] = 0;
				PlayerInfo[playerid][pSkin] = 297;
				PlayerInfo[playerid][pMoney] = 50;
				PlayerInfo[playerid][pSpawnX] = 1642.2903;
				PlayerInfo[playerid][pSpawnY] = -2333.3423;
				PlayerInfo[playerid][pSpawnZ] = 13.5469;
				PlayerInfo[playerid][pBankAccount] = 9999;
				PlayerInfo[playerid][pBankMoney] = 0;
				PlayerInfo[playerid][pBankCredit] = 0;
				PlayerInfo[playerid][pAdmin] = 9999;
				PlayerInfo[playerid][pDonator] = 9999;
				PlayerInfo[playerid][pDonatorPoints] = 0;
				PlayerInfo[playerid][pLevel] = 1;
				PlayerInfo[playerid][pRespect] = 0;
				PlayerInfo[playerid][pHours] = 0;
				PlayerInfo[playerid][pPlaytime] = 0;
				PlayerInfo[playerid][pPayCheck] = 0;
				PlayerInfo[playerid][pDead] = 9999;
				PlayerInfo[playerid][pKills] = 0;
				PlayerInfo[playerid][pDeaths] = 0;
				PlayerInfo[playerid][pJob] = 9999;
				PlayerInfo[playerid][pJobContract] = 0;
				PlayerInfo[playerid][pMobile] = 9999;
				PlayerInfo[playerid][pMobileNumber] = 0;
				PlayerInfo[playerid][pMobileCredit] = 0;
				PlayerInfo[playerid][pAddressBook] = 9999;
				PlayerInfo[playerid][pTut] = 9999;
				PlayerInfo[playerid][pOnTut] = 1;
				PlayerInfo[playerid][pDetectivePoints] = 0;
				PlayerInfo[playerid][pDetectiveLevel] = 1;
				PlayerInfo[playerid][pTruckmanPoints] = 0;
				PlayerInfo[playerid][pTruckmanLevel] = 1;
				PlayerInfo[playerid][pTaxiPoints] = 0;
				PlayerInfo[playerid][pTaxiLevel] = 1;
				PlayerInfo[playerid][pMechanicPoints] = 0;
				PlayerInfo[playerid][pMechanicLevel] = 1;
				PlayerInfo[playerid][pDrug] = 0;
				PlayerInfo[playerid][pMats] = 0;
				PlayerInfo[playerid][pOLeader] = 9999;
				PlayerInfo[playerid][pOMember] = 9999;
				PlayerInfo[playerid][pORank] = 9999;
				PlayerInfo[playerid][pOSkin] = 9999;
				PlayerInfo[playerid][pWanted] = 9999;
				PlayerInfo[playerid][pWantedTimes] = 0;
				PlayerInfo[playerid][pArrested] = 9999;
				PlayerInfo[playerid][pArrestedTime] = 0;
				PlayerInfo[playerid][pArrestedTimes] = 0;
				PlayerInfo[playerid][pBizzID] = 9999;
				PlayerInfo[playerid][pSBizzID] = 9999;
				PlayerInfo[playerid][pHouseID] = 9999;
				PlayerInfo[playerid][pApartmentID] = 9999;
				PlayerInfo[playerid][pVehicle1] = 9999;
				PlayerInfo[playerid][pVehicle1ControlID] = 9999;
				PlayerInfo[playerid][pVehicle2] = 9999;
				PlayerInfo[playerid][pVehicle2ControlID] = 9999;
				PlayerInfo[playerid][pVehicle3] = 9999;
				PlayerInfo[playerid][pVehicle3ControlID] = 9999;
				PlayerInfo[playerid][pDrivingLicence] = 9999;
				PlayerInfo[playerid][pFlyingLicence]= 9999;
				PlayerInfo[playerid][pSailingLicence]= 9999;
				PlayerInfo[playerid][pMuted] = 9999;
				PlayerInfo[playerid][pMutedTime] = 0;
				PlayerInfo[playerid][pMuted] = 9999;
				PlayerInfo[playerid][pMutedTime] = 0;
				PlayerInfo[playerid][pPistolSkill] = 0;
				PlayerInfo[playerid][pSilencedSkill] = 0;
				PlayerInfo[playerid][pDesertSkill] = 0;
				PlayerInfo[playerid][pShotgunSkill] = 0;
				PlayerInfo[playerid][pSawnoffSkill] = 0;
				PlayerInfo[playerid][pCombatSkill] = 0;
				PlayerInfo[playerid][pUziSkill] = 0;
				PlayerInfo[playerid][pMP5Skill] = 0;
				PlayerInfo[playerid][pAK47Skill] = 0;
				PlayerInfo[playerid][pM4Skill] = 0;
				PlayerInfo[playerid][pSniperSkill] = 0;
				PlayerInfo[playerid][pFightingStyle] = 4;
				INI_Close(File);
				SavePlayer(playerid);
				SPD(playerid, DIALOG_SEX, DIALOG_STYLE_LIST, ""PLAVA"Izaberite vas pol", ""BELA"Musko\nZensko", "U redu", "Izadji");
			}
		}

		case DIALOG_LOGIN:
		{
		    if(!response) return Kick(playerid);
		    if(response)
			{
			    if(!strlen(inputtext)) return SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", ""BELA"Uneli ste pogresnu sifru.\nUnesite sifru da bi ste se ulogovali!", "U redu", "Izadji");
			    new HashPass[129];
			    WP_Hash(HashPass, sizeof(HashPass), inputtext);
			    INI_ParseFile(UserPath(playerid), "LoadUser_data", .bExtra = true, .extra = playerid);
			    if(!strcmp(PlayerInfo[playerid][pPassword], HashPass, false, 129))
			    {
			        SetSpawnInfo(playerid, 0, 0, PlayerInfo[playerid][pSpawnX], PlayerInfo[playerid][pSpawnY], PlayerInfo[playerid][pSpawnZ], 360.0, 0, 0, 0, 0, 0, 0);
			        SpawnPlayer(playerid);
			        PlayerInfo[playerid][pLogged] = 1;
			        ResetPlayerMoney(playerid);
			        GivePlayerMoney(playerid, PlayerInfo[playerid][pMoney]);
			        SetTimerEx("AntiFreezePlayer", 1000, false, "i", playerid);
			        /*if(PlayerInfo[playerid][pTut] == 9999)
			        {
						TogglePlayerControllable(playerid, 0);
				   		PlayerOnTutorial[playerid] = 1;
				   		PlayerTutorial(playerid);
						//SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
						//SCM(playerid, BOJA_PLAVA, "UCITAVANJE TUTORIALA...");
					}*/
       			}
       			else SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", ""BELA"Uneli ste pogresnu sifru.\nUnesite sifru da bi ste se ulogovali!", "U redu", "Izadji");
				return 1;
			}
		}

		case DIALOG_SEX:
		{
		    if(!response) return Kick(playerid);
		    if(response)
		    {
				if(listitem == 0)
    			{
				    PlayerInfo[playerid][pSex] = 1;
				    PlayerInfo[playerid][pSkin] = 170;
				    SavePlayer(playerid);
				    SPD(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""PLAVA"Register", ""BELA"Sada unesite koliko imate godina.", "U redu", "Izadji");
			    }

				if(listitem == 1)
				{
				    PlayerInfo[playerid][pSex] = 2;
				    PlayerInfo[playerid][pSkin] = 169;
				    SavePlayer(playerid);
				    SPD(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""PLAVA"Register", ""BELA"Sada unesite koliko imate godina.", "U redu", "Izadji");
				}
				return 1;
			}
		}

		case DIALOG_AGE:
		{
            if(!response) return Kick(playerid);
		    if(response)
		    {
		        if(!strlen(inputtext)) return SPD(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""PLAVA"Register", ""BELA"Niste uneli koliko imate godina.\nMolimo vas unesite koliko imate godina.", "U redu", "Izadji");
				new years = strval(inputtext);
				if(years < 10 || years > 100) return SPD(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""PLAVA"Register", ""BELA"Starost mora biti izmedju 10 i 100 godina.\nMolimo vas unesite tacnu starost.", "U redu", "Izadji");
				PlayerInfo[playerid][pAge] = strval(inputtext);
				SavePlayer(playerid);
				SPD(playerid, DIALOG_COUNTRY, DIALOG_STYLE_LIST, ""PLAVA"Register", ""BELA"Srbija\nCrna Gora\nBosna i Hercegovina\nMakedonija\nHrvatska", "U redu", "Izadji");
				return 1;
			}
		}

		case DIALOG_COUNTRY:
		{
			if(!response) return Kick(playerid);
		    if(response)
		    {
		        if(listitem == 0)
				{
				    PlayerInfo[playerid][pRegistered] = 1;
					PlayerInfo[playerid][pCountry] = 1;
					new name[MAX_PLAYER_NAME], sex[32], age, country[32], str[256];
					GetPlayerName(playerid, name, sizeof(name));
					sex = PlayerSex(playerid);
					age = PlayerInfo[playerid][pAge];
					country = PlayerCountry(playerid);
					SavePlayer(playerid);
					format(str, sizeof(str), ""PLAVA"Ime i prezime"BELA": %s \n"PLAVA"Pol"BELA": %s \n"PLAVA"Godine"BELA": %d \n"PLAVA"Drzava"BELA": %s \n"BELA"Unesite sifru da biste se ulogovali:", name, sex, age, country);
					SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", str, "U redu", "Izadji");
				}
		        if(listitem == 1)
				{
				    PlayerInfo[playerid][pRegistered] = 1;
					PlayerInfo[playerid][pCountry] = 2;
					new name[MAX_PLAYER_NAME], sex[32], age, country[32], str[256];
					GetPlayerName(playerid, name, sizeof(name));
					sex = PlayerSex(playerid);
					age = PlayerInfo[playerid][pAge];
					country = PlayerCountry(playerid);
					SavePlayer(playerid);
					format(str, sizeof(str), ""PLAVA"Ime i prezime"BELA": %s \n"PLAVA"Pol"BELA": %s \n"PLAVA"Godine"BELA": %d \n"PLAVA"Drzava"BELA": %s \n"BELA"Unesite sifru da biste se ulogovali:", name, sex, age, country);
					SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", str, "U redu", "Izadji");
				}
				if(listitem == 3)
				{
				    PlayerInfo[playerid][pRegistered] = 1;
					PlayerInfo[playerid][pCountry] = 3;
					new name[MAX_PLAYER_NAME], sex[32], age, country[32], str[256];
					GetPlayerName(playerid, name, sizeof(name));
					sex = PlayerSex(playerid);
					age = PlayerInfo[playerid][pAge];
					country = PlayerCountry(playerid);
					SavePlayer(playerid);
					format(str, sizeof(str), ""PLAVA"Ime i prezime"BELA": %s \n"PLAVA"Pol"BELA": %s \n"PLAVA"Godine"BELA": %d \n"PLAVA"Drzava"BELA": %s \n"BELA"Unesite sifru da biste se ulogovali:", name, sex, age, country);
					SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", str, "U redu", "Izadji");
				}
				if(listitem == 4)
				{
				    PlayerInfo[playerid][pRegistered] = 1;
					PlayerInfo[playerid][pCountry] = 4;
					new name[MAX_PLAYER_NAME], sex[32], age, country[32], str[256];
					GetPlayerName(playerid, name, sizeof(name));
					sex = PlayerSex(playerid);
					age = PlayerInfo[playerid][pAge];
					country = PlayerCountry(playerid);
					SavePlayer(playerid);
					format(str, sizeof(str), ""PLAVA"Ime i prezime"BELA": %s \n"PLAVA"Pol"BELA": %s \n"PLAVA"Godine"BELA": %d \n"PLAVA"Drzava"BELA": %s \n"BELA"Unesite sifru da biste se ulogovali:", name, sex, age, country);
					SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", str, "U redu", "Izadji");
				}
				if(listitem == 5)
				{
				    PlayerInfo[playerid][pRegistered] = 1;
					PlayerInfo[playerid][pCountry] = 5;
					new name[MAX_PLAYER_NAME], sex[32], age, country[32], str[256];
					GetPlayerName(playerid, name, sizeof(name));
					sex = PlayerSex(playerid);
					age = PlayerInfo[playerid][pAge];
					country = PlayerCountry(playerid);
					SavePlayer(playerid);
					format(str, sizeof(str), ""PLAVA"Ime i prezime"BELA": %s \n"PLAVA"Pol"BELA": %s \n"PLAVA"Godine"BELA": %d \n"PLAVA"Drzava"BELA": %s \n"BELA"Unesite sifru da biste se ulogovali:", name, sex, age, country);
					SPD(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""PLAVA"Login", str, "U redu", "Izadji");
				}
				return 1;
			}
		}

		case DIALOG_ORG_INVITE:
		{
		    if(response)
		    {
		        switch(PlayerInfo[playerid][pOMember])
		        {
		            case 1:
		            {
		                SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za ulazak u organizaciju LSPD!");
              		}
              		case 2:
              		{
              		    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za ulazak u organizaciju FBI!");
					}
					case 3:
              		{
              		    SetPlayerSkin(playerid, 106);
              		    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za ulazak u organizaciju Grove Street Families!");
					}
					case 4:
              		{
              		    SetPlayerSkin(playerid, 102);
              		    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za ulazak u organizaciju Ballas!");
					}
					case 5:
              		{
              		    SetPlayerSkin(playerid, 114);
              		    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za ulazak u organizaciju Varrios Los Aztecas!");
					}
					case 6:
              		{
              		    SetPlayerSkin(playerid, 108);
              		    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za ulazak u organizaciju Los Santos Vagos!");
					}
				}
			}
			else
			{
			    PlayerInfo[playerid][pOMember] = 0;
			    PlayerInfo[playerid][pORank] = 0;
			    PlayerInfo[playerid][pOSkin] = 9999;
			    SCM(playerid, BOJA_CRVENA, "Odbili ste poziv za ulazak u organizaciju!");
			}
		}

		case DIALOG_JOB:
		{
			switch(listitem)
			{
			    case 0:
			    {
			        PlayerInfo[playerid][pJob] = 1;
			        PlayerInfo[playerid][pJobContract] = 3;
			        SavePlayer(playerid);
			        SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor na 3 sata i postali 'Detektiv'");
			        SCM(playerid, BOJA_ZELENA, "Da vidite vise informacija o poslu, kucajte /job");
			    }
			    case 1:
			    {
			        PlayerInfo[playerid][pJob] = 2;
			        PlayerInfo[playerid][pJobContract] = 3;
			        SavePlayer(playerid);
			        SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor na 3 sata i postali 'Kamiondzija'");
			        SCM(playerid, BOJA_ZELENA, "Da vidite vise informacija o poslu, kucajte /komande");
			    }
			    case 2:
			    {
			        PlayerInfo[playerid][pJob] = 3;
			        PlayerInfo[playerid][pJobContract] = 3;
			        SavePlayer(playerid);
			        SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor na 3 sata i postali 'Komunalac'");
			        SCM(playerid, BOJA_ZELENA, "Da vidite vise informacija o poslu, kucajte /komande");
			    }
			    case 3:
			    {
			        PlayerInfo[playerid][pJob] = 4;
			        PlayerInfo[playerid][pJobContract] = 3;
			        SavePlayer(playerid);
			        SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor na 3 sata i postali 'Mehanicar'");
			        SCM(playerid, BOJA_ZELENA, "Da vidite vise informacija o poslu, kucajte /komande");
			    }
			    case 4:
			    {
			        PlayerInfo[playerid][pJob] = 5;
			        PlayerInfo[playerid][pJobContract] = 3;
			        SavePlayer(playerid);
			        SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor na 3 sata i postali 'Taxista'");
			        SCM(playerid, BOJA_ZELENA, "Da vidite vise informacija o poslu, kucajte /koamnde");
			    }
			}
		}

		case DIALOG_SHOP:
		{
		    if(response)
			{
				switch(listitem)
				{
				    case 0:
				    {
				        if(BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
						if(PlayerInfo[playerid][pMobile] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate mobilni!");
						if(GetPlayerMoney(playerid) < 100) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite mobilni! (50$)");

                        PlayerInfo[playerid][pMoney] -= 100;
						GivePlayerMoney(playerid, -100);
						PlayerInfo[playerid][pMobile] = 1;
						SavePlayer(playerid);

						BusinessInfo[InBusiness[playerid]][bMoney] += 100;
						SaveBizz(InBusiness[playerid]);

						SCM(playerid, BOJA_ZELENA, "Kupili ste mobilni.");
					}
					case 1:
					{
						new str[128];
						new number = 100000 + random(899999);
						if(BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
						if(PlayerInfo[playerid][pMobileNumber] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate SIM karticu!");
						if(GetPlayerMoney(playerid) < 25) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite SIM karticu! (25$)");

                        PlayerInfo[playerid][pMoney] -= 25;
						GivePlayerMoney(playerid, -25);
						PlayerInfo[playerid][pMobileNumber] = number;
						SavePlayer(playerid);

						BusinessInfo[InBusiness[playerid]][bMoney] += 25;
						SaveBizz(InBusiness[playerid]);

						format(str, sizeof(str), "Kupili ste SIM karticu. Vas broj je %d", number);
						SCM(playerid, BOJA_ZELENA, str);
					}
					case 2:
					{
					    if(BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
					    SPD(playerid, DIALOG_CREDIT, DIALOG_STYLE_INPUT, "DOPUNA", "Unesite iznos koliko kredita zelite da uplatite", "U redu", "Izadji");
					}
					case 3:
					{
					    if(BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
					    if(PlayerInfo[playerid][pAddressBook] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate imenik!");
					    if(GetPlayerMoney(playerid) < 50) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite imenik!");
                        PlayerInfo[playerid][pMoney] -= 50;
	 					GivePlayerMoney(playerid, -50);
						PlayerInfo[playerid][pAddressBook] = 1;
						SavePlayer(playerid);

						BusinessInfo[InBusiness[playerid]][bMoney] += 100;
						SaveBizz(InBusiness[playerid]);

						SCM(playerid, BOJA_ZELENA, "Kupili ste imenik. /broj");
					}
				}
				return 1;
			}
		}

		case DIALOG_CREDIT:
		{
		    if(response)
		    {
		        new credit, str[128];
		        credit = strval(inputtext);
				if(BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
				if(GetPlayerMoney(playerid) < credit*2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da uplatite kredit!(kreditx2)");
                PlayerInfo[playerid][pMoney] -= credit*2;
				GivePlayerMoney(playerid, -(credit*2));
				PlayerInfo[playerid][pMobileCredit] += credit;
				SavePlayer(playerid);
				BusinessInfo[InBusiness[playerid]][bMoney] += 25;
				SaveBizz(InBusiness[playerid]);
				format(str, sizeof(str), "Dopunili ste vas kredit za %d", credit);
				SCM(playerid, BOJA_ZELENA, str);
				return 1;
			}
		}

		case DIALOG_BUYHOUSE:
		{
			if(!response)
			{
			    HouseSellOffer[HousePlayerOffer[playerid]] = 9999;
				HouseBuyOffer[playerid] = 9999;
			 	HouseForOffer[playerid] = 9999;
			 	HouseOfferPrice[playerid] = 0;
				SCM(playerid, BOJA_CRVENA, "Odbili ste da kupite kucu!");
				SCM(HousePlayerOffer[playerid], BOJA_CRVENA, "Igrac je odbio ponudu za kucu!");
				HousePlayerOffer[playerid] = 9999;
			}
			if(response)
			{
			    if(GetPlayerMoney(playerid) < HouseOfferPrice[playerid])
			    {
			        HouseSellOffer[HousePlayerOffer[playerid]] = 9999;
					HouseBuyOffer[playerid] = 9999;
				 	HouseForOffer[playerid] = 9999;
				 	HouseOfferPrice[playerid] = 0;
					SCM(playerid, BOJA_CRVENA, "Nemate dovoljno novca da kupite kucu!");
					SCM(HousePlayerOffer[playerid], BOJA_CRVENA, "Igrac nema dovoljno novca da kupi kucu!");
					HousePlayerOffer[playerid] = 9999;
			    }
			    else if(PlayerInfo[playerid][pHouseID] != 9999 )
			    {
			        HouseSellOffer[HousePlayerOffer[playerid]] = 9999;
					HouseBuyOffer[playerid] = 9999;
				 	HouseForOffer[playerid] = 9999;
				 	HouseOfferPrice[playerid] = 0;
					SCM(playerid, BOJA_CRVENA, "Vec imate kucu!");
					SCM(HousePlayerOffer[playerid], BOJA_CRVENA, "Igrac vec ima kucu!");
					HousePlayerOffer[playerid] = 9999;
			    }
			    else
			    {
	       			new player, id, sendername[MAX_PLAYER_NAME], house3dtext[256];
					sendername = GetPlayerNameEx(playerid);
					player = HousePlayerOffer[playerid];
					id = HouseForOffer[playerid];
					HouseInfo[id][hOwner] = sendername;
					HouseInfo[id][hLocked] = 1;
					PlayerInfo[playerid][pHouseID] = id;
					PlayerInfo[player][pHouseID] = 9999;
					PlayerInfo[playerid][pMoney] -= HouseOfferPrice[playerid];
					GivePlayerMoney(playerid, -HouseOfferPrice[playerid]);
					PlayerInfo[player][pMoney] += HouseOfferPrice[playerid];
					GivePlayerMoney(player, HouseOfferPrice[playerid]);
					SCM(playerid, BOJA_ZELENA, "KUPILI STE KUCU!");
					SCM(player, BOJA_ZELENA, "PRODALI STE KUCU!");
					SavePlayer(player);
					SavePlayer(playerid);
					SaveHouse(id);
					format(house3dtext, sizeof(house3dtext), ""BELA" Ova kuca ima vlasnika !\n "PLAVA"Vlasnik kuce"BELA": %s\n "PLAVA"ID Kuce"BELA": %d", HouseInfo[id][hOwner], HouseInfo[id][hID]);
					Update3DTextLabelText(HouseLabelArray[id], -1, house3dtext);
					HouseSellOffer[player] = 9999;
					HouseBuyOffer[playerid] = 9999;
				 	HouseForOffer[playerid] = 9999;
				 	HouseOfferPrice[playerid] = 0;
			 		HousePlayerOffer[playerid] = 9999;
				}
				return 1;
			}
		}

		//-------------------------------------------------------------------- > VEHICLE
		case DIALOG_VEHICLE_MENU:
		{
			if(!response) return 1;
			if(response)
			{
				if(listitem == 0) SPD(playerid, DIALOG_VEHICLE_SELL, DIALOG_STYLE_LIST, "VEHICLE MENU / PRODAJ VOZILO", ""BELA"SLOT 1\nSLOT 2\nSLOT 3", "U redu", "Izadji");
				if(listitem == 1) SPD(playerid, DIALOG_VEHICLE_SELLTO, DIALOG_STYLE_INPUT, ""PLAVA"VEHICLE MENU / PRODAJ VOZILO IGRACU", ""BELA"Unesite ID igraca kome zelite da prodate vase vozilo i cenu za vozilo.", "U redu", "Izadji");
				if(listitem == 2) SPD(playerid, DIALOG_VEHICLE_PARK, DIALOG_STYLE_LIST, "VEHICLE MENU / PARKIRAJ VOZILO", ""BELA"SLOT 1\nSLOT 2\nSLOT 3", "U redu", "Izadji");
				if(listitem == 3) SPD(playerid, DIALOG_VEHICLE_LOCK, DIALOG_STYLE_LIST, "VEHICLE MENU / ZAKLJUCAJ VOZILO", ""BELA"SLOT 1\nSLOT 2\nSLOT 3", "U redu", "Izadji");
				if(listitem == 4) SPD(playerid, DIALOG_VEHICLE_FIND, DIALOG_STYLE_LIST, "VEHICLE MENU / LOCIRAJ VOZILO", ""BELA"SLOT 1\nSLOT 2\nSLOT 3", "U redu", "Izadji");
				if(listitem == 5) SPD(playerid, DIALOG_VEHICLE_COLOR, DIALOG_STYLE_LIST, "VEHICLE MENU / OFARBAJ VOZILO", ""BELA"SLOT 1\nSLOT 2\nSLOT 3", "U redu", "Izadji");
				if(listitem == 6) SPD(playerid, DIALOG_VEHICLE_SAVE, DIALOG_STYLE_LIST, "VEHICLE MENU / SACUVAJ KOMPONENTE VOZILA", ""BELA"SLOT 1\nSLOT 2\nSLOT 3", "U redu", "Izadji");
				return 1;
			}
		}

		case DIALOG_BUYVEH:
		{
			if(!response)
			{
			    VehicleSellOffer[VehiclePlayerOffer[playerid]] = 9999;
				VehicleBuyOffer[playerid] = 9999;
			 	VehicleForOffer[playerid] = 9999;
			 	VehicleOfferPrice[playerid] = 0;
				SCM(playerid, BOJA_CRVENA, "Odbili ste da kupite vozilo!");
				SCM(VehiclePlayerOffer[playerid], BOJA_CRVENA, "Igrac je odbio ponudu za vozilo!");
				VehiclePlayerOffer[playerid] = 9999;
			}
			if(response)
			{
			    if(GetPlayerMoney(playerid) < VehicleOfferPrice[playerid])
			    {
			        VehicleSellOffer[VehiclePlayerOffer[playerid]] = 9999;
					VehicleBuyOffer[playerid] = 9999;
				 	VehicleForOffer[playerid] = 9999;
				 	VehicleOfferPrice[playerid] = 0;
					SCM(playerid, BOJA_CRVENA, "Nemate dovoljno novca da kupite vozilo!");
					SCM(VehiclePlayerOffer[playerid], BOJA_CRVENA, "Igrac nema dovoljno novca da kupi vozilo!");
					VehiclePlayerOffer[playerid] = 9999;
			    }
			    else if(PlayerInfo[playerid][pVehicle1] != 9999 && PlayerInfo[playerid][pVehicle2] != 9999 && PlayerInfo[playerid][pVehicle3] != 9999)
			    {
			        VehicleSellOffer[VehiclePlayerOffer[playerid]] = 9999;
					VehicleBuyOffer[playerid] = 9999;
				 	VehicleForOffer[playerid] = 9999;
				 	VehicleOfferPrice[playerid] = 0;
					SCM(playerid, BOJA_CRVENA, "Ne mozete kupiti vise vozila!");
					SCM(VehiclePlayerOffer[playerid], BOJA_CRVENA, "Igrac ne moze kupiti vozilo!");
					VehiclePlayerOffer[playerid] = 9999;
			    }
			    else
			    {
	       			new sendername[MAX_PLAYER_NAME], player, vID, vMDL;
					sendername = GetPlayerNameEx(playerid);
					player = VehiclePlayerOffer[playerid];
					vID = VehicleForOffer[playerid];
					vMDL = GetVehicleModel(vID);
					//strmid(VehicleInfo[VehicleForOffer[playerid]][vOwner], sendername, 0, strlen(sendername), 999);
					VehicleInfo[vID][vOwner] = sendername;
					VehicleInfo[vID][vLocked] = 1;
					RemovePlayerFromVehicle(player);
					if(PlayerInfo[playerid][pVehicle1] == 9999)
					{
					    PlayerInfo[playerid][pVehicle1] = PlayerInfo[player][pVehicle1];
					    PlayerInfo[playerid][pVehicle1ControlID] = PlayerInfo[player][pVehicle1ControlID];
					}
					else if(PlayerInfo[playerid][pVehicle2] == 9999)
					{
					    PlayerInfo[playerid][pVehicle2] = PlayerInfo[player][pVehicle3];
					    PlayerInfo[playerid][pVehicle2ControlID] = PlayerInfo[player][pVehicle3ControlID];
					}
					else if(PlayerInfo[playerid][pVehicle3] == 9999)
					{
					    PlayerInfo[playerid][pVehicle3] = PlayerInfo[player][pVehicle3];
					    PlayerInfo[playerid][pVehicle3ControlID] = PlayerInfo[player][pVehicle3ControlID];
					}


					if(VehicleInfo[vID][vControlID] == PlayerInfo[player][pVehicle1ControlID])
					{
					    PlayerInfo[player][pVehicle1] = 9999;
						PlayerInfo[player][pVehicle1ControlID] = 9999;
					}
					else if(VehicleInfo[vID][vControlID] == PlayerInfo[player][pVehicle2ControlID])
					{
					    PlayerInfo[player][pVehicle2] = 9999;
						PlayerInfo[player][pVehicle2ControlID] = 9999;
					}
					else if(VehicleInfo[vID][vControlID] == PlayerInfo[player][pVehicle3ControlID])
					{
					    PlayerInfo[player][pVehicle3] = 9999;
						PlayerInfo[player][pVehicle3ControlID] = 9999;
					}
					PlayerInfo[playerid][pMoney] -= VehicleOfferPrice[playerid];
					GivePlayerMoney(playerid, -VehicleOfferPrice[playerid]);
					PlayerInfo[player][pMoney] += VehicleOfferPrice[playerid];
					GivePlayerMoney(player, VehicleOfferPrice[playerid]);
					SCM(playerid, BOJA_ZELENA, "KUPILI STE VOZILO!");
					SCM(player, BOJA_ZELENA, "PRODALI STE VOZILO!");
					SavePlayer(player);
					SavePlayer(playerid);
					SaveVehicle(vID);
					DestroyVehicle(vID);
					OwnedVehicle[vID] = CreateVehicle(vMDL, VehicleInfo[vID][vParkX], VehicleInfo[vID][vParkY], VehicleInfo[vID][vParkZ], VehicleInfo[vID][vParkA], VehicleInfo[vID][vColor1], VehicleInfo[vID][vColor2], -1);
					VehicleSellOffer[player] = 9999;
					VehicleBuyOffer[playerid] = 9999;
				 	VehicleForOffer[playerid] = 9999;
				 	VehicleOfferPrice[playerid] = 0;
			 		VehiclePlayerOffer[playerid] = 9999;
				}
				return 1;
			}
		}

		case DIALOG_VEHICLE_SELL:
		{
			if(!response) return 1;
			if(response)
			{
				if(listitem == 0)
				{
					new vID, str[32];
					if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					PlayerInfo[playerid][pVehicle1] = 9999;
					PlayerInfo[playerid][pVehicle1ControlID] = 9999;
					VehicleInfo[vID][vOwned] = 9999;
					VehicleInfo[vID][vOwner] = 0;
					VehicleInfo[vID][vParkX] = 1590.3740;
					VehicleInfo[vID][vParkY] = -1026.0565;
					VehicleInfo[vID][vParkZ] = 23.9063;
					VehicleInfo[vID][vParkA] = 317.1649;
					VehicleInfo[vID][vLocked] = 0;
					VehicleInfo[vID][vRegistration] = 0;
					VehicleInfo[vID][vControlID] = 0;
					VehicleInfo[vID][vSpoiler] = 0;
					VehicleInfo[vID][vHood] = 0;
					VehicleInfo[vID][vRoof] = 0;
					VehicleInfo[vID][vSideskirt] = 0;
					VehicleInfo[vID][vLamps] = 0;
					VehicleInfo[vID][vNitro] = 0;
					VehicleInfo[vID][vExhaust] = 0;
					VehicleInfo[vID][vWheels] = 0;
					VehicleInfo[vID][vStereo] = 0;
					VehicleInfo[vID][vHydraulics] = 0;
					VehicleInfo[vID][vFront_bumper] = 0;
					VehicleInfo[vID][vRear_bumper] = 0;
					VehicleInfo[vID][vVent_right] = 0;
					VehicleInfo[vID][vVent_left] = 0;
					vEngine[vID] = 0;
					SaveVehicle(vID);
					RemovePlayerFromVehicle(playerid);
					format(str, sizeof(str), VPATH, vID);
					fremove(str);
					DestroyVehicle(vID);
					CreateVehicle(515, 2228.1001000, 2458.8999000, -6.3000000, 270.0000000, 0, 0, -1); //Roadtrain
					TogglePlayerControllable(playerid, 1);
					SavePlayer(playerid);
					SCM(playerid, BOJA_ZELENA, "Prodali ste vase vozilo.");
					SavePlayer(playerid);
				}
				else if(listitem == 1)
				{
					new vID, str[32];
					if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					PlayerInfo[playerid][pVehicle2] = 9999;
					PlayerInfo[playerid][pVehicle2ControlID] = 9999;
					VehicleInfo[vID][vOwned] = 9999;
					VehicleInfo[vID][vOwner] = 0;
					VehicleInfo[vID][vParkX] = 1590.3740;
					VehicleInfo[vID][vParkY] = -1026.0565;
					VehicleInfo[vID][vParkZ] = 23.9063;
					VehicleInfo[vID][vParkA] = 317.1649;
					VehicleInfo[vID][vLocked] = 0;
					VehicleInfo[vID][vRegistration] = 0;
					VehicleInfo[vID][vControlID] = 0;
					VehicleInfo[vID][vSpoiler] = 0;
					VehicleInfo[vID][vHood] = 0;
					VehicleInfo[vID][vRoof] = 0;
					VehicleInfo[vID][vSideskirt] = 0;
					VehicleInfo[vID][vLamps] = 0;
					VehicleInfo[vID][vNitro] = 0;
					VehicleInfo[vID][vExhaust] = 0;
					VehicleInfo[vID][vWheels] = 0;
					VehicleInfo[vID][vStereo] = 0;
					VehicleInfo[vID][vHydraulics] = 0;
					VehicleInfo[vID][vFront_bumper] = 0;
					VehicleInfo[vID][vRear_bumper] = 0;
					VehicleInfo[vID][vVent_right] = 0;
					VehicleInfo[vID][vVent_left] = 0;
					vEngine[vID] = 0;
					SaveVehicle(vID);
					RemovePlayerFromVehicle(playerid);
					format(str, sizeof(str), VPATH, vID);
					fremove(str);
					DestroyVehicle(vID);
					CreateVehicle(515, 2228.1001000, 2458.8999000, -6.3000000, 270.0000000, 0, 0, -1); //Roadtrain
					TogglePlayerControllable(playerid, 1);
					SCM(playerid, BOJA_ZELENA, "Prodali ste vase vozilo.");
					SavePlayer(playerid);
				}
				else if(listitem == 2)
				{
					new vID, str[32];
					if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					PlayerInfo[playerid][pVehicle3] = 9999;
					PlayerInfo[playerid][pVehicle3ControlID] = 9999;
					VehicleInfo[vID][vOwned] = 9999;
					VehicleInfo[vID][vOwner] = 0;
					VehicleInfo[vID][vParkX] = 1590.3740;
					VehicleInfo[vID][vParkY] = -1026.0565;
					VehicleInfo[vID][vParkZ] = 23.9063;
					VehicleInfo[vID][vParkA] = 317.1649;
					VehicleInfo[vID][vLocked] = 0;
					VehicleInfo[vID][vRegistration] = 0;
					VehicleInfo[vID][vControlID] = 0;
					VehicleInfo[vID][vSpoiler] = 0;
					VehicleInfo[vID][vHood] = 0;
					VehicleInfo[vID][vRoof] = 0;
					VehicleInfo[vID][vSideskirt] = 0;
					VehicleInfo[vID][vLamps] = 0;
					VehicleInfo[vID][vNitro] = 0;
					VehicleInfo[vID][vExhaust] = 0;
					VehicleInfo[vID][vWheels] = 0;
					VehicleInfo[vID][vStereo] = 0;
					VehicleInfo[vID][vHydraulics] = 0;
					VehicleInfo[vID][vFront_bumper] = 0;
					VehicleInfo[vID][vRear_bumper] = 0;
					VehicleInfo[vID][vVent_right] = 0;
					VehicleInfo[vID][vVent_left] = 0;
					vEngine[vID] = 0;
					SaveVehicle(vID);
					RemovePlayerFromVehicle(playerid);
					format(str, sizeof(str), VPATH, vID);
					fremove(str);
					DestroyVehicle(vID);
					CreateVehicle(515, 2228.1001000, 2458.8999000, -6.3000000, 270.0000000, 0, 0, -1); //Roadtrain
					TogglePlayerControllable(playerid, 1);
					SCM(playerid, BOJA_ZELENA, "Prodali ste vase vozilo.");
					SavePlayer(playerid);
				}
				return 1;
			}
		}

		case DIALOG_VEHICLE_SELLTO:
		{
			if(!response) return 1;
			if(response)
			{
				if(!strlen(inputtext)) return 1;
				new sellinfo[2][20], vID, target, price, vehicle[32], Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], str[512];
				SplitString(inputtext, sellinfo, '/');
				target = strval(sellinfo[0]);
				price = strval(sellinfo[1]);
				if(VehicleSellOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste ponudili prodaju vozila!");
				if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
				vID = GetPlayerVehicleID(playerid);
				GetVehiclePos(vID, X, Y, Z);
				GetVehicleName(vID, vehicle, sizeof(vehicle));
				SCM(playerid, BOJA_CRVENA, "NAPOMENA: Prilikom unosenja IDa igraca i cene za vozilo, ID i cenu odvojte znakom / (ID igraca/cena)!");
				if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID] && VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID] && VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svom vozilu!");
				if(!IsPlayerInRangeOfPoint(target, 7.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");
				VehicleSellOffer[playerid] = 1;
				VehicleBuyOffer[target] = 1;
				VehicleForOffer[target] = vID;
				VehiclePlayerOffer[target] = playerid;
				VehicleOfferPrice[target] = price;
				SetTimerEx("VehicleStopOffer", 10000, false, "ii", playerid, target);
				format(str, sizeof(str), "\n "PLAVA"Vozilo"BELA": %s\n "PLAVA"Trenutni vlasnik"BELA": %s\n "PLAVA"Cena"BELA": %d\n "PLAVA"Registrovan"BELA": %s\n", vehicle, VehicleInfo[vID][vOwner], price, GetVehicleRegistration(vID));
				SPD(target, DIALOG_BUYVEH, DIALOG_STYLE_MSGBOX, ""PLAVA"KUPOVINA VOZILA", str, "Kupi", "Odbij");
				sendername = GetPlayerNameEx(target);
				format(str, sizeof(str), "Ponudili ste igracu %s da kupi vase vozilo.", sendername);
				SCM(playerid, BOJA_ZELENA, str);
				sendername = GetPlayerNameEx(playerid);
				format(str, sizeof(str), "Igrac %s Vam je ponudio da kupite njegovo vozilo.", sendername);
				SCM(target, BOJA_ZELENA, str);
				return 1;
			}
		}

		case DIALOG_VEHICLE_PARK:
		{
			if(!response) return 1;
			if(response)
			{
				if(listitem == 0)
				{
					new vID, vMDL, Float:X, Float:Y, Float:Z, Float:A;
					if(PlayerInfo[playerid][pVehicle1] == 9999 && PlayerInfo[playerid][pVehicle2] == 9999 && PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo!");
					if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					vID = GetPlayerVehicleID(playerid);
					vMDL = GetVehicleModel(vID);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					GetVehiclePos(vID, X, Y, Z);
					GetVehicleZAngle(vID, A);
					VehicleInfo[vID][vParkX] = X;
					VehicleInfo[vID][vParkY] = Y;
					VehicleInfo[vID][vParkZ] = Z;
					VehicleInfo[vID][vParkA] = A;
					vEngine[vID] = 0;
					RemovePlayerFromVehicle(playerid);
					DestroyVehicle(vID);
					OwnedVehicle[vID] = CreateVehicle(vMDL, VehicleInfo[vID][vParkX], VehicleInfo[vID][vParkY], VehicleInfo[vID][vParkZ], VehicleInfo[vID][vParkA], VehicleInfo[vID][vColor1], VehicleInfo[vID][vColor2], -1);
					SetVehicleComponents(vID);
					TogglePlayerControllable(playerid, 1);
					SCM(playerid, BOJA_ZELENA, "Parkirali ste vase vozilo.");
					SaveVehicle(vID);
				}
				else if(listitem == 1)
				{
					new vID, vMDL, Float:X, Float:Y, Float:Z, Float:A;
					if(PlayerInfo[playerid][pVehicle1] == 9999 && PlayerInfo[playerid][pVehicle2] == 9999 && PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo!");
					if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					vID = GetPlayerVehicleID(playerid);
					vMDL = GetVehicleModel(vID);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					GetVehiclePos(vID, X, Y, Z);
					GetVehicleZAngle(vID, A);
					VehicleInfo[vID][vParkX] = X;
					VehicleInfo[vID][vParkY] = Y;
					VehicleInfo[vID][vParkZ] = Z;
					VehicleInfo[vID][vParkA] = A;
					vEngine[vID] = 0;
					RemovePlayerFromVehicle(playerid);
					DestroyVehicle(vID);
					OwnedVehicle[vID] = CreateVehicle(vMDL, VehicleInfo[vID][vParkX], VehicleInfo[vID][vParkY], VehicleInfo[vID][vParkZ], VehicleInfo[vID][vParkA], VehicleInfo[vID][vColor1], VehicleInfo[vID][vColor2], -1);
					SetVehicleComponents(vID);
					TogglePlayerControllable(playerid, 1);
					SCM(playerid, BOJA_ZELENA, "Parkirali ste vase vozilo.");
					SaveVehicle(vID);
				}
				else if(listitem == 2)
				{
					new vID, vMDL, Float:X, Float:Y, Float:Z, Float:A;
					if(PlayerInfo[playerid][pVehicle1] == 9999 && PlayerInfo[playerid][pVehicle2] == 9999 && PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo!");
		            if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					vID = GetPlayerVehicleID(playerid);
					vMDL = GetVehicleModel(vID);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					GetVehiclePos(vID, X, Y, Z);
					GetVehicleZAngle(vID, A);
					VehicleInfo[vID][vParkX] = X;
					VehicleInfo[vID][vParkY] = Y;
					VehicleInfo[vID][vParkZ] = Z;
					VehicleInfo[vID][vParkA] = A;
					vEngine[vID] = 0;
					RemovePlayerFromVehicle(playerid);
					DestroyVehicle(vID);
					OwnedVehicle[vID] = CreateVehicle(vMDL, VehicleInfo[vID][vParkX], VehicleInfo[vID][vParkY], VehicleInfo[vID][vParkZ], VehicleInfo[vID][vParkA], VehicleInfo[vID][vColor1], VehicleInfo[vID][vColor2], -1);
					SetVehicleComponents(vID);
					TogglePlayerControllable(playerid, 1);
					SCM(playerid, BOJA_ZELENA, "Parkirali ste vase vozilo.");
					SaveVehicle(vID);
				}
			}
		}

		case DIALOG_VEHICLE_LOCK:
		{
			if(!response) return 1;
			if(response)
			{
				if(listitem == 0)
				{
					new Float:VX, Float:VY, Float:VZ;
				    if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
		 	        new vehicle = PlayerInfo[playerid][pVehicle1ControlID];
				 	GetVehiclePos(vehicle, VX, VY, VZ);
		 		 	if(IsPlayerInRangeOfPoint(playerid, 50.0, VX, VY, VZ))
					{
					   	if(VehicleInfo[vehicle][vLocked] == 1)
					   	{
						   	SetVehicleParamsForPlayer(vehicle, playerid, 0, 0);
					   		GameTextForPlayer(playerid, "~g~Vozilo otkljucano!", 2000, 3);
					   		VehicleInfo[vehicle][vLocked] = 0;
					   		SaveVehicle(vehicle);
					   		return 1;
					   	}
					   	else
					   	{
		  		    		SetVehicleParamsForPlayer(playerid, playerid, 0, 1);
					       	GameTextForPlayer(playerid, "~r~Vozilo zakljucano!", 2000, 3);
					       	VehicleInfo[vehicle][vLocked] = 1;
					       	SaveVehicle(vehicle);
					   	}
					}
					else SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu svog vozila!");
				}
				else if(listitem == 1)
				{
					new Float:VX, Float:VY, Float:VZ;
				    if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
		 	        new vehicle = PlayerInfo[playerid][pVehicle2ControlID];
				 	GetVehiclePos(vehicle, VX, VY, VZ);
		 		 	if(IsPlayerInRangeOfPoint(playerid, 50.0, VX, VY, VZ))
					{
					   	if(VehicleInfo[vehicle][vLocked] == 1)
					   	{
						   	SetVehicleParamsForPlayer(vehicle, playerid, 0, 0);
					   		GameTextForPlayer(playerid, "~g~Vozilo otkljucano!", 2000, 3);
					   		VehicleInfo[vehicle][vLocked] = 0;
					   		SaveVehicle(vehicle);
					   		return 1;
					   	}
					   	else
					   	{
		  		    		SetVehicleParamsForPlayer(playerid, playerid, 0, 1);
					       	GameTextForPlayer(playerid, "~r~Vozilo zakljucano!", 2000, 3);
					       	VehicleInfo[vehicle][vLocked] = 1;
					       	SaveVehicle(vehicle);
					   	}
					}
					else SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu svog vozila!");
				}
				else if(listitem == 2)
				{
					new Float:VX, Float:VY, Float:VZ;
				    if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
		 	        new vehicle = PlayerInfo[playerid][pVehicle3ControlID];
				 	GetVehiclePos(vehicle, VX, VY, VZ);
		 		 	if(IsPlayerInRangeOfPoint(playerid, 50.0, VX, VY, VZ))
					{
					   	if(VehicleInfo[vehicle][vLocked] == 1)
					   	{
						   	SetVehicleParamsForPlayer(vehicle, playerid, 0, 0);
					   		GameTextForPlayer(playerid, "~g~Vozilo otkljucano!", 2000, 3);
					   		VehicleInfo[vehicle][vLocked] = 0;
					   		SaveVehicle(vehicle);
					   		return 1;
					   	}
					   	else
					   	{
		  		    		SetVehicleParamsForPlayer(playerid, playerid, 0, 1);
					       	GameTextForPlayer(playerid, "~r~Vozilo zakljucano!", 2000, 3);
					       	VehicleInfo[vehicle][vLocked] = 1;
					       	SaveVehicle(vehicle);
					   	}
					}
					else SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu svog vozila!");
				}
				return 1;
			}
		}

		case DIALOG_VEHICLE_FIND:
		{
			if(!response) return 1;
			if(response)
			{
				if(listitem == 0)
				{
					new Float:X, Float:Y, Float:Z;
				    if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
		   			new vehicle = PlayerInfo[playerid][pVehicle1ControlID];
		   			GetVehiclePos(vehicle, X, Y, Z);
		   			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
		   			vSearching[playerid] = 1;
		   			SCM(playerid, BOJA_ZELENA, "Vase vozilo je oznaceno na mapi.");
				}
				else if(listitem == 1)
				{
					new Float:X, Float:Y, Float:Z;
				    if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
		   			new vehicle = PlayerInfo[playerid][pVehicle2ControlID];
		   			GetVehiclePos(vehicle, X, Y, Z);
		   			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
		   			vSearching[playerid] = 1;
		   			SCM(playerid, BOJA_ZELENA, "Vase vozilo je oznaceno na mapi.");
				}
				else if(listitem == 2)
				{
					new Float:X, Float:Y, Float:Z;
				    if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
		   			new vehicle = PlayerInfo[playerid][pVehicle3ControlID];
		   			GetVehiclePos(vehicle, X, Y, Z);
		   			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
		   			vSearching[playerid] = 1;
		   			SCM(playerid, BOJA_ZELENA, "Vase vozilo je oznaceno na mapi.");
				}
				return 1;
			}
		}

		case DIALOG_VEHICLE_COLOR:
		{
			if(!response) return 1;
			if(response)
			{
			    new color1, color2, colors[2][8];
				SplitString(inputtext, colors, ' ');
				color1 = strval(colors[0]);
				color2 = strval(colors[1]);
				if(listitem == 0)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					new vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					if(GetPlayerMoney(playerid) < 2500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($2500)");
                    PlayerInfo[playerid][pMoney] -= 2500;
				 	GivePlayerMoney(playerid, -2500);
					SavePlayer(playerid);
					ChangeVehicleColor(vID, color1, color2);
					VehicleInfo[vID][vColor1] = color1;
					VehicleInfo[vID][vColor2] = color2;
					SaveVehicle(vID);
					SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");
				}
				else if(listitem == 1)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					new vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					if(GetPlayerMoney(playerid) < 2500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($2500)");
                    PlayerInfo[playerid][pMoney] -= 2500;
				 	GivePlayerMoney(playerid, -2500);
					SavePlayer(playerid);
					ChangeVehicleColor(vID, color1, color2);
					VehicleInfo[vID][vColor1] = color1;
					VehicleInfo[vID][vColor2] = color2;
					SaveVehicle(vID);
					SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");
				}
				else if(listitem == 2)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					new vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
					if(GetPlayerMoney(playerid) < 2500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($2500)");
                    PlayerInfo[playerid][pMoney] -= 2500;
				 	GivePlayerMoney(playerid, -2500);
					SavePlayer(playerid);
					ChangeVehicleColor(vID, color1, color2);
					VehicleInfo[vID][vColor1] = color1;
					VehicleInfo[vID][vColor2] = color2;
					SaveVehicle(vID);
					SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");
				}
				return 1;
			}
		}

		case DIALOG_VEHICLE_SAVE:
		{
			if(!response) return 1;
			if(response)
			{
				if(listitem == 0)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					new vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRSKA: Niste u vasem vozilu!");
					SaveVehicleComponents(vID);
					SCM(playerid, BOJA_ZELENA, "Sacuvali ste komponente vaseg vozila.");
				}
				else if(listitem == 1)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					new vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRSKA: Niste u vasem vozilu!");
					SaveVehicleComponents(vID);
					SCM(playerid, BOJA_ZELENA, "Sacuvali ste komponente vaseg vozila.");
				}
				else if(listitem == 2)
				{
					if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
					new vID = GetPlayerVehicleID(playerid);
					if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRSKA: Niste u vasem vozilu!");
					SaveVehicleComponents(vID);
					SCM(playerid, BOJA_ZELENA, "Sacuvali ste komponente vaseg vozila.");
				}
				return 1;
			}
		}

		case DIALOG_LICENCE:
		{
			if(!response) return 1;
			if(response)
			{
				if(listitem == 0)
				{
				    if(PlayerInfo[playerid][pDrivingLicence] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate dozvolu!");
					if(GetPlayerMoney(playerid) < 2500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite dozvolu! (2500$)");
                    PlayerInfo[playerid][pMoney] -= 2500;
					GivePlayerMoney(playerid, -2500);
					PlayerInfo[playerid][pDrivingLicence] = 1;
					SavePlayer(playerid);
					SCM(playerid, BOJA_ZELENA, "Kupili ste dozvolu za voznju!");
				}
				else if(listitem == 1)
				{
				    if(PlayerInfo[playerid][pFlyingLicence] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate dozvolu!");
					if(GetPlayerMoney(playerid) < 7500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite dozvolu! (7500$)");
                    PlayerInfo[playerid][pMoney] -= 7500;
					GivePlayerMoney(playerid, -7500);
					PlayerInfo[playerid][pFlyingLicence] = 1;
					SavePlayer(playerid);
					SCM(playerid, BOJA_ZELENA, "Kupili ste dozvolu za letenje!");
				}
				else if(listitem == 2)
				{
					if(PlayerInfo[playerid][pSailingLicence] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate dozvolu!");
					if(GetPlayerMoney(playerid) < 7500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite dozvolu! (7500$)");
					PlayerInfo[playerid][pMoney] -= 7500;
					GivePlayerMoney(playerid, -7500);
					PlayerInfo[playerid][pSailingLicence] = 1;
					SavePlayer(playerid);
					SCM(playerid, BOJA_ZELENA, "Kupili ste dozvolu za plovidbu!");
				}
				return 1;
			}
		}

		case DIALOG_TUTORIAL:
		{
			if(response || !response)
			{
				if(PlayerInfo[playerid][pOnTut] == 1) // AERODROM
				{
				    SetPlayerCheckpoint(playerid, TutorialCheckpoint[2][0], TutorialCheckpoint[2][1], TutorialCheckpoint[2][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 2;
				}
				else if(PlayerInfo[playerid][pOnTut] == 2) // OPSTINA
				{
     				SetPlayerCheckpoint(playerid, TutorialCheckpoint[3][0], TutorialCheckpoint[3][1], TutorialCheckpoint[3][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 3;
				}
				else if(PlayerInfo[playerid][pOnTut] == 3) // LSPD
				{
     				SetPlayerCheckpoint(playerid, TutorialCheckpoint[4][0], TutorialCheckpoint[4][1], TutorialCheckpoint[4][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 4;
				}
				else if(PlayerInfo[playerid][pOnTut] == 4) // BOLNICA
				{
					SetPlayerCheckpoint(playerid, TutorialCheckpoint[5][0], TutorialCheckpoint[5][1], TutorialCheckpoint[5][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 5;
				}
				else if(PlayerInfo[playerid][pOnTut] == 5) // BANKA
				{
     				SetPlayerCheckpoint(playerid, TutorialCheckpoint[6][0], TutorialCheckpoint[6][1], TutorialCheckpoint[6][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 6;
				}
				else if(PlayerInfo[playerid][pOnTut] == 6) // BURG
				{
     				SetPlayerCheckpoint(playerid, TutorialCheckpoint[7][0], TutorialCheckpoint[7][1], TutorialCheckpoint[7][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 7;
				}
				else if(PlayerInfo[playerid][pOnTut] == 7) // PARKING
				{
     				SetPlayerCheckpoint(playerid, TutorialCheckpoint[8][0], TutorialCheckpoint[8][1], TutorialCheckpoint[8][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 8;
				}
				else if(PlayerInfo[playerid][pOnTut] == 7) // COUNT AND SHUTZ
				{
     				SetPlayerCheckpoint(playerid, TutorialCheckpoint[9][0], TutorialCheckpoint[9][1], TutorialCheckpoint[9][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 8;
				}
				else if(PlayerInfo[playerid][pOnTut] == 9) // TERETANA
				{
     				SetPlayerCheckpoint(playerid, TutorialCheckpoint[10][0], TutorialCheckpoint[10][1], TutorialCheckpoint[10][2], 2.0);
					PlayerInfo[playerid][pOnTut] = 10;
				}
				else if(PlayerInfo[playerid][pOnTut] == 10) // BINCO
				{
     				DisablePlayerCheckpoint(playerid);
     				PlayerInfo[playerid][pMoney] += 500;
     				GivePlayerMoney(playerid, 500);
     				SavePlayer(playerid);
     				SCM(playerid, BOJA_ZELENA, "CESTITAMO! Uspesno ste zavrsili tutorial i zaradili 500$");
     				PlayerOnTutorial[playerid] = 9999;
     				PlayerInfo[playerid][pTut] = 1;
					PlayerInfo[playerid][pOnTut] = 11;
					SavePlayer(playerid);
				}
			}
		}

		case DIALOG_DETECTIVE_SEARCHING:
		{
			if(response)
			{
			    new target, Float:X, Float:Y, Float:Z, str[128];
			    target = DetectivePlayerToFind[playerid];
			    GetPlayerPos(target, X, Y, Z);
			    if(GetPlayerMoney(playerid) < DetectiveSearchingPrice[playerid])
			    {
			        SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da platite ponudu Detektiva!");
			        SCM(DetectiveSearchingOffer[playerid], BOJA_CRVENA, "Igrac nazalost nema dovoljno novca da plati vasu ponudu!");
			        return 1;
				}
			    else if(PlayerInfo[DetectiveSearchingOffer[playerid]][pDetectiveLevel] > 2)
				{
					SetTimerEx("DetectiveStartSearching", 1000, true, "iifff", playerid, target, X, Y, Z);
					SCM(playerid, BOJA_ZELENA, "Igrac Vam je oznacen na mapi, pratite njegovo kretanje. Imate 2 minuta.");
				}
				else if(PlayerInfo[DetectiveSearchingOffer[playerid]][pDetectiveLevel] == 2)
				{
					SetTimerEx("DetectiveStartSearching", 1000, false, "iifff", playerid, target, X, Y, Z);
					PlayerInfo[DetectiveSearchingOffer[playerid]][pDetectivePoints] += 1;
					SCM(playerid, BOJA_ZELENA, "Igrac Vam je oznacen na mapi. Ne mozete pratiti njegovo kretanje.");
				}
				else
				{
				    if(InPoliceHQ[target] != 9999 || InBank[target] != 9999 || InGSFHQ[target] != 9999 || InBallasHQ[target] != 9999 || InVLAHQ[target] != 9999 || InLSVHQ[target] != 9999 || InHouse[target] != 9999 || InBusiness[target] != 9999 || InDrivingSchool[target] != 9999) return SCM(playerid, -1, "Niste uspeli da pronadjete igraca!");
					SetTimerEx("DetectiveStartSearching", 1000, false, "iifff", playerid, target, X, Y, Z);
					PlayerInfo[DetectiveSearchingOffer[playerid]][pDetectivePoints] += 1;
					SCM(playerid, BOJA_ZELENA, "Igrac Vam je oznacen na mapi. Ne mozete pratiti njegovo kretanje.");
				}
				PlayerInfo[playerid][pMoney] -= DetectiveSearchingPrice[playerid];
				GivePlayerMoney(playerid, -DetectiveSearchingPrice[playerid]);

                PlayerInfo[DetectiveSearchingOffer[playerid]][pMoney] += DetectiveSearchingPrice[playerid];
				GivePlayerMoney(DetectiveSearchingOffer[playerid], DetectiveSearchingPrice[playerid]);

				SetTimerEx("DetectiveStopSearching", 120000, false, "i", playerid);
    			SetTimerEx("DetectiveStopSearching", 120000, false, "i", DetectiveSearchingOffer[playerid]);

				format(str, sizeof(str), "Uspesno ste pronasli igraca, zaradili ste %d$.", DetectiveSearchingPrice[playerid]);
				SCM(DetectiveSearchingOffer[playerid], BOJA_ZELENA, str);
			}
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

//---------------------------------------------------------------------------- > COMMANDS
//---------------------------------------------------------------------------- > ADMIN COMMANDS
YCMD:amakeadmin(playerid, params[], help)
{
	#pragma unused help
	new player, level, sendername[MAX_PLAYER_NAME], str[128];
	if(!IsPlayerAdmin(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, level)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /amakeadmin [id/deo imena] [level]");

	PlayerInfo[player][pAdmin] = level;
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dodelio Admina level %d.", sendername, level);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Dodelili ste igracu %s Admina level %d.", sendername, level);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:adonator(playerid, params[], help)
{
	#pragma unused help
	new player, points, sendername[MAX_PLAYER_NAME], str[128];
	if(!IsPlayerAdmin(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, points)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /adonator [id/deo imena] [poeni]");

	if(points == 0)
	{
		PlayerInfo[playerid][pDonator] = 0;
		PlayerInfo[playerid][pDonatorPoints] = 0;
	}
	else
	{
		PlayerInfo[player][pDonator] = 1;
		PlayerInfo[player][pDonatorPoints] += points;
 	}
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dodelio %d Donator poena.", sendername, points);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Dodelili ste igracu %s %d Donator poena.", sendername, points);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:akick(playerid, params[], help)
{
	#pragma unused help
	new player, reason[64];
	if((PlayerInfo[playerid][pAdmin] < 5) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "rs[64]", player, reason)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /kick [id/deo imena] [razlog]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nepoznat ID igraca!");
	else if(strlen(reason) < 1 || strlen(reason) > 64) return SCM(playerid, BOJA_CRVENA, "GRESKA: Razlog ne moze biti kraci od 1 i duzi od 64 znaka!");
	Kick(player);
	return 1;
}

YCMD:goto(playerid, params[], help)
{
    #pragma unused help
    new player, pINT, vID, Float:X, Float:Y, Float:Z;
    if(PlayerInfo[playerid][pAdmin] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
    if(sscanf(params, "u", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /goto [id/deo imena]");
    if(!IsPlayerConnected(player)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID!");

    GetPlayerPos(player, X, Y, Z);
    pINT = GetPlayerInterior(player);

    if(IsPlayerInAnyVehicle(playerid))
	{
		vID = GetPlayerVehicleID(playerid);
  		SetVehiclePos(vID, X-1, Y-1, Z);
  		LinkVehicleToInterior(vID, pINT);
	}
    else
	{
		SetPlayerPos(playerid, X-1, Y-1, Z);
		SetPlayerInterior(playerid, pINT);
	}
    return 1;
}

YCMD:gethere(playerid, params[], help)
{
    #pragma unused help
    new player, pINT, vID, Float:X, Float:Y, Float:Z;
    if(PlayerInfo[playerid][pAdmin] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
    if(sscanf(params, "u", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /time [id/deo imena]");
    if(!IsPlayerConnected(player)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID!");

    GetPlayerPos(playerid, X, Y, Z);
    pINT = GetPlayerInterior(playerid);

    if(IsPlayerInAnyVehicle(player))
	{
		vID = GetPlayerVehicleID(player);
  		SetVehiclePos(vID, X-1, Y-1, Z);
  		LinkVehicleToInterior(vID, pINT);
  		SetPlayerInterior(player, pINT);
	}
    else
    {
		SetPlayerPos(player, X-1, Y-1, Z);
		SetPlayerInterior(player, pINT);
	}
    return 1;
}

YCMD:port(playerid, params[], help)
{
    #pragma unused help
    new target[32], vID;
    if(PlayerInfo[playerid][pAdmin] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
    if(sscanf(params, "s[32]", target)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /port [mesto]");
    if(strcmp(target, "banka", true) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 589.6011, -1240.2231, 17.8361);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 589.6011, -1240.2231, 17.8361);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "opstina", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 1481.5153,-1740.2601,13.1089);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 1481.5153,-1740.2601,13.1089);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}

	}
	else if(strcmp(target, "parking", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 1637.5028, -1151.6288, 23.9063);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 1637.5028, -1151.6288, 23.9063);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "ammunation", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 1364.2379,-1280.8793,13.0893);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 1364.2379,-1280.8793,13.0893);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "autoskola", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, -2026.6176, -100.3294, 35.1641);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, -2026.6176, -100.3294, 35.1641);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "salon1", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 2127.8760,-1119.0120,24.9260);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 2127.8760,-1119.0120,24.9260);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "salon2", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 558.4743,-1252.5942,16.6883);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 558.4743,-1252.5942,16.6883);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "salon3", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 323.1658,2505.4736,16.0548);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 323.1658,2505.4736,16.0548);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "salon4", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, -2225.7283,2376.3650,4.5412);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, -2225.7283,2376.3650,4.5412);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "lspd", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 1539.3977,-1677.4619,13.1032);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 1539.3977,-1677.4619,13.1032);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "spawn", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 1548.0010, -2291.4651, 13.3828);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 1548.0010, -2291.4651, 13.3828);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "lsgaraza", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 1041.1724, -1031.6471, 32.0555);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, 1041.1724, -1031.6471, 32.0555);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "sfgaraza", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, -2711.0183, 217.4066, 4.1897);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, -2711.0183, 217.4066, 4.1897);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "planina", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, -2358.8628, -2187.9668, 33.6227);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, -2358.8628, -2187.9668, 33.6227);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "vrh", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, -2307.7209, -1658.5023, 483.6776);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, -2307.7209, -1658.5023, 483.6776);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "sf", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, -1656.5377, -541.6462, 10.9824);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, -1656.5377, -541.6462, 10.9824);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
	else if(strcmp(target, "lv", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			vID = GetPlayerVehicleID(playerid);
	  		SetVehiclePos(vID, 1707.2388, 1455.0815, 10.4415);
	  		SetVehicleVirtualWorld(vID, 0);
	  		LinkVehicleToInterior(vID, 0);
		}
	    else
		{
			SetPlayerPos(playerid, -1707.2388, 1455.0815, 10.4415);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}
    return 1;
}

YCMD:atime(playerid, params[], help)
{
	#pragma unused help
	new hours, sendername[MAX_PLAYER_NAME], str[128];
 	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
    if(sscanf(params, "i", hours)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /atime [sati]");

	SetWorldTime(hours);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s je postavio vreme na %d sati.", sendername, hours);
	SendClientMessageToAll(BOJA_PLAVA, str);
	return 1;
}

YCMD:aweather(playerid, params[], help)
{
    #pragma unused help
	new weatherid, sendername[MAX_PLAYER_NAME], str[128];
 	if((PlayerInfo[playerid][pAdmin] < 5) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
    if(sscanf(params, "i", weatherid)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /weather [id vremena]");
    //if(weatherid < 0 || weatherid > 20) return SCM(playerid, BOJA_CRVENA, "GRESKA: ID vremena mora biti izmedju 1 i 20!");
	SetWeather(weatherid);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s je postavio vreme ID %d.", sendername, weatherid);
	SendClientMessageToAll(BOJA_PLAVA, str);
	return 1;
}

YCMD:amoney(playerid, params[], help)
{
	#pragma unused help
	new player, money, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, money)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /amoney [id/deo imena] [kolicina]");

	PlayerInfo[player][pMoney] += money;
	GivePlayerMoney(player, money);
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dao %d$.", sendername, money);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Dali ste igracu %s %d$.", sendername, money);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:aamoney(playerid, params[], help)
{
	#pragma unused help
	new player, money, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, money)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /amoney [id/deo imena] [kolicina]");

	GivePlayerMoney(player, money);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dao %d$.", sendername, money);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Dali ste igracu %s %d$.", sendername, money);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:askin(playerid, params[], help)
{
	#pragma unused help
	new player, skin, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 5) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(sscanf(params, "ri", player, skin)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /skin [id/deo imena] [id skina]");
	if(skin < 1 || skin > 299) return SCM(playerid, BOJA_CRVENA, "GRESKA: ID Skina ne moze biti manji od 1 i veci od 299!");

	SetPlayerSkin(player, skin);
	PlayerInfo[player][pSkin] = skin;
	SavePlayer(playerid);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je stavio skin ID: %d.", sendername, skin);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Stavili ste igracu %s skin ID: %d.", sendername, skin);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:ajob(playerid, params[], help)
{
	#pragma unused help
	new player, job, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 5) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, job)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /ajob [id/deo imena] [id posla]");

	PlayerInfo[player][pJob] = job;
	SavePlayer(playerid);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dodelio posao: %s.", sendername, PlayerJob(player));
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Stavili ste igracu %s posao: %s.", sendername, PlayerJob(player));
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:ajoblevel(playerid, params[], help)
{
	#pragma unused help
	new player, job, level, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 5) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "rii", player, job, level)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /ajoblevel [id/deo imena] [id posla] [level]");

	switch(job)
	{
		case 1:
		{
		    PlayerInfo[player][pDetectiveLevel] = level;
		    SavePlayer(player);
		}
		case 2:
		{
		    PlayerInfo[player][pTruckmanLevel] = level;
		    SavePlayer(player);
		}
		case 3:
		{
		    PlayerInfo[player][pTruckmanLevel] = level;
		    SavePlayer(player);
		}
		case 4:
		{
		    PlayerInfo[player][pMechanicLevel] = level;
		    SavePlayer(player);
		}
		case 5:
		{
		    PlayerInfo[player][pTaxiLevel] = level;
		    SavePlayer(player);
		}
 	}

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je stavio level posla %s na: %d.", sendername, PlayerJob(player), level);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Stavili ste igracu %s level posla %s na: %d.", sendername, PlayerJob(player), level);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:ahealth(playerid, params[], help)
{
	#pragma unused help
	new player, health, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(sscanf(params, "ri", player, health)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /health [id/deo imena] [kolicina]");

	SetPlayerHealth(player, health);
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je stavio helte na %d.", sendername, health);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Stavili ste igracu %s helte na %d.", sendername, health);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:aarmor(playerid, params[], help)
{
	#pragma unused help
	new player, armor, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(sscanf(params, "ri", player, armor)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /armor [id/deo imena] [kolicina]");

	SetPlayerArmour(player, armor);
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je stavio pancir na %d.", sendername, armor);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Stavili ste igracu %s pancir na %d.", sendername, armor);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:adrug(playerid, params[], help)
{
	#pragma unused help
	new player, drug, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, drug)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /adrug [id/deo imena] [kolicina]");

	PlayerInfo[player][pDrug] += drug;
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dao %d droge.", sendername, drug);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Dali ste igracu %s %d droge.", sendername, drug);
	SCM(playerid, BOJA_ZELENA, str);

	return 1;
}

YCMD:amats(playerid, params[], help)
{
	#pragma unused help
	new player, mats, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(sscanf(params, "ri", player, mats)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /amats [id/deo imena] [kolicina]");

	PlayerInfo[player][pMats] += mats;
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dao %d materijala.", sendername, mats);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Dali ste igracu %s %d materijala.", sendername, mats);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:aweapon(playerid, params[], help)
{
	#pragma unused help
	new player, weapon, ammo;
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(sscanf(params, "rii", player, weapon, ammo)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /aweapon [id/deo imena igraca] [id oruzja] [metkovi]");
	GivePlayerWeapon(player, weapon, ammo);
	return 1;
}

YCMD:aweaponskill(playerid, params[], help)
{
	#pragma unused help
	new player, weapon, skill;
	if(sscanf(params, "rii", player, weapon, skill)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /aweaponskill [id/deo imena] [oruzje] [skill]");
	else if (player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac ne postoji!");
	else if(weapon < 1 || weapon > 11) return SCM(playerid, BOJA_CRVENA, "GRESKA: Broj za oruzje mora biti izmedju 1 i 9!");
	switch(weapon)
	{

	    case 1:
	    {
		    PlayerInfo[player][pPistolSkill] += skill;
		    SavePlayer(player);
		  	SetPlayerSkillLevel(player, WEAPONSKILL_PISTOL, PlayerInfo[player][pPistolSkill]);
        }
		case 2:
	    {
	        PlayerInfo[player][pSilencedSkill] += skill;
	        SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_PISTOL_SILENCED, PlayerInfo[player][pSilencedSkill]);
        }
	    case 3:
	    {
			PlayerInfo[player][pDesertSkill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_DESERT_EAGLE, PlayerInfo[player][pDesertSkill]);
		}
	    case 4:
	    {
			PlayerInfo[player][pShotgunSkill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_SHOTGUN, PlayerInfo[player][pShotgunSkill]);
        }
	    case 5:
	    {
			PlayerInfo[player][pSawnoffSkill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_SAWNOFF_SHOTGUN, PlayerInfo[player][pSawnoffSkill]);
        }
	    case 6:
	    {
		 	PlayerInfo[player][pCombatSkill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_SPAS12_SHOTGUN, PlayerInfo[player][pCombatSkill]);
        }
	    case 7:
	    {
			PlayerInfo[player][pUziSkill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_MICRO_UZI, PlayerInfo[player][pUziSkill]);
        }
	    case 8:
	    {
			PlayerInfo[player][pMP5Skill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_MP5, PlayerInfo[player][pMP5Skill]);
        }
	    case 9:
	    {
			PlayerInfo[player][pAK47Skill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_AK47, PlayerInfo[player][pAK47Skill]);
        }
	    case 10:
	    {
			PlayerInfo[player][pM4Skill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_M4, PlayerInfo[player][pM4Skill]);
		}
		case 11:
	    {
			PlayerInfo[player][pSniperSkill] += skill;
			SavePlayer(player);
			SetPlayerSkillLevel(player, WEAPONSKILL_SNIPERRIFLE, PlayerInfo[player][pSniperSkill]);
		}
	}
	return 1;
}

YCMD:avehicle(playerid, params[], help)
{
    #pragma unused help
   	new pINT, vehicle, vID,color1, color2, Float:X, Float:Y, Float:Z;
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(sscanf(params, "iii", vehicle, color1, color2)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /vozilo [id vozila] [boja1] [boja2]");

	GetPlayerPos(playerid, X, Y, Z);
	pINT = GetPlayerInterior(playerid);

	vID = CreateVehicle(vehicle, X+1, Y+1, Z, 270.0, color1, color2, -1);
	vEngine[vID] = 0;
	vFuel[vID] = 30;
	SpawnedVehicle[vID] = vID;
	LinkVehicleToInterior(vID, pINT);
	//PutPlayerInVehicle(playerid, vID, 0);
	return 1;
}

YCMD:arepair(playerid, params[], help)
{
	#pragma unused help
	if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu.");
	RepairVehicle(GetPlayerVehicleID(playerid));
	return 1;
}

YCMD:arefill(playerid, params[], help)
{
	#pragma unused help
	new litre;
	if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu.");
	if(sscanf(params, "i", litre)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /arefill [litara]");
	vFuel[GetPlayerVehicleID(playerid)] += litre;
	return 1;
}

YCMD:getvehhere(playerid, params[], help)
{
    #pragma unused help
    new pINT, vehicle, Float:X, Float:Y, Float:Z;
    if((PlayerInfo[playerid][pAdmin] < 3) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
    if(sscanf(params, "i", vehicle)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /getvehhere [id vozila]");

    GetPlayerPos(playerid, X, Y, Z);
    pINT = GetPlayerInterior(playerid);

	SetVehiclePos(vehicle, X-2, Y-2, Z);
	LinkVehicleToInterior(vehicle, pINT);
    return 1;
}

YCMD:getincar(playerid, params[], help)
{
	#pragma unused help
	if((PlayerInfo[playerid][pAdmin] < 3) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	new vID;
	if(sscanf(params, "i", vID)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /getincar [ID vozila]");
	else if(vID == INVALID_VEHICLE_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID vozila!");

	PutPlayerInVehicle(playerid, vID, 0);
	return 1;
}

YCMD:unistivozila(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(IsASpawnedVehicle(i)) DestroyVehicle(i);
	}
	SCM(playerid, BOJA_ZELENA, "Sva stvorena vozila su unistena.");
	return 1;
}

YCMD:uv(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(IsASpawnedVehicle(i)) DestroyVehicle(i);
	}
	SCM(playerid, BOJA_ZELENA, "Sva stvorena vozila su unistena.");
	return 1;
}

YCMD:destroythiscar(playerid, params[], help)
{
    #pragma unused help
    new vID;
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	DestroyVehicle(vID);
	SCM(playerid, BOJA_ZELENA, "Unistili ste vozilo.");
	return 1;
}

YCMD:dtc(playerid, params[], help)
{
    #pragma unused help
    new vID;
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	DestroyVehicle(vID);
	SCM(playerid, BOJA_ZELENA, "Unistili ste vozilo.");
	return 1;
}

YCMD:respawnujrentvozila(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");

	new bool:rentvehicle[MAX_VEHICLES];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInAnyVehicle(i)) { rentvehicle[GetPlayerVehicleID(i)] = true; }
	}
	for(new v = 0; v < sizeof(RentVehicle); v++)
	{
		if(!rentvehicle[v]) SetVehicleToRespawn(v);
	}
	SCM(playerid, BOJA_ZELENA, "Sva nekoriscena rent vozila su respawnovana.");
	return 1;
}

YCMD:rrv(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");

	new bool:rentvehicle[MAX_VEHICLES];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInAnyVehicle(i)) rentvehicle[GetPlayerVehicleID(i)] == true;
	}
	for(new v = 0; v < sizeof(RentVehicle); v++)
	{
		if(!rentvehicle[v]) SetVehicleToRespawn(v);
	}
	SCM(playerid, BOJA_ZELENA, "Sva nekoriscena rent vozila su respawnovana.");
	return 1;
}

YCMD:respawnujsvavozila(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		for(new p = 0; p < MAX_PLAYERS; p++)
		{
		    if(IsPlayerInVehicle(p, i)) continue;
		    else SetVehicleToRespawn(i);
		}
	}
	SCM(playerid, BOJA_ZELENA, "Sva vozila su respawnovana.");
	return 1;
}

YCMD:rsv(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		for(new p = 0; p < MAX_PLAYERS; p++)
		{
		    if(IsPlayerInVehicle(p, i)) continue;
		    else SetVehicleToRespawn(i);
		}
	}
	SCM(playerid, BOJA_ZELENA, "Sva vozila su respawnovana.");
	return 1;
}

YCMD:respawnthiscar(playerid, params[], help)
{
    #pragma unused help
    new vID;
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	SetVehicleToRespawn(vID);
	SCM(playerid, BOJA_ZELENA, "Respawnovali ste vozilo.");
	return 1;
}

YCMD:rtc(playerid, params[], help)
{
    #pragma unused help
    new vID;
    if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	SetVehicleToRespawn(vID);
	SCM(playerid, BOJA_ZELENA, "Respawnovali ste vozilo.");
	return 1;
}

YCMD:ajail(playerid, params[], help)
{
	#pragma unused help
	new player, minutes, cell, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, minutes)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /ajail [id igraca/deo imena] [minuta]");
	cell = random(sizeof(Cells));

	SetPlayerPos(player, Cells[cell][0], Cells[cell][1], Cells[cell][2]);
	SetPlayerInterior(player, 6);
	GameTextForPlayer(player, "~r~Uhapseni ste!", 2000, 6);

	PlayerInfo[player][pWanted] = 9999;
	PlayerInfo[player][pArrested] = 1;
	PlayerInfo[player][pArrestedTime] = 60*minutes;
	PlayerInfo[player][pArrestedTimes] += 1;

	TogglePlayerControllable(player, 1);
	SetPlayerSpecialAction(player, 0);
	Cuffed[player] = 9999;
	KillTimer(CopTimer[Pulled[player]]);
	TogglePlayerControllable(player, 1);
	Pulling[Pulled[player]] = 9999;
	Pulled[player] = 9999;

	ResetPlayerWeapons(player);
	SetPlayerColor(player, 0xFFFFFFAA);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Zatvorili ste %s na %d sekundi.", sendername, minutes*60);
	SCM(player, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s vas je zatvorio na %d sekundi", sendername, minutes*60);
	SCM(player, BOJA_CRVENA, str);
	return 1;
}

YCMD:aunjail(playerid, params[], help)
{
	#pragma unused help
	new player, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 4) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "r", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /aunjail [id igraca/deo imena] [minuta]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	if(PlayerInfo[player][pArrested] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije uhapsen!");

	SetPlayerPos(player, 246.8095, 64.0687, 1003.6406);
	GameTextForPlayer(player, "~g~Pusteni ste iz zatvora!", 3500, 3);
 	PlayerInfo[player][pArrested] = 9999;
 	TextDrawHideForPlayer(player, JailTimeTD[player]);
 	SavePlayer(player);

 	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Pustili ste %s iz zatvora.", sendername);
	SCM(player, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s vas je pustio iz zatvora.", sendername);
	SCM(player, BOJA_CRVENA, str);
	return 1;
}

YCMD:amute(playerid, params[], help)
{
	#pragma unused help
	new player, duration, reason[128], sendername[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ris[128]", player, duration, reason)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /mutiraj [id igraca/deo imena] [trajanje (u sekundama)] [razlog]");

	PlayerInfo[player][pMuted] = 1;
	PlayerInfo[player][pMutedTime] = duration;
	SavePlayer(player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "%s vas je mutirao na %d. \nRazlog: %s", sendername, duration, reason);
	SCM(player, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Mutirali ste %s na %d. \nRazlog: %s", sendername, duration, reason);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:aspecialaction(playerid, params[], help)
{
	#pragma unused help
	new action;
	if(sscanf(params, "i", action)) return SCM(playerid, BOJA_CRVENA, "TEST");
	SetPlayerSpecialAction(playerid, action);
	return 1;
}

YCMD:alevel(playerid, params[], help)
{
	#pragma unused help
	new player, level, sendername[MAX_PLAYER_NAME], str[128];
	if((PlayerInfo[playerid][pAdmin] < 5) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "r", player, level)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /alevel [id/deo imena]");
	PlayerInfo[player][pLevel] = level;
	SavePlayer(player);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Dali ste %s level %d.", sendername, level);
	SCM(player, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je dao level %d.", sendername, level);
	SCM(player, BOJA_CRVENA, str);
	return 1;
}

YCMD:acountdown(playerid, params[], help)
{
	#pragma unused help
	new seconds, str[24];
	if(PlayerInfo[playerid][pAdmin] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
    if(sscanf(params, "i", seconds)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /countdown [vreme] (u sekundama)");
    else if(seconds > 300 || seconds < 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Sekunde ne mogu biti izvan opsega [3-300]!");
	if(Countdown == 9999)
	{
		Countdown = 1;
		CountdownSeconds = seconds;
		CountdownTimer = SetTimer("CountDown", 1000, true);

		format(str, sizeof(str),"~p~Countdown: ~w~%d",seconds);
	 	TextDrawSetString(CountdownTD, str);
		TextDrawShowForAll(CountdownTD);
	}
	else
	{
	    KillTimer(CountdownTimer);
	    TextDrawHideForAll(CountdownTD);
	    Countdown = 1;
		CountdownSeconds = seconds;
		CountdownTimer = SetTimer("CountDown", 1000, true);

		format(str, sizeof(str),"~p~Countdown: ~w~%d",seconds);
	 	TextDrawSetString(CountdownTD, str);
		TextDrawShowForAll(CountdownTD);
	}
	return 1;
}

YCMD:afightstyle(playerid, params[], help)
{
	#pragma unused help
	new style, player, sendername[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pAdmin] == 9999 || PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	if(sscanf(params, "ri", player, style)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /fightsyle [id/deo imena] [stil]");
	else if (player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac ne postoji!");
	else if (style < 4 || (style > 7 && style < 15) || style > 16) return SCM(playerid, BOJA_CRVENA, "GRESKA: Stil moze biti u opsegu 4-7 i 15-16!");
	PlayerInfo[playerid][pFightingStyle] = style;
	SavePlayer(playerid);
	SetPlayerFightingStyle(player, style);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Postavili ste %s brobeni stil na: %s.", sendername, PlayerFightingStyle(playerid));
	SCM(playerid, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je postavio borbeni still na: %s.", sendername, PlayerFightingStyle(playerid));
	SCM(player, BOJA_CRVENA, str);
	return 1;
}
//---------------------------------------------------------------------------- > CONTROLLING PROPERTIES
YCMD:makebizz(playerid, params[], help)
{
	#pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu");
    new price, type, id, Int, VW, string[128], InInt;
    if(sscanf(params, "iii", price, type, InInt)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /makebizz [cena] [tip] [interior]");
    for(new b = 1; b < sizeof(BusinessInfo); b++)
    {
        if(BusinessInfo[b][bPrice] == 0)
        {
            id = b;
            break;
        }
    }
    switch(InInt)
    {
        case 1: // 24/7 1
		{
        	BusinessInfo[id][bInInt] = 17;
			BusinessInfo[id][bExitX] = -25.884499;
    		BusinessInfo[id][bExitY] = -185.868988;
    		BusinessInfo[id][bExitZ] = 1003.549988;
    		format(string, sizeof(string), "24/7");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 2: // 24/7 2
		{
		    BusinessInfo[id][bInInt] = 10;
			BusinessInfo[id][bExitX] = 6.091180;
    		BusinessInfo[id][bExitY] = -29.271898;
    		BusinessInfo[id][bExitZ] = 1003.549988;
    		format(string, sizeof(string), "24/7");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 3: // 24/7 3
		{
		    BusinessInfo[id][bInInt] = 18;
			BusinessInfo[id][bExitX] = -30.946699;
    		BusinessInfo[id][bExitY] = -89.609596;
    		BusinessInfo[id][bExitZ] = 1003.549988;
    		format(string, sizeof(string), "24/7");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 4: // 24/7 4
		{
		    BusinessInfo[id][bInInt] = 16;
			BusinessInfo[id][bExitX] = -25.132599;
    		BusinessInfo[id][bExitY] = -139.066986;
    		BusinessInfo[id][bExitZ] = 1003.549988;
    		format(string, sizeof(string), "24/7");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 5: // 24/7 5
		{
		    BusinessInfo[id][bInInt] = 4;
			BusinessInfo[id][bExitX] = -27.312300;
    		BusinessInfo[id][bExitY] = -29.277599;
    		BusinessInfo[id][bExitZ] = 1003.549988;
    		format(string, sizeof(string), "24/7");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 6: // 24/7 6
		{
		    BusinessInfo[id][bInInt] = 6;
			BusinessInfo[id][bExitX] = -26.691599;
    		BusinessInfo[id][bExitY] = -55.714897;
    		BusinessInfo[id][bExitZ] = 1003.549988;
    		format(string, sizeof(string), "24/7");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 7: // Ammunation 1
		{
		    BusinessInfo[id][bInInt] = 1;
			BusinessInfo[id][bExitX] = 286.148987;
    		BusinessInfo[id][bExitY] = -40.644398;
    		BusinessInfo[id][bExitZ] = 1001.569946;
    		format(string, sizeof(string), "Ammunation");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 8: // Ammunation 2
		{
		    BusinessInfo[id][bInInt] = 4;
			BusinessInfo[id][bExitX] = 286.800995;
    		BusinessInfo[id][bExitY] = -82.547600;
    		BusinessInfo[id][bExitZ] = 1001.539978;
    		format(string, sizeof(string), "Ammunation");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 9: // Ammunation 3
		{
		    BusinessInfo[id][bInInt] = 6;
			BusinessInfo[id][bExitX] = 296.919983;
    		BusinessInfo[id][bExitY] = -108.071999;
    		BusinessInfo[id][bExitZ] = 1001.569946;
    		format(string, sizeof(string), "Ammunation");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 10: // Ammunation 4 (2 floors)
		{
		    BusinessInfo[id][bInInt] = 7;
			BusinessInfo[id][bExitX] = 314.820984;
    		BusinessInfo[id][bExitY] = -141.431992;
    		BusinessInfo[id][bExitZ] = 999.661987;
    		format(string, sizeof(string), "Ammunation");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 11: // Ammunation 5
		{
		    BusinessInfo[id][bInInt] = 6;
			BusinessInfo[id][bExitX] = 316.524994;
    		BusinessInfo[id][bExitY] = -167.706985;
    		BusinessInfo[id][bExitZ] = 999.661987;
    		format(string, sizeof(string), "Ammunation");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 12: // Binco
		{
		    BusinessInfo[id][bInInt] = 15;
			BusinessInfo[id][bExitX] = 207.737991;
    		BusinessInfo[id][bExitY] = -109.019996;
    		BusinessInfo[id][bExitZ] = 1005.132812;
    		format(string, sizeof(string), "Binco");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 13: // DS (Didier Sachs)
		{
		    BusinessInfo[id][bInInt] = 14;
			BusinessInfo[id][bExitX] = 204.332992;
    		BusinessInfo[id][bExitY] = -166.694992;
    		BusinessInfo[id][bExitZ] = 1000.523437;
    		format(string, sizeof(string), "DS (Didier Sachs)");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 14: // Prolaps
		{
		    BusinessInfo[id][bInInt] = 3;
			BusinessInfo[id][bExitX] = 207.054992;
    		BusinessInfo[id][bExitY] = -138.804992;
    		BusinessInfo[id][bExitZ] = 1003.507812;
    		format(string, sizeof(string), "Prolaps");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 15: // Suburban
		{
		    BusinessInfo[id][bInInt] = 1;
			BusinessInfo[id][bExitX] = 203.777999;
    		BusinessInfo[id][bExitY] = -48.492397;
    		BusinessInfo[id][bExitZ] = 1001.804687;
    		format(string, sizeof(string), "Suburban");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 16: // Victim
		{
		    BusinessInfo[id][bInInt] = 5;
			BusinessInfo[id][bExitX] = 226.293991;
    		BusinessInfo[id][bExitY] = -7.431529;
    		BusinessInfo[id][bExitZ] = 1002.210937;
    		format(string, sizeof(string), "Victim");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 17: // ZIP
		{
		    BusinessInfo[id][bInInt] = 18;
			BusinessInfo[id][bExitX] = 161.391006;
    		BusinessInfo[id][bExitY] = -93.159156;
    		BusinessInfo[id][bExitZ] = 1001.804687;
    		format(string, sizeof(string), "ZIP");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 18: // Burg
		{
		    BusinessInfo[id][bInInt] = 10;
			BusinessInfo[id][bExitX] = 364.0647;
    		BusinessInfo[id][bExitY] = -73.8064;
    		BusinessInfo[id][bExitZ] = 1001.507812;
    		format(string, sizeof(string), "Burg");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 19: // Cluckin'Bell
		{
		    BusinessInfo[id][bInInt] = 9;
			BusinessInfo[id][bExitX] = 375.962463;
    		BusinessInfo[id][bExitY] = -65.816848;
    		BusinessInfo[id][bExitZ] = 1001.507812;
    		format(string, sizeof(string), "Cluckin'Bell");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 20: // Well Stacked Pizza
		{
		    BusinessInfo[id][bInInt] = 5;
			BusinessInfo[id][bExitX] = 372.2830;
    		BusinessInfo[id][bExitY] = -132.2032;
    		BusinessInfo[id][bExitZ] = 1001.4922;
    		format(string, sizeof(string), "Well Stacked Pizza");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 21: // Rusty Brown Donuts
		{
		    BusinessInfo[id][bInInt] = 17;
			BusinessInfo[id][bExitX] = 377.0696;
    		BusinessInfo[id][bExitY] = -191.9550;
    		BusinessInfo[id][bExitZ] = 1000.632812;
    		format(string, sizeof(string), "Rusty Brown Donuts");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 22: // Dillimore Gas Station
		{
		    BusinessInfo[id][bInInt] = 0;
			BusinessInfo[id][bExitX] = 663.836242;
    		BusinessInfo[id][bExitY] = -575.605407;
    		BusinessInfo[id][bExitZ] = 16.343263;
    		format(string, sizeof(string), "Dillimore Gas Station");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 23: // Club
		{
		    BusinessInfo[id][bInInt] = 17;
			BusinessInfo[id][bExitX] = 493.390991;
    		BusinessInfo[id][bExitY] = -22.722799;
    		BusinessInfo[id][bExitZ] = 1000.679687;
    		format(string, sizeof(string), "Club");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 24: // Bar
		{
		    BusinessInfo[id][bInInt] = 11;
			BusinessInfo[id][bExitX] = 501.980987;
    		BusinessInfo[id][bExitY] = -69.150199;
    		BusinessInfo[id][bExitZ] = 998.757812;
    		format(string, sizeof(string), "Bar");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 25: // Lil' probe inn
		{
		    BusinessInfo[id][bInInt] = 18;
			BusinessInfo[id][bExitX] = -227.027999;
    		BusinessInfo[id][bExitY] = 1401.229980;
    		BusinessInfo[id][bExitZ] = 27.765625;
    		format(string, sizeof(string), "Lil' probe inn");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 26: // Jay's diner
		{
		    BusinessInfo[id][bInInt] = 4;
			BusinessInfo[id][bExitX] = 457.304748;
    		BusinessInfo[id][bExitY] = -88.428497;
    		BusinessInfo[id][bExitZ] = 999.554687;
    		format(string, sizeof(string), "Jay's diner");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 27: // Gant bridge diner
		{
		    BusinessInfo[id][bInInt] = 5;
			BusinessInfo[id][bExitX] = 454.973937;
    		BusinessInfo[id][bExitY] = -110.104995;
    		BusinessInfo[id][bExitZ] = 1000.077209;
    		format(string, sizeof(string), "Gant bridge diner");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 28: // World of coq
		{
		    BusinessInfo[id][bInInt] = 1;
			BusinessInfo[id][bExitX] = 452.489990;
    		BusinessInfo[id][bExitY] = -18.179698;
    		BusinessInfo[id][bExitZ] = 1001.132812;
    		format(string, sizeof(string), "World of coq");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 29: // Welcome pump
		{
		    BusinessInfo[id][bInInt] = 1;
			BusinessInfo[id][bExitX] = 681.557861;
    		BusinessInfo[id][bExitY] = -455.680053;
    		BusinessInfo[id][bExitZ] = -25.609874;
    		format(string, sizeof(string), "Welcome pump");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
		case 30: // Big spread ranch
		{
		    BusinessInfo[id][bInInt] = 3;
			BusinessInfo[id][bExitX] = 1212.019897;
    		BusinessInfo[id][bExitY] = -28.663099;
    		BusinessInfo[id][bExitZ] = 1000.953125;
    		format(string, sizeof(string), "Big spread ranch");
    		strmid(BusinessInfo[id][bName], string, 0, strlen(string), 128);
		}
	}
    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, A);
    Int = GetPlayerInterior(playerid);
    VW = GetPlayerVirtualWorld(playerid);

    BusinessInfo[id][bOwned] = 0;
    BusinessInfo[id][bPrice] = price;
    BusinessInfo[id][bEnterFee] = 0;
    BusinessInfo[id][bMoney] = 0;
    BusinessInfo[id][bType] = type;
    BusinessInfo[id][bEnterX] = X;
    BusinessInfo[id][bEnterY] = Y;
    BusinessInfo[id][bEnterZ] = Z;
    BusinessInfo[id][bEnterA] = A;
    BusinessInfo[id][bLocked] = 0;

    BusinessInfo[id][bInt] = Int;
    BusinessInfo[id][bVW] = VW;
    BusinessInfo[id][bInVW] = id;
	BusinessInfo[id][bID] = id;

    format(string, sizeof(string), "Nema");
    strmid(BusinessInfo[id][bOwner], string, 0, strlen(string), 128);

    if(BusinessInfo[id][bExitIcon]) DestroyPickup(BusinessInfo[id][bExitIcon]);
    if(BusinessInfo[id][bIcon]) DestroyPickup(BusinessInfo[id][bIcon]);
   	BusinessInfo[id][bIcon] = CreatePickup(1274, 1, BusinessInfo[id][bEnterX], BusinessInfo[id][bEnterY], BusinessInfo[id][bEnterZ], BusinessInfo[id][bVW]);

    new business3dtext[256];
  	format(business3dtext, sizeof(business3dtext), ""BELA" Ovaj biznis vlasnika !\n "PLAVA"Cena biznisa"BELA": %d \n "PLAVA"ID"BELA": %d \n Da kupite ovaj biznis \n kucajte "PLAVA"/kupibiznis", BusinessInfo[id][bPrice], BusinessInfo[id][bID]);
    BusinessLabelArray[id] = Create3DTextLabel(business3dtext, -1, BusinessInfo[id][bEnterX], BusinessInfo[id][bEnterY], BusinessInfo[id][bEnterZ], 20.0, BusinessInfo[id][bVW]);

    SaveBizz(id);
    return 1;
}

YCMD:deletebizz(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return 1;

    new bid;

    if(sscanf(params, "i", bid)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /obrisibiznis [id]");
    if(BusinessInfo[bid][bOwned] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ovaj biznis ima vlasnika.");

    BusinessInfo[bid][bOwned] = 0;
    BusinessInfo[bid][bPrice] = 0;
    BusinessInfo[bid][bOwner] = 0;
    BusinessInfo[bid][bType] = 0;
    BusinessInfo[bid][bLocked] = 0;
    BusinessInfo[bid][bName] = 0;
    BusinessInfo[bid][bMoney] = 0;
    BusinessInfo[bid][bEnterFee] = 0;
    BusinessInfo[bid][bEnterX] = 0;
    BusinessInfo[bid][bEnterY] = 0;
    BusinessInfo[bid][bEnterZ] = 0;
    BusinessInfo[bid][bEnterA] = 0;
    BusinessInfo[bid][bExitX] = 0;
    BusinessInfo[bid][bExitY] = 0;
    BusinessInfo[bid][bExitZ] = 0;
    BusinessInfo[bid][bExitA] = 0;
    BusinessInfo[bid][bInt] = 0;
    BusinessInfo[bid][bVW] = 0;
    BusinessInfo[bid][bID] = 0;

   	DestroyPickup(BusinessInfo[bid][bIcon]);
	Delete3DTextLabel(BusinessLabelArray[bid]);

    new string[128];
    format(string, sizeof(string), BPATH, bid);
    fremove(string);
    return 1;
}

YCMD:bizz(playerid, params[], help)
{
	new command[16];
	if(sscanf(params, "s[16]", command))
	{
		SCM(playerid, BOJA_PLAVA, "KORISCENJE: /b(suiness) [komanda]");
		SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell, lock, fee, name");
	}
	else
	{
		if(strcmp(command, "buy", true) == 0)
		{
			new id = IsPlayerNearBusinessEnter(playerid);
			new sendername[MAX_PLAYER_NAME];
			if(id == -1 || id == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu biznisa!");
			if(BusinessInfo[id][bOwned] != 0 || BusinessInfo[id][bPrice] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ovaj biznis nije na prodaju!");
			if(PlayerInfo[playerid][pBizzID] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate jedan biznis!");
			if(GetPlayerMoney(playerid) < BusinessInfo[id][bPrice]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite ovaj biznis!");
			sendername = GetPlayerNameEx(playerid);
			PlayerInfo[playerid][pBizzID] = id;
			PlayerInfo[playerid][pMoney] -= BusinessInfo[id][bPrice];
			GivePlayerMoney(playerid, -BusinessInfo[id][bPrice]);
			BusinessInfo[id][bLocked] = 0;
			BusinessInfo[id][bOwned] = 1;
			BusinessInfo[id][bOwner] = sendername;
			SCM(playerid, BOJA_CRVENA, "Kupili ste biznis.");
			new business3dtext[256];
			format(business3dtext, sizeof(business3dtext), ""BELA" Ovaj biznis ima vlasnika !\n "PLAVA"Ime biznisa"BELA": %s \n "PLAVA"Vlasnik"BELA": %s \n "PLAVA"Cena ulaza"BELA": %d \n Da udjete kucajte "PLAVA"/enter", BusinessInfo[id][bName], BusinessInfo[id][bOwner], BusinessInfo[id][bEnterFee]);
			Update3DTextLabelText(BusinessLabelArray[id], -1, business3dtext);
			SaveBizz(id);
			SavePlayer(playerid);
		}
		else if(strcmp(command, "kupi", true) == 0)
		{
			new id = IsPlayerNearBusinessEnter(playerid);
			new sendername[MAX_PLAYER_NAME];
			if(id == -1 || id == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu biznisa!");
			if(BusinessInfo[id][bOwned] != 0 || BusinessInfo[id][bPrice] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ovaj biznis nije na prodaju!");
			if(PlayerInfo[playerid][pBizzID] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate jedan biznis!");
			if(GetPlayerMoney(playerid) < BusinessInfo[id][bPrice]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite ovaj biznis!");
			sendername = GetPlayerNameEx(playerid);
			PlayerInfo[playerid][pBizzID] = id;
			PlayerInfo[playerid][pMoney] -= BusinessInfo[id][bPrice];
			GivePlayerMoney(playerid, -BusinessInfo[id][bPrice]);
			BusinessInfo[id][bLocked] = 0;
			BusinessInfo[id][bOwned] = 1;
			BusinessInfo[id][bOwner] = sendername;
			SCM(playerid, BOJA_CRVENA, "Kupili ste biznis.");
			new business3dtext[256];
			format(business3dtext, sizeof(business3dtext), ""BELA" Ovaj biznis ima vlasnika !\n "PLAVA"Ime biznisa"BELA": %s \n "PLAVA"Vlasnik"BELA": %s \n "PLAVA"Cena ulaza"BELA": %d \n Da udjete kucajte "PLAVA"/enter", BusinessInfo[id][bName], BusinessInfo[id][bOwner], BusinessInfo[id][bEnterFee]);
			Update3DTextLabelText(BusinessLabelArray[id], -1, business3dtext);
			SaveBizz(id);
			SavePlayer(playerid);
		}
		else if(strcmp(command, "sell", true) == 0)
		{
			new id = PlayerInfo[playerid][pBizzID];
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis.");
			BusinessInfo[id][bOwned] = 0;
			BusinessInfo[id][bOwner] = 0;
			BusinessInfo[id][bLocked] = 1;
			PlayerInfo[playerid][pMoney] = BusinessInfo[id][bPrice];
			PlayerInfo[playerid][pBizzID] = 9999;
			SCM(playerid, BOJA_ZELENA, "Prodali ste biznis.");
			new business3dtext[256];
			format(business3dtext, sizeof(business3dtext), ""BELA" Ovaj biznis nema vlasnika !\n "PLAVA"Ime biznisa"BELA": %s \n "PLAVA"Cena biznisa"BELA": %d \n Da kupite ovaj biznis \n kucajte "PLAVA"/buybizz", BusinessInfo[id][bName], BusinessInfo[id][bPrice]);
			Update3DTextLabelText(BusinessLabelArray[id], -1, business3dtext);
			SaveBizz(id);
			SavePlayer(playerid);
		}
		else if(strcmp(command, "prodaj", true) == 0)
		{
			new id = PlayerInfo[playerid][pBizzID];
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis.");
			BusinessInfo[id][bOwned] = 0;
			BusinessInfo[id][bOwner] = 0;
			BusinessInfo[id][bLocked] = 1;
			PlayerInfo[playerid][pMoney] = BusinessInfo[id][bPrice];
			PlayerInfo[playerid][pBizzID] = 9999;
			SCM(playerid, BOJA_ZELENA, "Prodali ste biznis.");
			new business3dtext[256];
			format(business3dtext, sizeof(business3dtext), ""BELA" Ovaj biznis nema vlasnika !\n "PLAVA"Ime biznisa"BELA": %s \n "PLAVA"Cena biznisa"BELA": %d \n Da kupite ovaj biznis \n kucajte "PLAVA"/buybizz", BusinessInfo[id][bName], BusinessInfo[id][bPrice]);
			Update3DTextLabelText(BusinessLabelArray[id], -1, business3dtext);
			SaveBizz(id);
			SavePlayer(playerid);
		}
		else if(strcmp(command, "lock", true) == 0)
		{
			new id = IsPlayerNearBusinessEnter(playerid);
			if(id != PlayerInfo[playerid][pBizzID]) return SCM(playerid, BOJA_CRVENA, "Niste blizu svog biznisa.");
			if(BusinessInfo[id][bLocked] == 1)
			{
				BusinessInfo[id][bLocked] = 0;
				GameTextForPlayer(playerid, "Biznis ~g~otkljucan!", 3000, 3);
				SaveBizz(id);
			}
			else
			{
				BusinessInfo[id][bLocked] = 1;
				GameTextForPlayer(playerid, "Biznis ~r~otkljucan!", 3000, 3);
				SaveBizz(id);
			}
		}
		else if(strcmp(command, "zakljucaj", true) == 0)
		{
			new id = IsPlayerNearBusinessEnter(playerid);
			if(id != PlayerInfo[playerid][pBizzID]) return SCM(playerid, BOJA_CRVENA, "Niste blizu svog biznisa.");
			if(BusinessInfo[id][bLocked] == 1)
			{
				BusinessInfo[id][bLocked] = 0;
				GameTextForPlayer(playerid, "Biznis ~g~otkljucan!", 3000, 3);
				SaveBizz(id);
			}
			else
			{
				BusinessInfo[id][bLocked] = 1;
				GameTextForPlayer(playerid, "Biznis ~r~otkljucan!", 3000, 3);
				SaveBizz(id);
			}
		}
		else if(!strfind(command, "name"))
		{
			new name[128], str[128];
			if(sscanf(params, "s[16]s[128]", command, name)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /b(usiness) [name] [ime]");
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis.");
			BusinessInfo[PlayerInfo[playerid][pBizzID]][bName] = name;
			format(str, sizeof(str), "Promenili ste ime biznisa u %s.", name);
			SCM(playerid, BOJA_ZELENA, str);
			SaveBizz(PlayerInfo[playerid][pBizzID]);
		}
		else if(!strfind(command, "ime"))
		{
			new name[128], str[128];
			if(sscanf(params, "s[16]s[128]", command, name)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /b(usiness) [name] [ime]");
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis.");
			BusinessInfo[PlayerInfo[playerid][pBizzID]][bName] = name;
			format(str, sizeof(str), "Promenili ste ime biznisa u %s.", name);
			SCM(playerid, BOJA_ZELENA, str);
			SaveBizz(PlayerInfo[playerid][pBizzID]);
		}
		else if(!strfind(command, "fee"))
		{
			new price, str[128];
			if(sscanf(params, "s[16]i", command, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /b(usiness) [fee] [cena]");
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis.");
			BusinessInfo[PlayerInfo[playerid][pBizzID]][bEnterFee] = price;
			format(str, sizeof(str), "Promenili ste cenu ulaza na %d.", price);
			SCM(playerid, BOJA_ZELENA, str);
			SaveBizz(PlayerInfo[playerid][pBizzID]);
		}
		else if(!strfind(command, "cenaulaza"))
		{
			new price, str[128];
			if(sscanf(params, "s[16]i", command, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /b(usiness) [fee] [cena]");
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis.");
			BusinessInfo[PlayerInfo[playerid][pBizzID]][bEnterFee] = price;
			format(str, sizeof(str), "Promenili ste cenu ulaza na %d.", price);
			SCM(playerid, BOJA_ZELENA, str);
			SaveBizz(PlayerInfo[playerid][pBizzID]);
		}
		else if(strcmp(command, "money", true) == 0)
		{
			new str[128];
			new id = PlayerInfo[playerid][pBizzID];
			new near = IsPlayerNearBusinessEnter(playerid);
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis!");
			if(near != id) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu vaseg biznisa!");
			if(BusinessInfo[id][bMoney] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate novca na racunu biznisa!");
			PlayerInfo[playerid][pMoney] += BusinessInfo[id][bMoney];
			GivePlayerMoney(playerid, BusinessInfo[id][bMoney]);
			BusinessInfo[id][bMoney] = 0;
			format(str, sizeof(str), "Podigli ste %d$ sa racuna biznisa.", BusinessInfo[id][bMoney]);
			SCM(playerid, BOJA_ZELENA, str);
			SaveBizz(id);
			SavePlayer(playerid);
		}
		else if(strcmp(command, "podigninovac", true) == 0)
		{
			new str[128];
			new id = PlayerInfo[playerid][pBizzID];
			new near = IsPlayerNearBusinessEnter(playerid);
			if(PlayerInfo[playerid][pBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate biznis!");
			if(near != id) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu vaseg biznisa!");
			if(BusinessInfo[id][bMoney] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate novca na racunu biznisa!");
			PlayerInfo[playerid][pMoney] += BusinessInfo[id][bMoney];
			GivePlayerMoney(playerid, BusinessInfo[id][bMoney]);
			BusinessInfo[id][bMoney] = 0;
			format(str, sizeof(str), "Podigli ste %d$ sa racuna biznisa.", BusinessInfo[id][bMoney]);
			SCM(playerid, BOJA_ZELENA, str);
			SaveBizz(id);
			SavePlayer(playerid);
		}
		else
		{
			SCM(playerid, BOJA_PLAVA, "KORISCENJE: /b(suiness) [komanda]");
			SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell, lock, fee, name");
		}
	}
	return 1;
}

YCMD:makespecbizz(playerid, params[], help)
{
	#pragma unused help
    if(!IsPlayerAdmin(playerid)) return SCM(playerid, BOJA_CRVENA, "Niste ovlasceni da koristite ovu komandu!");

    new id, string[128], Float:X, Float:Y, Float:Z, Float:A;
    for(new sb = 1; sb < sizeof(SpecBusinessInfo); sb++)
    {
        if(SpecBusinessInfo[sb][sbPrice] == 0)
        {
            id = sb;
            break;
        }
    }
    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, A);
    SpecBusinessInfo[id][sbOwned] = 0;
	SpecBusinessInfo[id][sbMoney] = 0;
    SpecBusinessInfo[id][sbPrice] = 1000;
	SpecBusinessInfo[id][sbEnterFee] = 0;
    SpecBusinessInfo[id][sbEnterX] = X;
    SpecBusinessInfo[id][sbEnterY] = Y;
    SpecBusinessInfo[id][sbEnterZ] = Z;
    SpecBusinessInfo[id][sbEnterA] = A;
    SpecBusinessInfo[id][sbID] = id;

    format(string, sizeof(string), "Nema");
	strmid(SpecBusinessInfo[id][sbOwner], string, 0, strlen(string), 255);
    strmid(SpecBusinessInfo[id][sbName], string, 0, strlen(string), 255);
	strmid(SpecBusinessInfo[id][sbDescription], string, 0, strlen(string), 255);

    if(SpecBusinessInfo[id][sbIcon]) DestroyPickup(SpecBusinessInfo[id][sbIcon]);
    SpecBusinessInfo[id][sbIcon] = CreatePickup(1239, 1, SpecBusinessInfo[id][sbEnterX], SpecBusinessInfo[id][sbEnterY], SpecBusinessInfo[id][sbEnterZ], 0);

    new str1[128], str2[128], str3[128], specbusiness3dtext[1024];
  	format(str1, sizeof(str1), "Ovaj biznis nema vlasnika! \nZa vise informacija posetite forum! \nIme biznisa: "PLAVA"%s", SpecBusinessInfo[id][sbName]);
	format(str2, sizeof(str2), "\n"BELA"ID: "PLAVA"%d", SpecBusinessInfo[id][sbID]);
	format(str3, sizeof(str3), "\n"BELA"Opis: "PLAVA"%s", SpecBusinessInfo[id][sbDescription]);
	format(specbusiness3dtext, sizeof(specbusiness3dtext), "%s%s%s", str1, str2, str3);
    SpecBusinessLabelArray[id] = Create3DTextLabel(specbusiness3dtext, -1, SpecBusinessInfo[id][sbEnterX], SpecBusinessInfo[id][sbEnterY], SpecBusinessInfo[id][sbEnterZ], 20.0, 0);

    SaveSpecBizz(id);
    return 1;
}

YCMD:specbizzowner(playerid, params[], help)
{
	#pragma unused help
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "Niste ovlasceni da koristite ovu komandu");

	new id, player, sendername[MAX_PLAYER_NAME], str[128];
	if(sscanf(params, "ii", player, id)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /specbizzowner [id/deo imena] [id sbiznisa]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");

	SpecBusinessInfo[id][sbOwned] = 1;
	sendername = GetPlayerNameEx(player);
	strmid(SpecBusinessInfo[id][sbOwner], sendername, 0, strlen(sendername), 999);
	SpecBusinessInfo[id][sbMoney] = 0;
 	PlayerInfo[player][pSBizzID] = id;
	SaveSpecBizz(id);
	SavePlayer(player);

	format(str, sizeof(str), "Postavio si %s za vlasnika specijalnog biznisa %d.", sendername, id);
	SCM(playerid, BOJA_ZELENA, str);
	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s vas je postavio za vlasnika specijalnog biznisa %d.", sendername, id);
	SCM(player, BOJA_ZELENA, str);
	return 1;
}

YCMD:specbizzremoveowner(playerid, params[], help)
{
	#pragma unused help
	if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "Niste ovlasceni da koristite ovu komandu");

	new id, player, sendername[MAX_PLAYER_NAME], str[128];
	if(sscanf(params, "ii", player, id)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /removeowner [id/deo imena] [id sbiznisa]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");

	SpecBusinessInfo[id][sbOwned] = 0;
	format(str, sizeof(str), "Nema");
	strmid(SpecBusinessInfo[id][sbOwner], str, 0, strlen(str), 999);
	SpecBusinessInfo[id][sbMoney] = 0;
 	PlayerInfo[player][pSBizzID] = 9999;
	SaveSpecBizz(id);
	SavePlayer(player);

    sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Skinuo si %s za vlasnika specijalnog biznisa %d.", sendername, id);
	SCM(playerid, BOJA_ZELENA, str);
	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s Vam je skinuo vlasnika specijalnog biznisa %d.", sendername, id);
	SCM(player, BOJA_CRVENA, str);
	return 1;
}

YCMD:specbizzprice(playerid, params[], help)
{
	#pragma unused help
	new price, str[128];
	new id = PlayerInfo[playerid][pSBizzID];
    new near = IsPlayerNearSpecBusiness(playerid);
    if(sscanf(params, "i", price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /specbizzprice [$]");
    if(PlayerInfo[playerid][pSBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate specijalan biznis!");
    if(near != id) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu vaseg specijalnog biznisa!");
    format(str, sizeof(str), "Stavili ste cenu ulaza na: %d.", price);
	SCM(playerid, BOJA_ZELENA, str);
    SpecBusinessInfo[id][sbEnterFee] = price;
    SaveSpecBizz(id);
    return 1;
}

YCMD:specbizzdescription(playerid, params[], help)
{
	#pragma unused help
	new description[128];
	new id = PlayerInfo[playerid][pSBizzID];
    new near = IsPlayerNearSpecBusiness(playerid);
	if(sscanf(params, "s[128]", description)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /specbizzdescription opis [text]");
	new lenght = strlen(description);
	if(lenght < 1 || lenght > 127) return SCM(playerid, BOJA_CRVENA, "GRESKA: Opis ne moze biti kraci od 1 a duzi od 127 karaktera!");
	if(PlayerInfo[playerid][pSBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate specijalan biznis!");
    if(near != id) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu vaseg specijalnog biznisa!");

    SpecBusinessInfo[id][sbDescription] = description;
    SaveSpecBizz(id);
    Delete3DTextLabel(SpecBusinessLabelArray[id]);
    new str1[128], str2[128], str3[128], specbusiness3dtext[1024];
  	format(str1, sizeof(str1), "Ime biznisa: "PLAVA"%s \n"BELA"Vlasnik biznisa: "PLAVA"%s", SpecBusinessInfo[id][sbName], SpecBusinessInfo[id][sbOwner]);
	format(str2, sizeof(str2), "ID: "PLAVA"%d", SpecBusinessInfo[id][sbID]);
	format(str3, sizeof(str3), "\nOpis: "PLAVA"%s", SpecBusinessInfo[id][sbDescription]);
	format(specbusiness3dtext, sizeof(specbusiness3dtext), "%s%s%s", str1, str2, str3);
    SpecBusinessLabelArray[id] = Create3DTextLabel(specbusiness3dtext, -1, SpecBusinessInfo[id][sbEnterX], SpecBusinessInfo[id][sbEnterY], SpecBusinessInfo[id][sbEnterZ], 20.0, 0);
    return 1;
}

YCMD:specbizzmoney(playerid, params[], help)
{
	#pragma unused help
	new str[128];
	new id = PlayerInfo[playerid][pSBizzID];
    new near = IsPlayerNearSpecBusiness(playerid);
    if(PlayerInfo[playerid][pSBizzID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate specijalan biznis!");
    if(near != id) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu vaseg specijalnog biznisa!");
    if(SpecBusinessInfo[id][sbMoney] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate novca na racunu biznisa!");
    PlayerInfo[playerid][pMoney] += SpecBusinessInfo[id][sbMoney];
    GivePlayerMoney(playerid, SpecBusinessInfo[id][sbMoney]);
    format(str, sizeof(str), "Podigli ste %d$ sa racuna biznisa.", SpecBusinessInfo[id][sbMoney]);
	SCM(playerid, BOJA_ZELENA, str);
    SpecBusinessInfo[id][sbMoney] = 0;
    SaveSpecBizz(id);
    SavePlayer(playerid);
    return 1;
}

YCMD:makehouse(playerid, params[], help)
{
	#pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");

    new price, id, Int, VW, InInt;
    if(sscanf(params, "ii", price, InInt)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /makehouse [cena] [interior]");

    for(new h = 1; h < sizeof(HouseInfo); h++)
    {
        if(HouseInfo[h][hPrice] == 0)
        {
            id = h;
            break;
        }
    }
    switch(InInt)
	{
	    case 0: // CJ House
		{
        	HouseInfo[id][hInInt] = 3;
			HouseInfo[id][hExitX] = 2496.05;
    		HouseInfo[id][hExitY] = -1692.73;
    		HouseInfo[id][hExitZ] = 1015.75;
		}
        case 1: // Safe House 1
		{
        	HouseInfo[id][hInInt] = 1;
			HouseInfo[id][hExitX] = 223.04;
    		HouseInfo[id][hExitY] = 1287.26;
    		HouseInfo[id][hExitZ] = 1083.2;
		}
		case 2: // Safe House 2
		{
		    HouseInfo[id][hInInt] = 4;
			HouseInfo[id][hExitX] = 260.98;
    		HouseInfo[id][hExitY] = 1284.55;
    		HouseInfo[id][hExitZ] = 1081.3;
		}
		case 3: // Safe House 3
		{
		    HouseInfo[id][hInInt] = 5;
			HouseInfo[id][hExitX] = 140.18;
    		HouseInfo[id][hExitY] = 1366.58;
    		HouseInfo[id][hExitZ] = 1084.97;
		}
		case 4: // Safe House 4
		{
		    HouseInfo[id][hInInt] = 9;
			HouseInfo[id][hExitX] = 82.95;
    		HouseInfo[id][hExitY] = 1322.44;
    		HouseInfo[id][hExitZ] = 1084.99;
		}
		case 7:  // Safe House 7
		{
		    HouseInfo[id][hInInt] = 8;
			HouseInfo[id][hExitX] = -42.85;
    		HouseInfo[id][hExitY] = 1405.61;
    		HouseInfo[id][hExitZ] = 1085.5;
		}
		case 8: // Safe House 8
		{
		    HouseInfo[id][hInInt] = 6;
			HouseInfo[id][hExitX] = -68.69;
    		HouseInfo[id][hExitY] = 1351.97;
    		HouseInfo[id][hExitZ] = 1081.28;
		}
		case 9: // Safe House 9
		{
		    HouseInfo[id][hInInt] = 6;
			HouseInfo[id][hExitX] = 2333.11;
    		HouseInfo[id][hExitY] = -1077.1;
    		HouseInfo[id][hExitZ] = 1050.04;
		}
		case 10: // Safe House 10
		{
		    HouseInfo[id][hInInt] = 5;
			HouseInfo[id][hExitX] = 2233.8;
    		HouseInfo[id][hExitY] = -1115.36;
    		HouseInfo[id][hExitZ] = 1051.91;
		}
		case 11: // Safe House 11
		{
		    HouseInfo[id][hInInt] = 8;
			HouseInfo[id][hExitX] = 2365.3;
    		HouseInfo[id][hExitY] = -1134.92;
    		HouseInfo[id][hExitZ] = 1051.91;
		}
		case 12: // Safe House 12
		{
		    HouseInfo[id][hInInt] = 11;
			HouseInfo[id][hExitX] = 2282.91;
    		HouseInfo[id][hExitY] = -1140.29;
    		HouseInfo[id][hExitZ] = 1051.91;
		}
  		case 13: // Safe House 13
		{
		    HouseInfo[id][hInInt] = 6;
			HouseInfo[id][hExitX] = 2196.79;
    		HouseInfo[id][hExitY] = -1204.35;
    		HouseInfo[id][hExitZ] = 1050.05;
		}
		case 14: // Safe House 14
		{
		    HouseInfo[id][hInInt] = 10;
			HouseInfo[id][hExitX] = 2270.39;
    		HouseInfo[id][hExitY] = -1210.45;
    		HouseInfo[id][hExitZ] = 1048.57;
		}
		case 15: // Safe House 15
		{
		    HouseInfo[id][hInInt] = 6;
			HouseInfo[id][hExitX] = 2308.79;
    		HouseInfo[id][hExitY] = -1212.88;
    		HouseInfo[id][hExitZ] = 1050.3;
		}
		case 16: // Safe House 16
		{
		    HouseInfo[id][hInInt] = 1;
			HouseInfo[id][hExitX] = 2217.54;
    		HouseInfo[id][hExitY] = -1076.29;
    		HouseInfo[id][hExitZ] = 1051.52;
		}
		case 17: // Safe House 17
		{
		    HouseInfo[id][hInInt] = 2;
			HouseInfo[id][hExitX] = 2237.59;
    		HouseInfo[id][hExitY] = -1080.97;
    		HouseInfo[id][hExitZ] = 1050.07;
		}
		case 18: // Safe House 18
		{
		    HouseInfo[id][hInInt] = 9;
			HouseInfo[id][hExitX] = 2317.82;
    		HouseInfo[id][hExitY] = -1026.75;
    		HouseInfo[id][hExitZ] = 1051.21;
		}
		case 19: // Budget Inn Motel Room
		{
		    HouseInfo[id][hInInt] = 12;
			HouseInfo[id][hExitX] = 447.52;
    		HouseInfo[id][hExitY] = 511.49;
    		HouseInfo[id][hExitZ] = 1001.42;
		}
		case 20: // Abandon House
		{
		    HouseInfo[id][hInInt] = 10;
			HouseInfo[id][hExitX] = 422.16;
    		HouseInfo[id][hExitY] = 2536.52;
    		HouseInfo[id][hExitZ] = 11.01;
		}

	}
    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, A);
    Int = GetPlayerInterior(playerid);
    VW = GetPlayerVirtualWorld(playerid);

    HouseInfo[id][hOwned] = 0;
    HouseInfo[id][hPrice] = price;
    HouseInfo[id][hEnterX] = X;
    HouseInfo[id][hEnterY] = Y;
    HouseInfo[id][hEnterZ] = Z;
    HouseInfo[id][hEnterA] = A;
    HouseInfo[id][hLocked] = 1;

    HouseInfo[id][hInt] = Int;
    HouseInfo[id][hVW] = VW;
    HouseInfo[id][hInVW] = id;
    HouseInfo[id][hID] = id;

	HouseInfo[id][hSlot1] = 9999;
	HouseInfo[id][hSlot1Ammo] = 0;
	HouseInfo[id][hSlot2] = 9999;
	HouseInfo[id][hSlot2Ammo] = 0;
	HouseInfo[id][hSlot3] = 9999;
	HouseInfo[id][hSlot3Ammo] = 0;
	HouseInfo[id][hMats] = 0;
	HouseInfo[id][hDrug] = 0;

    if(HouseInfo[id][hIcon]) DestroyPickup(HouseInfo[id][hIcon]);
    HouseInfo[id][hIcon] = CreatePickup(1273, 1, HouseInfo[id][hEnterX], HouseInfo[id][hEnterY], HouseInfo[id][hEnterZ], HouseInfo[id][hVW]);
	SaveHouse(id);

	new house3dtext[512];
	format(house3dtext, sizeof(house3dtext), ""BELA" Ova kuca nema vlasnika !\n "PLAVA"ID kuce"BELA": %d \n "PLAVA"Cena kuce"BELA": %d \n "CRVENA"Da kupite ovu kucu \n kucajte /kupikucu", HouseInfo[id][hID], HouseInfo[id][hPrice]);
    HouseLabelArray[id] = Create3DTextLabel(house3dtext, -1, HouseInfo[id][hEnterX], HouseInfo[id][hEnterY], HouseInfo[id][hEnterZ], 20.0, HouseInfo[id][hVW]);
    return 1;
}

YCMD:deletehouse(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return 1;

    new hid;

    if(sscanf(params, "i", hid)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /deletehouse [id]");
    if(HouseInfo[hid][hOwned] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ova kuca ima vlasnika!");

    HouseInfo[hid][hOwned] = 0;
    HouseInfo[hid][hPrice] = 0;
    HouseInfo[hid][hOwner] = 0;
    HouseInfo[hid][hLocked] = 0;
    HouseInfo[hid][hEnterX] = 0;
    HouseInfo[hid][hEnterY] = 0;
    HouseInfo[hid][hEnterZ] = 0;
    HouseInfo[hid][hEnterA] = 0;
    HouseInfo[hid][hExitX] = 0;
    HouseInfo[hid][hExitY] = 0;
    HouseInfo[hid][hExitZ] = 0;
    HouseInfo[hid][hExitA] = 0;
    HouseInfo[hid][hInt] = 0;
    HouseInfo[hid][hVW] = 0;
    HouseInfo[hid][hInInt] = 0;
    HouseInfo[hid][hInVW] = 0;
    HouseInfo[hid][hID] = 0;
    HouseInfo[hid][hSlot1] = 0;
	HouseInfo[hid][hSlot1Ammo] = 0;
	HouseInfo[hid][hSlot2] = 0;
	HouseInfo[hid][hSlot2Ammo] = 0;
	HouseInfo[hid][hSlot3] = 0;
	HouseInfo[hid][hSlot3Ammo] = 0;
	HouseInfo[hid][hMats] = 0;
	HouseInfo[hid][hDrug] = 0;

   	DestroyPickup(HouseInfo[hid][hIcon]);
    Delete3DTextLabel(HouseLabelArray[hid]);
    new string[128];

    format(string, sizeof(string), HPATH, hid);
    fremove(string);
    return 1;
}

YCMD:h(playerid, params[], help)
{
	new command[32];
	if(sscanf(params, "s[32]", command))
	{
		SCM(playerid, BOJA_PLAVA, "KORISCENJE: /h(ouse) [komanda]");
		SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell, sellto, lock, stavioruzje, uzmioruzje, stavimaterijale, uzmimaterijale, stavidrogu, uzmidrogu");
	}
	else
	{
		if(strcmp(command, "buy", true) == 0)
		{
			new id = IsPlayerNearHouseEnter(playerid);
			new sendername[MAX_PLAYER_NAME];
			sendername = GetPlayerNameEx(playerid);

			if(id == -1 || id == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu kuce!");
			if(HouseInfo[id][hOwned] != 0 || HouseInfo[id][hPrice] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ova kuca nije na prodaju!");
			if(PlayerInfo[playerid][pHouseID] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate kucu!");
			if(GetPlayerMoney(playerid) < HouseInfo[id][hPrice]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite ovu kucu!");
			PlayerInfo[playerid][pHouseID] = id;
			PlayerInfo[playerid][pMoney] -= HouseInfo[id][hPrice];
			GivePlayerMoney(playerid, -HouseInfo[id][hPrice]);
			HouseInfo[id][hLocked] = 0;
			HouseInfo[id][hOwned] = 1;
			HouseInfo[id][hOwner] = sendername;
			DestroyPickup(HouseInfo[id][hIcon]);
			HouseInfo[id][hIcon] = CreatePickup(1272, 1, HouseInfo[id][hEnterX], HouseInfo[id][hEnterY], HouseInfo[id][hEnterZ], HouseInfo[id][hVW]);
			SCM(playerid, BOJA_ZELENA, "Kupili ste kucu.");
			new house3dtext[256];
			format(house3dtext, sizeof(house3dtext), ""BELA" Ova kuca ima vlasnika !\n "PLAVA"Vlasnik kuce"BELA": %s\n "PLAVA"ID Kuce"BELA": %d", HouseInfo[id][hOwner], HouseInfo[id][hID]);
			Update3DTextLabelText(HouseLabelArray[id], -1, house3dtext);
			SaveHouse(id);
			SavePlayer(playerid);
			return 1;
		}
		else if(strcmp(command, "sell", true) == 0)
		{
			new id = PlayerInfo[playerid][pHouseID];
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
			HouseInfo[id][hOwned] = 0;
			HouseInfo[id][hOwner] = 0;
			HouseInfo[id][hLocked] = 1;
			HouseInfo[id][hSlot1] = 9999;
			HouseInfo[id][hSlot1Ammo] = 0;
			HouseInfo[id][hSlot2] = 9999;
			HouseInfo[id][hSlot2Ammo] = 0;
			HouseInfo[id][hSlot3] = 9999;
			HouseInfo[id][hSlot3Ammo] = 0;
			HouseInfo[id][hMats] = 0;
			HouseInfo[id][hDrug] = 0;
			DestroyPickup(HouseInfo[id][hIcon]);
			HouseInfo[id][hIcon] = CreatePickup(1273, 1, HouseInfo[id][hEnterX], HouseInfo[id][hEnterY], HouseInfo[id][hEnterZ], HouseInfo[id][hVW]);
            PlayerInfo[playerid][pMoney] += HouseInfo[id][hPrice]/2;
		 	GivePlayerMoney(playerid, (HouseInfo[id][hPrice]/2));
			PlayerInfo[playerid][pHouseID] = 9999;
			SCM(playerid, BOJA_ZELENA, "Prodali ste kucu.");
			new house3dtext[256];
			format(house3dtext, sizeof(house3dtext), ""BELA" Ova kuca nema vlasnika !\n "PLAVA"Cena kuce"BELA": %d \n "CRVENA"Da kupite ovu kucu \n kucajte /kupikucu", HouseInfo[id][hPrice]);
			Update3DTextLabelText(HouseLabelArray[id], -1, house3dtext);
			SaveHouse(id);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "sellto"))
		{
			new id, target, price, Float:X, Float:Y, Float:Z,sendername[MAX_PLAYER_NAME], str[512];
			if(sscanf(params, "s[16]ii", command, target, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /h(ouse) sellto [id igraca/deo imena] [cena]");
			if(HouseSellOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste ponudili prodaju kuce!");
			GetPlayerPos(target, X, Y, Z);
			if(!IsPlayerInRangeOfPoint(target, 7.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
			id = IsPlayerNearHouseEnter(playerid);
			if(id != PlayerInfo[playerid][pHouseID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu vase kuce!");
			HouseSellOffer[playerid] = 1;
			HouseBuyOffer[target] = 1;
		 	HouseForOffer[target] = id;
			HousePlayerOffer[target] = playerid;
			HouseOfferPrice[target] = price;
			SetTimerEx("HouseStopOffer", 10000, false, "ii", playerid, target);
			format(str, sizeof(str), "\nIgrac "PLAVA"%s"BELA" Vam je ponudio da kupite kucu.\n"PLAVA"ID"BELA": %d\n"PLAVA"Trenutni vlasnik"BELA": %d\n "PLAVA"Cena"BELA": %d", sendername, HouseInfo[id][hID], HouseInfo[id][hOwner], HouseOfferPrice[playerid]);
			SPD(target, DIALOG_BUYHOUSE, DIALOG_STYLE_MSGBOX, ""PLAVA"KUPOVINA KUCE", str, "Kupi", "Odbij");
			sendername = GetPlayerNameEx(target);
			format(str, sizeof(str), "Ponudili ste igracu %s da kupi kucu.", sendername);
			SCM(playerid, BOJA_ZELENA, str);
			sendername = GetPlayerNameEx(playerid);
			format(str, sizeof(str), "Igrac %s Vam je ponudio da kupite kucu.", sendername);
			SCM(target, BOJA_ZELENA, str);
			return 1;
		}
		else if(strcmp(command, "lock", true) == 0)
		{
			new id = IsPlayerNearHouseEnter(playerid);
			if(id != PlayerInfo[playerid][pHouseID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ovo nije vasa kuca!");
			if(HouseInfo[id][hLocked] == 1)
			{
				HouseInfo[id][hLocked] = 0;
				GameTextForPlayer(playerid, "Kuca ~g~otkljucana!", 3000, 3);
			}
			else
			{
				HouseInfo[id][hLocked] = 1;
				GameTextForPlayer(playerid, "Kuca ~r~zakljucana!", 3000, 3);
			}
			return 1;
		}
		else if(!strfind(command, "stavidrogu"))
		{
			new ammount, currdrug, hid;
			currdrug = PlayerInfo[playerid][pDrug];
			hid = PlayerInfo[playerid][pHouseID];
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
			if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_CRVENA, "KORISCENJE: /h(ouse) [stavidrogu] [kolicina]");
			if(ammount > currdrug) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko droge!");
			HouseInfo[hid][hDrug] += ammount;
			PlayerInfo[playerid][pDrug] -= ammount;
			SCM(playerid, BOJA_ZELENA, "Stavili ste drogu u kucu.");
			SaveHouse(hid);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "uzmidrogu"))
		{
			new ammount, hid, housedrug;
			hid = PlayerInfo[playerid][pHouseID];
			housedrug = HouseInfo[hid][hDrug];
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
			if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /h(ouse) [uzmidrogu] [kolicina]");
			if(ammount > housedrug) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko droge u kuci!");
			HouseInfo[hid][hDrug] -= ammount;
			PlayerInfo[playerid][pDrug] += ammount;
			SCM(playerid, BOJA_ZELENA, "Uzeli ste drogu.");
			SaveHouse(hid);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "stavimaterijale"))
		{
			new ammount, currmats;
			currmats = PlayerInfo[playerid][pMats];
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
			new hid = PlayerInfo[playerid][pHouseID];
			if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /h(ouse) [stavimaterijale] [kolicina]");
			if(ammount > currmats) return SCM(playerid, BOJA_CRVENA, "GREKSA: Nemate toliko materijala!");
			HouseInfo[hid][hMats] += ammount;
			PlayerInfo[playerid][pMats] -= ammount;
			SCM(playerid, BOJA_ZELENA, "Stavili ste materijale u kucu.");
			SaveHouse(hid);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "uzmimaterijale"))
		{
			new ammount, hid, housemats;
			hid = PlayerInfo[playerid][pHouseID];
			housemats = HouseInfo[hid][hMats];
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
			if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /h(ouse) [uzmimaterijale] [kolicina]");
			if(ammount > housemats) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko materijala u kuci!");
			HouseInfo[hid][hMats] -= ammount;
			PlayerInfo[playerid][pMats] += ammount;
			SCM(playerid, BOJA_ZELENA, "Uzeli ste materijale.");
			SaveHouse(hid);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "uzmioruzje"))
		{
		    new ammo = 0, slot = 0;
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
			new hid = PlayerInfo[playerid][pHouseID];
			if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci!");
			if(sscanf(params, "s[16]ii", command, slot, ammo)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE:/uzmioruzje [slot] [metkovi]");
			if(slot < 1 || slot > 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan slot! (1 - 3)!");
   			new str[128];
			format(str, sizeof(str), "Command %d hid %d Slot: %d Ammo: %d House Ammo: %d", command, hid, slot, ammo, HouseInfo[hid][hSlot1Ammo]);
			SCM(playerid, BOJA_CRVENA, str);
			switch(slot)
			{
			    case 1:
			    {
			        if(ammo > HouseInfo[hid][hSlot1Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
			        if(ammo == HouseInfo[hid][hSlot1Ammo])
			        {
			        	GivePlayerWeapon(playerid, HouseInfo[hid][hSlot1], ammo);
			        	HouseInfo[hid][hSlot1] = 9999;
			            HouseInfo[hid][hSlot1Ammo] = 0;
			        	SaveHouse(hid);
					}
					else
					{
					    GivePlayerWeapon(playerid, HouseInfo[hid][hSlot1], ammo);
					    HouseInfo[hid][hSlot1Ammo] -= ammo;
					    SaveHouse(hid);
					}
		 		}
		 		case 2:
			    {
			        if(ammo > HouseInfo[hid][hSlot2Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
			        if(ammo == HouseInfo[hid][hSlot2Ammo])
			        {
			        	GivePlayerWeapon(playerid, HouseInfo[hid][hSlot2], ammo);
			        	HouseInfo[hid][hSlot2] = 9999;
			            HouseInfo[hid][hSlot2Ammo] = 0;
			        	SaveHouse(hid);
					}
					else
					{
					    GivePlayerWeapon(playerid, HouseInfo[hid][hSlot2], ammo);
					    HouseInfo[hid][hSlot2Ammo] -= ammo;
					    SaveHouse(hid);
					}
		 		}
		 		case 3:
			    {
			        if(ammo > HouseInfo[hid][hSlot3Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
			        if(ammo == HouseInfo[hid][hSlot3Ammo])
			        {
			        	GivePlayerWeapon(playerid, HouseInfo[hid][hSlot3], ammo);
			        	HouseInfo[hid][hSlot3] = 9999;
			            HouseInfo[hid][hSlot3Ammo] = 0;
			        	SaveHouse(hid);
					}
					else
					{
					    GivePlayerWeapon(playerid, HouseInfo[hid][hSlot3], ammo);
					    HouseInfo[hid][hSlot3Ammo] -= ammo;
					    SaveHouse(hid);
					}
		 		}
		 	}
		 	return 1;
		}
		else if(!strfind(command, "stavioruzje"))
		{
			new slot, ammo, plyWeapons[13][2], currweapon;
			currweapon = GetPlayerWeapon(playerid);
			if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu.");
			new hid = PlayerInfo[playerid][pHouseID];
			if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci.");
			if(!currweapon) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate oruzje!");
			if(sscanf(params, "s[16]ii", command, slot, ammo)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE:/h stavioruzje [slot] [metkovi]");
			if(slot < 1 || slot > 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan slot! (1 - 3)");

			new oldammo = GetPlayerAmmo(playerid);
		 	new currammo = GetPlayerAmmo(playerid)-ammo;

			if(ammo > oldammo) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
			switch(slot)
			{
			    case 1:
			    {
			        if(HouseInfo[hid][hSlot1] != 9999 && HouseInfo[hid][hSlot1] != currweapon) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");
					HouseInfo[hid][hSlot1] = currweapon;
					HouseInfo[hid][hSlot1Ammo] += ammo;

					for(new i = 0; i != 12; i++)
					{
					    new weapon, weaponammo;
						GetPlayerWeaponData(playerid, i, weapon, weaponammo);
						if(weapon != currweapon) GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
					}

					ResetPlayerWeapons(playerid);

					for(new i = 0; i <= 12; i++) GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
					if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
					SaveHouse(hid);
		 		}
		 		case 2:
			    {
       				if(HouseInfo[hid][hSlot2] != 9999 && HouseInfo[hid][hSlot2] != currweapon) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");
					HouseInfo[hid][hSlot2] = currweapon;
					HouseInfo[hid][hSlot2Ammo] += ammo;

					for(new i = 0; i <= 12; i++)
					{
					    new weapon, weaponammo;
						GetPlayerWeaponData(playerid, i, weapon, weaponammo);
						if(weapon != currweapon) GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
					}

					ResetPlayerWeapons(playerid);

					for(new i = 0; i <= 12; i++) GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
					if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
					SaveHouse(hid);
		 		}
		 		case 3:
			    {
       				if(HouseInfo[hid][hSlot3] != 9999 && HouseInfo[hid][hSlot3] != currweapon) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");
					HouseInfo[hid][hSlot3] = currweapon;
					HouseInfo[hid][hSlot3Ammo] += ammo;

					for(new i = 0; i <= 12; i++)
					{
					    new weapon, weaponammo;
						GetPlayerWeaponData(playerid, i, weapon, weaponammo);
						if(weapon != currweapon) GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
					}

					ResetPlayerWeapons(playerid);

					for(new i = 0; i <= 12; i++) GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
					if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
					SaveHouse(hid);
		 		}
		 	}
		 	return 1;
		}
		else
		{
		SCM(playerid, BOJA_PLAVA, "KORISCENJE: /h(ouse) [komanda]");
		SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell, sellto, lock, stavioruzje, uzmioruzje, stavimaterijale, uzmimaterijale, stavidrogu, uzmidrogu");
		}
	}
	return 1;
}

YCMD:makeapartment(playerid, params[], help)
{
	#pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
    new price, id, Int, VW, InInt;
    if(sscanf(params, "ii", price, InInt)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /makeapartment [cena] [interior]");
    for(new a = 1; a < sizeof(ApartmentInfo); a++)
    {
        if(ApartmentInfo[a][aPrice] == 0)
        {
            id = a;
            break;
        }
    }
    switch(InInt)
	{
	    case 0: // CJ House
		{
        	ApartmentInfo[id][aInInt] = 3;
			ApartmentInfo[id][aExitX] = 2496.05;
    		ApartmentInfo[id][aExitY] = -1692.73;
    		ApartmentInfo[id][aExitZ] = 1015.75;
		}
        case 1: // Safe House 1
		{
        	ApartmentInfo[id][aInInt] = 1;
			ApartmentInfo[id][aExitX] = 223.04;
    		ApartmentInfo[id][aExitY] = 1287.26;
    		ApartmentInfo[id][aExitZ] = 1083.2;
		}
		case 2: // Safe House 2
		{
		    ApartmentInfo[id][aInInt] = 4;
			ApartmentInfo[id][aExitX] = 260.98;
    		ApartmentInfo[id][aExitY] = 1284.55;
    		ApartmentInfo[id][aExitZ] = 1081.3;
		}
		case 3: // Safe House 3
		{
		    ApartmentInfo[id][aInInt] = 5;
			ApartmentInfo[id][aExitX] = 140.18;
    		ApartmentInfo[id][aExitY] = 1366.58;
    		ApartmentInfo[id][aExitZ] = 1084.97;
		}
		case 4: // Safe House 4
		{
		    ApartmentInfo[id][aInInt] = 9;
			ApartmentInfo[id][aExitX] = 82.95;
    		ApartmentInfo[id][aExitY] = 1322.44;
    		ApartmentInfo[id][aExitZ] = 1084.99;
		}
		case 7:  // Safe House 7
		{
		    ApartmentInfo[id][aInInt] = 8;
			ApartmentInfo[id][aExitX] = -42.85;
    		ApartmentInfo[id][aExitY] = 1405.61;
    		ApartmentInfo[id][aExitZ] = 1085.5;
		}
		case 8: // Safe House 8
		{
		    ApartmentInfo[id][aInInt] = 6;
			ApartmentInfo[id][aExitX] = -68.69;
    		ApartmentInfo[id][aExitY] = 1351.97;
    		ApartmentInfo[id][aExitZ] = 1081.28;
		}
		case 9: // Safe House 9
		{
		    ApartmentInfo[id][aInInt] = 6;
			ApartmentInfo[id][aExitX] = 2333.11;
    		ApartmentInfo[id][aExitY] = -1077.1;
    		ApartmentInfo[id][aExitZ] = 1050.04;
		}
		case 10: // Safe House 10
		{
		    ApartmentInfo[id][aInInt] = 5;
			ApartmentInfo[id][aExitX] = 2233.8;
    		ApartmentInfo[id][aExitY] = -1115.36;
    		ApartmentInfo[id][aExitZ] = 1051.91;
		}
		case 11: // Safe House 11
		{
		    ApartmentInfo[id][aInInt] = 8;
			ApartmentInfo[id][aExitX] = 2365.3;
    		ApartmentInfo[id][aExitY] = -1134.92;
    		ApartmentInfo[id][aExitZ] = 1051.91;
		}
		case 12: // Safe House 12
		{
		    ApartmentInfo[id][aInInt] = 11;
			ApartmentInfo[id][aExitX] = 2282.91;
    		ApartmentInfo[id][aExitY] = -1140.29;
    		ApartmentInfo[id][aExitZ] = 1051.91;
		}
  		case 13: // Safe House 13
		{
		    ApartmentInfo[id][aInInt] = 6;
			ApartmentInfo[id][aExitX] = 2196.79;
    		ApartmentInfo[id][aExitY] = -1204.35;
    		ApartmentInfo[id][aExitZ] = 1050.05;
		}
		case 14: // Safe House 14
		{
		    ApartmentInfo[id][aInInt] = 10;
			ApartmentInfo[id][aExitX] = 2270.39;
    		ApartmentInfo[id][aExitY] = -1210.45;
    		ApartmentInfo[id][aExitZ] = 1048.57;
		}
		case 15: // Safe House 15
		{
		    ApartmentInfo[id][aInInt] = 6;
			ApartmentInfo[id][aExitX] = 2308.79;
    		ApartmentInfo[id][aExitY] = -1212.88;
    		ApartmentInfo[id][aExitZ] = 1050.3;
		}
		case 16: // Safe House 16
		{
		    ApartmentInfo[id][aInInt] = 1;
			ApartmentInfo[id][aExitX] = 2217.54;
    		ApartmentInfo[id][aExitY] = -1076.29;
    		ApartmentInfo[id][aExitZ] = 1051.52;
		}
		case 17: // Safe House 17
		{
		    ApartmentInfo[id][aInInt] = 2;
			ApartmentInfo[id][aExitX] = 2237.59;
    		ApartmentInfo[id][aExitY] = -1080.97;
    		ApartmentInfo[id][aExitZ] = 1050.07;
		}
		case 18: // Safe House 18
		{
		    ApartmentInfo[id][aInInt] = 9;
			ApartmentInfo[id][aExitX] = 2317.82;
    		ApartmentInfo[id][aExitY] = -1026.75;
    		ApartmentInfo[id][aExitZ] = 1051.21;
		}
		case 19: // Budget Inn Motel Room
		{
		    ApartmentInfo[id][aInInt] = 12;
			ApartmentInfo[id][aExitX] = 447.52;
    		ApartmentInfo[id][aExitY] = 511.49;
    		ApartmentInfo[id][aExitZ] = 1001.42;
		}
		case 20: // Abandon House
		{
		    ApartmentInfo[id][aInInt] = 10;
			ApartmentInfo[id][aExitX] = 422.16;
    		ApartmentInfo[id][aExitY] = 2536.52;
    		ApartmentInfo[id][aExitZ] = 11.01;
		}

	}
    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, A);
    Int = GetPlayerInterior(playerid);
    VW = GetPlayerVirtualWorld(playerid);

    ApartmentInfo[id][aOwned] = 0;
    ApartmentInfo[id][aPrice] = price;
    ApartmentInfo[id][aEnterX] = X;
    ApartmentInfo[id][aEnterY] = Y;
    ApartmentInfo[id][aEnterZ] = Z;
    ApartmentInfo[id][aEnterA] = A;
    ApartmentInfo[id][aLocked] = 1;

    ApartmentInfo[id][aInt] = Int;
    ApartmentInfo[id][aVW] = VW;
    ApartmentInfo[id][aInVW] = id;
    ApartmentInfo[id][aID] = id;

	ApartmentInfo[id][aSlot1] = 9999;
	ApartmentInfo[id][aSlot1Ammo] = 0;
	ApartmentInfo[id][aSlot2] = 9999;
	ApartmentInfo[id][aSlot2Ammo] = 0;
	ApartmentInfo[id][aSlot3] = 9999;
	ApartmentInfo[id][aSlot3Ammo] = 0;
	ApartmentInfo[id][aMats] = 0;
	ApartmentInfo[id][aDrug] = 0;

    if(ApartmentInfo[id][aIcon]) DestroyPickup(ApartmentInfo[id][aIcon]);
    ApartmentInfo[id][aIcon] = CreatePickup(1273, 1, ApartmentInfo[id][aEnterX], ApartmentInfo[id][aEnterY], ApartmentInfo[id][aEnterZ], ApartmentInfo[id][aVW]);
	SaveApartment(id);

	new apartment3dtext[256];
	format(apartment3dtext, sizeof(apartment3dtext), ""BELA" Ovaj stan nema vlasnika vlasnika !\n "PLAVA"ID stana"BELA": %d \n "PLAVA"Cena stana"BELA": %d \n "PLAVA"Da kupite ovaj stan \n kucajte /buyapartment", ApartmentInfo[id][aID], ApartmentInfo[id][aPrice]);
    ApartmentLabelArray[id] = Create3DTextLabel(apartment3dtext, -1, ApartmentInfo[id][aEnterX], ApartmentInfo[id][aEnterY], ApartmentInfo[id][aEnterZ], 20.0, ApartmentInfo[id][aVW]);
    return 1;
}

YCMD:deleteapartment(playerid, params[], help)
{
    #pragma unused help
    if((PlayerInfo[playerid][pAdmin] < 6) || (PlayerInfo[playerid][pAdmin] == 9999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
    new aid;
    if(sscanf(params, "i", aid)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /deleteapartment [id]");
    if(ApartmentInfo[aid][aOwned] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: ovaj stan ima vlasnika!");

    ApartmentInfo[aid][aOwned] = 0;
    ApartmentInfo[aid][aPrice] = 0;
    ApartmentInfo[aid][aOwner] = 0;
    ApartmentInfo[aid][aLocked] = 0;
    ApartmentInfo[aid][aEnterX] = 0;
    ApartmentInfo[aid][aEnterY] = 0;
    ApartmentInfo[aid][aEnterZ] = 0;
    ApartmentInfo[aid][aEnterA] = 0;
    ApartmentInfo[aid][aExitX] = 0;
    ApartmentInfo[aid][aExitY] = 0;
    ApartmentInfo[aid][aExitZ] = 0;
    ApartmentInfo[aid][aExitA] = 0;
    ApartmentInfo[aid][aInt] = 0;
    ApartmentInfo[aid][aVW] = 0;
    ApartmentInfo[aid][aInInt] = 0;
    ApartmentInfo[aid][aInVW] = 0;
    ApartmentInfo[aid][aID] = 0;
    ApartmentInfo[aid][aSlot1] = 0;
	ApartmentInfo[aid][aSlot1Ammo] = 0;
	ApartmentInfo[aid][aSlot2] = 0;
	ApartmentInfo[aid][aSlot2Ammo] = 0;
	ApartmentInfo[aid][aSlot3] = 0;
	ApartmentInfo[aid][aSlot3Ammo] = 0;
	ApartmentInfo[aid][aMats] = 0;
	ApartmentInfo[aid][aDrug] = 0;

   	DestroyPickup(ApartmentInfo[aid][aIcon]);
    Delete3DTextLabel(ApartmentLabelArray[aid]);
    new str[128];

    format(str, sizeof(str), APATH, aid);
    fremove(str);
    return 1;
}

YCMD:a(playerid, params[], help)
{
	#pragma unused help
	new command[16];
	if(sscanf(params, "s[16]", command))
	{
		SCM(playerid, BOJA_PLAVA, "KORISCENJE: /a(partment) [komanda]");
		SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell, lock, putgun, takegun, putmats, takemats, putdrug, takedrug");
	}
	else
	{
		if(strcmp(command, "buy", true) == 0)
		{
			new id = IsPlayerNearApartmentEnter(playerid);
			new sendername[MAX_PLAYER_NAME];
			sendername = GetPlayerNameEx(playerid);
			if(id == -1 || id == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu stana!");
			if(ApartmentInfo[id][aOwned] != 0 || ApartmentInfo[id][aPrice] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ovaj stan nije na prodaju!");
			if(PlayerInfo[playerid][pApartmentID] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate stan!");
			if(GetPlayerMoney(playerid) < ApartmentInfo[id][aPrice]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite ovaj stan!");
			PlayerInfo[playerid][pApartmentID] = id;
			PlayerInfo[playerid][pMoney] -= ApartmentInfo[id][aPrice];
			GivePlayerMoney(playerid, -ApartmentInfo[id][aPrice]);
			ApartmentInfo[id][aLocked] = 0;
			ApartmentInfo[id][aOwned] = 1;
			ApartmentInfo[id][aOwner] = sendername;
			DestroyPickup(ApartmentInfo[id][aIcon]);
			ApartmentInfo[id][aIcon] = CreatePickup(1272, 1, ApartmentInfo[id][aEnterX], ApartmentInfo[id][aEnterY], ApartmentInfo[id][aEnterZ], ApartmentInfo[id][aVW]);
			SCM(playerid, BOJA_ZELENA, "Kupili ste stan.");
			new apartment3dtext[256];
			format(apartment3dtext, sizeof(apartment3dtext), ""BELA" Ovaj stan ima vlasnika !\n "PLAVA"Vlasnik stana"BELA": %s\n "PLAVA"ID stana"BELA": %d", ApartmentInfo[id][aOwner], ApartmentInfo[id][aID]);
			Update3DTextLabelText(ApartmentLabelArray[id], -1, apartment3dtext);
			SaveApartment(id);
			SavePlayer(playerid);
			return 1;
		}
		else if(strcmp(command, "sell", true) == 0)
		{
			if(PlayerInfo[playerid][pApartmentID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate stan!");
			new id = PlayerInfo[playerid][pApartmentID];
			ApartmentInfo[id][aOwned] = 0;
			ApartmentInfo[id][aOwner] = 0;
			ApartmentInfo[id][aLocked] = 1;
			ApartmentInfo[id][aSlot1] = 0;
			ApartmentInfo[id][aSlot1Ammo] = 0;
			ApartmentInfo[id][aSlot2] = 0;
			ApartmentInfo[id][aSlot2Ammo] = 0;
			ApartmentInfo[id][aSlot3] = 0;
			ApartmentInfo[id][aSlot3Ammo] = 0;
			ApartmentInfo[id][aMats] = 0;
			ApartmentInfo[id][aDrug] = 0;
			DestroyPickup(ApartmentInfo[id][aIcon]);
			ApartmentInfo[id][aIcon] = CreatePickup(1273, 1, ApartmentInfo[id][aEnterX], ApartmentInfo[id][aEnterY], ApartmentInfo[id][aEnterZ], ApartmentInfo[id][aVW]);
            PlayerInfo[playerid][pMoney] += ApartmentInfo[id][aPrice]/2;
   			GivePlayerMoney(playerid, (ApartmentInfo[id][aPrice]/2));
			PlayerInfo[playerid][pApartmentID] = 9999;
			SCM(playerid, BOJA_ZELENA, "Prodali ste stan!");
			new apartment3dtext[256];
			format(apartment3dtext, sizeof(apartment3dtext), ""BELA" Ovaj stan nema vlasnika !\n "PLAVA"Cena stan"BELA": %d \n "PLAVA"Da kupite ovaj stan \n kucajte /buyapartment", ApartmentInfo[id][aPrice]);
			Update3DTextLabelText(ApartmentLabelArray[id], -1, apartment3dtext);
			SaveApartment(id);
			SavePlayer(playerid);
			return 1;
		}
		else if(strcmp(command, "lock", true) == 0)
		{
			new id = IsPlayerNearApartmentEnter(playerid);
			if(id != PlayerInfo[playerid][pApartmentID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ovo nije vas stan!");
			if(ApartmentInfo[id][aLocked] == 1)
			{
				ApartmentInfo[id][aLocked] = 0;
				GameTextForPlayer(playerid, "Stan ~g~otkljucan!", 3000, 3);
			}
			else
			{
				ApartmentInfo[id][aLocked] = 1;
				GameTextForPlayer(playerid, "Stan ~r~zakljucan!", 3000, 3);
			}
			return 1;
		}
		else if(!strfind(command, "putdrug"))
		{
			new ammount;
			new currdrug = PlayerInfo[playerid][pDrug];
			if(PlayerInfo[playerid][pApartmentID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate stan!");
			new aid = PlayerInfo[playerid][pApartmentID];
			if(!IsPlayerInRangeOfPoint(playerid, 15, ApartmentInfo[aid][aExitX], ApartmentInfo[aid][aExitY], ApartmentInfo[aid][aExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojom stanu!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_CRVENA, "KORISCENJE: /a(apartment) [putdrug] [kolicina]");
			if(ammount > currdrug) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko droge!");
			ApartmentInfo[aid][aDrug] += ammount;
			PlayerInfo[playerid][pDrug] -= ammount;
			SCM(playerid, BOJA_ZELENA, "Stavili ste drogu u stan.");
			SaveApartment(aid);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "takedrug"))
		{
			new ammount;
			if(PlayerInfo[playerid][pApartmentID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate stan!");
			new aid = PlayerInfo[playerid][pApartmentID];
			new apartmentdrug = ApartmentInfo[aid][aDrug];
			if(!IsPlayerInRangeOfPoint(playerid, 15, ApartmentInfo[aid][aExitX], ApartmentInfo[aid][aExitY], ApartmentInfo[aid][aExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojom stanu!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /a(partment) [takedrug] [kolicina]");
			if(ammount > apartmentdrug) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko droge u stanu!");
			ApartmentInfo[aid][aDrug] -= ammount;
			PlayerInfo[playerid][pDrug] += ammount;
			SCM(playerid, BOJA_ZELENA, "Uzeli ste drogu.");
			SaveApartment(aid);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "putmats"))
		{
			new ammount;
			new currmats = PlayerInfo[playerid][pMats];
			if(PlayerInfo[playerid][pApartmentID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate stan!");
			new aid = PlayerInfo[playerid][pApartmentID];
			if(!IsPlayerInRangeOfPoint(playerid, 15, ApartmentInfo[aid][aExitX], ApartmentInfo[aid][aExitY], ApartmentInfo[aid][aExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svom stanu!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /putmats [kolicina]");
			if(ammount > currmats) return SCM(playerid, BOJA_CRVENA, "GREKSA: Nemate toliko materijala!");
			ApartmentInfo[aid][aMats] += ammount;
			PlayerInfo[playerid][pMats] -= ammount;
			SCM(playerid, BOJA_ZELENA, "Stavili ste materijale u stan.");
			SaveApartment(aid);
			SavePlayer(playerid);
			return 1;
		}
		else if(!strfind(command, "takemats"))
		{
		    new ammount;
			if(PlayerInfo[playerid][pApartmentID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate stan!");
			new aid = PlayerInfo[playerid][pApartmentID];
			new apartmentmats = ApartmentInfo[aid][aMats];
			if(!IsPlayerInRangeOfPoint(playerid, 15, ApartmentInfo[aid][aExitX], ApartmentInfo[aid][aExitY], ApartmentInfo[aid][aExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svom stanu!");
			if(sscanf(params, "s[16]i", command, ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /takemats [kolicina]");
			if(ammount > apartmentmats) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko materijala u stanu!");
			ApartmentInfo[aid][aMats] -= ammount;
			PlayerInfo[playerid][pMats] += ammount;
			SCM(playerid, BOJA_ZELENA, "Uzeli ste materijale.");
			SaveApartment(aid);
			SavePlayer(playerid);
			return 1;
		}
		else
		{
		    SCM(playerid, BOJA_PLAVA, "KORISCENJE: /a(partment) [komanda]");
			SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell, lock, putgun, takegun, putmats, takemats, putdrug, takedrug");
		}
	}
	return 1;
}
//---------------------------------------------------------------------------- > VEHICLES
YCMD:v(playerid, params[], help)
{
	new command[16];
	if(sscanf(params, "s[16]", command))
	{
		SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [komanda]");
		SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell[1-3], sellto, park[1-3], lock[1-3], find[1-3], color[1-3], paintjob[1-3], save[1-3], menu");
	}
	else
	{
		if(strcmp(command, "buy", true) == 0)
		{
            new sendername[MAX_PLAYER_NAME];
			sendername = GetPlayerNameEx(playerid);
			new vID = GetPlayerVehicleID(playerid);
			new vMDL = GetVehicleModel(vID);
			new vehicle = 1;
			if(!IsASalesVehicle(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ovo vozilo nije na prodaju!");
			if((vID == 411 || vID == 415 || vID == 451 || vID == 495 || vID == 522 || vID == 541) && PlayerInfo[playerid][pDonator] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete kupiti ovo vozilo! Niste donator!");
			if(PlayerInfo[playerid][pVehicle1] != 9999 && PlayerInfo[playerid][pVehicle2] != 9999 && PlayerInfo[playerid][pVehicle3] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete kupiti vise vozila!");
			if(GetPlayerMoney(playerid) < GetVehiclePrice(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da bi kupili ovo vozilo!");

			for(new v = 1; v < sizeof(VehicleInfo); v++)
			{
				if(VehicleInfo[v][vOwned] == 0 || VehicleInfo[v][vOwned] == 9999)
				{
					vehicle = v;
					break;
				}
			}

			if(PlayerInfo[playerid][pVehicle1] == 9999)
			{
				PlayerInfo[playerid][pVehicle1] = vMDL;
				PlayerInfo[playerid][pVehicle1ControlID] = vehicle;
			}
			else if(PlayerInfo[playerid][pVehicle2] == 9999)
			{
				PlayerInfo[playerid][pVehicle2] = vMDL;
				PlayerInfo[playerid][pVehicle2ControlID] = vehicle;

			}
			else if(PlayerInfo[playerid][pVehicle3] == 9999)
			{
				PlayerInfo[playerid][pVehicle3] = vMDL;
				PlayerInfo[playerid][pVehicle3ControlID] = vehicle;
			}
			else { return 1;}

			new model[64];
			GetVehicleName(vMDL, model, sizeof(model));

			new spawn;
			spawn = random(sizeof(VehicleSpawns));

			VehicleInfo[vehicle][vOwned] = 1;
			strmid(VehicleInfo[vehicle][vOwner], sendername, 0, strlen(sendername), 999);
			VehicleInfo[vehicle][vModel] = vMDL;
			VehicleInfo[vehicle][vParkX] = VehicleSpawns[spawn][0];
			VehicleInfo[vehicle][vParkY] = VehicleSpawns[spawn][1];
			VehicleInfo[vehicle][vParkZ] = VehicleSpawns[spawn][2];
			VehicleInfo[vehicle][vParkA] = VehicleSpawns[spawn][3];
			VehicleInfo[vehicle][vColor1] = 1;
			VehicleInfo[vehicle][vColor2] = 1;
			VehicleInfo[vehicle][vPaintjob] = 9999;
			VehicleInfo[vehicle][vLocked] = 1;
			VehicleInfo[vehicle][vRegistration] = 0;
			VehicleInfo[vehicle][vControlID] = vehicle;
			SaveVehicle(vehicle);
			DestroyVehicle(vehicle);
			OwnedVehicle[vehicle] = CreateVehicle(vMDL, VehicleInfo[vehicle][vParkX], VehicleInfo[vehicle][vParkY], VehicleInfo[vehicle][vParkZ], VehicleInfo[vehicle][vParkA], VehicleInfo[vehicle][vColor1], VehicleInfo[vehicle][vColor2], -1);
			SCM(playerid, BOJA_ZELENA, "Kupili ste vozilo. Vozilo je na parkingu, preuzmite ga.");
            PlayerInfo[playerid][pMoney] -= GetVehiclePrice(vID);
			GivePlayerMoney(playerid, -GetVehiclePrice(vID));
			SavePlayer(playerid);
		}
  		else if(strcmp(command, "sell1", true) == 0)
		{
            new vID;
			if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			PlayerInfo[playerid][pVehicle1] = 9999;
			PlayerInfo[playerid][pVehicle1ControlID] = 9999;
			VehicleInfo[vID][vOwned] = 9999;
			VehicleInfo[vID][vOwner] = 0;
			VehicleInfo[vID][vParkX] = 1590.3740;
			VehicleInfo[vID][vParkY] = -1026.0565;
			VehicleInfo[vID][vParkZ] = 23.9063;
			VehicleInfo[vID][vParkA] = 317.1649;
			VehicleInfo[vID][vLocked] = 0;
			VehicleInfo[vID][vRegistration] = 0;
			VehicleInfo[vID][vControlID] = vID;
			VehicleInfo[vID][vSpoiler] = 0;
			VehicleInfo[vID][vHood] = 0;
			VehicleInfo[vID][vRoof] = 0;
			VehicleInfo[vID][vSideskirt] = 0;
			VehicleInfo[vID][vLamps] = 0;
			VehicleInfo[vID][vNitro] = 0;
			VehicleInfo[vID][vExhaust] = 0;
			VehicleInfo[vID][vWheels] = 0;
			VehicleInfo[vID][vStereo] = 0;
			VehicleInfo[vID][vHydraulics] = 0;
			VehicleInfo[vID][vFront_bumper] = 0;
			VehicleInfo[vID][vRear_bumper] = 0;
			VehicleInfo[vID][vVent_right] = 0;
			VehicleInfo[vID][vVent_left] = 0;
			vEngine[vID] = 0;
			SaveVehicle(vID);
			RemovePlayerFromVehicle(playerid);
			DestroyVehicle(vID);
			CreateVehicle(400, -1000, 4000, 1, 0, 1, 1, -1);
			TogglePlayerControllable(playerid, 1);
			SavePlayer(playerid);
			SCM(playerid, BOJA_ZELENA, "Prodali ste vase vozilo.");
			SavePlayer(playerid);
		}
		else if(strcmp(command, "sell2", true) == 0)
		{
            new vID;
            if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			PlayerInfo[playerid][pVehicle2] = 9999;
			PlayerInfo[playerid][pVehicle2ControlID] = 9999;
			VehicleInfo[vID][vOwned] = 9999;
			VehicleInfo[vID][vOwner] = 0;
			VehicleInfo[vID][vParkX] = 1590.3740;
			VehicleInfo[vID][vParkY] = -1026.0565;
			VehicleInfo[vID][vParkZ] = 23.9063;
			VehicleInfo[vID][vParkA] = 317.1649;
			VehicleInfo[vID][vLocked] = 0;
			VehicleInfo[vID][vRegistration] = 0;
			VehicleInfo[vID][vControlID] = 0;
			VehicleInfo[vID][vSpoiler] = 0;
			VehicleInfo[vID][vHood] = 0;
			VehicleInfo[vID][vRoof] = 0;
			VehicleInfo[vID][vSideskirt] = 0;
			VehicleInfo[vID][vLamps] = 0;
			VehicleInfo[vID][vNitro] = 0;
			VehicleInfo[vID][vExhaust] = 0;
			VehicleInfo[vID][vWheels] = 0;
			VehicleInfo[vID][vStereo] = 0;
			VehicleInfo[vID][vHydraulics] = 0;
			VehicleInfo[vID][vFront_bumper] = 0;
			VehicleInfo[vID][vRear_bumper] = 0;
			VehicleInfo[vID][vVent_right] = 0;
			VehicleInfo[vID][vVent_left] = 0;
			vEngine[vID] = 0;
			SaveVehicle(vID);
			RemovePlayerFromVehicle(playerid);
			DestroyVehicle(vID);
			CreateVehicle(400, -1000, 4000, 1, 0, 1, 1, -1);
			TogglePlayerControllable(playerid, 1);
			SCM(playerid, BOJA_ZELENA, "Prodali ste vase vozilo.");
			SavePlayer(playerid);
		}
		else if(strcmp(command, "sell3", true) == 0)
		{
            new vID;
			if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			PlayerInfo[playerid][pVehicle3] = 9999;
			PlayerInfo[playerid][pVehicle3ControlID] = 9999;
			VehicleInfo[vID][vOwned] = 9999;
			VehicleInfo[vID][vOwner] = 0;
			VehicleInfo[vID][vParkX] = 1590.3740;
			VehicleInfo[vID][vParkY] = -1026.0565;
			VehicleInfo[vID][vParkZ] = 23.9063;
			VehicleInfo[vID][vParkA] = 317.1649;
			VehicleInfo[vID][vLocked] = 0;
			VehicleInfo[vID][vRegistration] = 0;
			VehicleInfo[vID][vControlID] = 0;
			VehicleInfo[vID][vSpoiler] = 0;
			VehicleInfo[vID][vHood] = 0;
			VehicleInfo[vID][vRoof] = 0;
			VehicleInfo[vID][vSideskirt] = 0;
			VehicleInfo[vID][vLamps] = 0;
			VehicleInfo[vID][vNitro] = 0;
			VehicleInfo[vID][vExhaust] = 0;
			VehicleInfo[vID][vWheels] = 0;
			VehicleInfo[vID][vStereo] = 0;
			VehicleInfo[vID][vHydraulics] = 0;
			VehicleInfo[vID][vFront_bumper] = 0;
			VehicleInfo[vID][vRear_bumper] = 0;
			VehicleInfo[vID][vVent_right] = 0;
			VehicleInfo[vID][vVent_left] = 0;
			vEngine[vID] = 0;
			SaveVehicle(vID);
			RemovePlayerFromVehicle(playerid);
			DestroyVehicle(vID);
			CreateVehicle(400, -1000, 4000, 1, 0, 1, 1, -1);
			TogglePlayerControllable(playerid, 1);
			SCM(playerid, BOJA_ZELENA, "Prodali ste vase vozilo.");
			SavePlayer(playerid);
		}
		else if(!strfind(command, "sellto"))
		{
	 		new sendername[MAX_PLAYER_NAME], vID, target, price, vehicle[32], Float:X, Float:Y, Float:Z, str[512];
			if(sscanf(params, "s[16]ii", command, target, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /sellto [id igraca/deo imena] [cena]");
			if(VehicleSellOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste ponudili prodaju vozila!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			GetVehiclePos(vID, X, Y, Z);
			GetVehicleName(vID, vehicle, sizeof(vehicle));
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID] && VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID] && VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svom vozilu!");
			if(!IsPlayerInRangeOfPoint(target, 7.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");
			VehicleSellOffer[playerid] = 1;
			VehicleBuyOffer[target] = 1;
		 	VehicleForOffer[target] = vID;
			VehiclePlayerOffer[target] = playerid;
			VehicleOfferPrice[target] = price;
			SetTimerEx("VehicleStopOffer", 10000, false, "ii", playerid, target);
			format(str, sizeof(str), "\n"PLAVA"Vozilo"BELA": %s\n "PLAVA"Trenutni vlasnik"BELA": %s\n "PLAVA"Cena"BELA": %d\n "PLAVA"Registrovan"BELA": %s\n", vehicle, VehicleInfo[vID][vOwner], price, GetVehicleRegistration(vID));
			SPD(target, DIALOG_BUYVEH, DIALOG_STYLE_MSGBOX, ""PLAVA"KUPOVINA VOZILA", str, "Kupi", "Odbij");
			sendername = GetPlayerNameEx(target);
			format(str, sizeof(str), "Ponudili ste igracu %s da kupi vase vozilo.", sendername);
			SCM(playerid, BOJA_ZELENA, str);
			sendername = GetPlayerNameEx(playerid);
			format(str, sizeof(str), "Igrac %s Vam je ponudio da kupite njegovo vozilo.", sendername);
			SCM(target, BOJA_ZELENA, str);
		}
		else if(strcmp(command, "park1", true) == 0)
		{
			new vID, vMDL, Float:X, Float:Y, Float:Z, Float:A;
			if(PlayerInfo[playerid][pVehicle1] == 9999 && PlayerInfo[playerid][pVehicle2] == 9999 && PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo!");
            if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			vMDL = GetVehicleModel(vID);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			GetVehiclePos(vID, X, Y, Z);
			GetVehicleZAngle(vID, A);
			VehicleInfo[vID][vParkX] = X;
			VehicleInfo[vID][vParkY] = Y;
			VehicleInfo[vID][vParkZ] = Z;
			VehicleInfo[vID][vParkA] = A;
			vEngine[vID] = 0;
			RemovePlayerFromVehicle(playerid);
			DestroyVehicle(vID);
			OwnedVehicle[vID] = CreateVehicle(vMDL, VehicleInfo[vID][vParkX], VehicleInfo[vID][vParkY], VehicleInfo[vID][vParkZ], VehicleInfo[vID][vParkA], VehicleInfo[vID][vColor1], VehicleInfo[vID][vColor2], -1);
			SetVehicleComponents(vID);
			TogglePlayerControllable(playerid, 1);
			SCM(playerid, BOJA_ZELENA, "Parkirali ste vase vozilo.");
			SaveVehicle(vID);
		}
		else if(strcmp(command, "park2", true) == 0)
		{
			new vID, vMDL, Float:X, Float:Y, Float:Z, Float:A;
			if(PlayerInfo[playerid][pVehicle1] == 9999 && PlayerInfo[playerid][pVehicle2] == 9999 && PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo!");
			if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			vMDL = GetVehicleModel(vID);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			GetVehiclePos(vID, X, Y, Z);
			GetVehicleZAngle(vID, A);
			VehicleInfo[vID][vParkX] = X;
			VehicleInfo[vID][vParkY] = Y;
			VehicleInfo[vID][vParkZ] = Z;
			VehicleInfo[vID][vParkA] = A;
			vEngine[vID] = 0;
			RemovePlayerFromVehicle(playerid);
			DestroyVehicle(vID);
			OwnedVehicle[vID] = CreateVehicle(vMDL, VehicleInfo[vID][vParkX], VehicleInfo[vID][vParkY], VehicleInfo[vID][vParkZ], VehicleInfo[vID][vParkA], VehicleInfo[vID][vColor1], VehicleInfo[vID][vColor2], -1);
			SetVehicleComponents(vID);
			TogglePlayerControllable(playerid, 1);
			SCM(playerid, BOJA_ZELENA, "Parkirali ste vase vozilo.");
			SaveVehicle(vID);
		}
		else if(strcmp(command, "park3", true) == 0)
		{
			new vID, vMDL, Float:X, Float:Y, Float:Z, Float:A;
			if(PlayerInfo[playerid][pVehicle1] == 9999 && PlayerInfo[playerid][pVehicle2] == 9999 && PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo!");
            if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			vMDL = GetVehicleModel(vID);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			GetVehiclePos(vID, X, Y, Z);
			GetVehicleZAngle(vID, A);
			VehicleInfo[vID][vParkX] = X;
			VehicleInfo[vID][vParkY] = Y;
			VehicleInfo[vID][vParkZ] = Z;
			VehicleInfo[vID][vParkA] = A;
			vEngine[vID] = 0;
			RemovePlayerFromVehicle(playerid);
			DestroyVehicle(vID);
			OwnedVehicle[vID] = CreateVehicle(vMDL, VehicleInfo[vID][vParkX], VehicleInfo[vID][vParkY], VehicleInfo[vID][vParkZ], VehicleInfo[vID][vParkA], VehicleInfo[vID][vColor1], VehicleInfo[vID][vColor2], -1);
			SetVehicleComponents(vID);
			TogglePlayerControllable(playerid, 1);
			SCM(playerid, BOJA_ZELENA, "Parkirali ste vase vozilo.");
			SaveVehicle(vID);
		}
		else if(strcmp(command, "lock1", true) == 0)
		{
		    new Float:VX, Float:VY, Float:VZ;
		    if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
 	        new vehicle = PlayerInfo[playerid][pVehicle1ControlID];
		 	GetVehiclePos(vehicle, VX, VY, VZ);
 		 	if(IsPlayerInRangeOfPoint(playerid, 50.0, VX, VY, VZ))
			{
			   	if(VehicleInfo[vehicle][vLocked] == 1)
			   	{
				   	SetVehicleParamsForPlayer(vehicle, playerid, 0, 0);
			   		GameTextForPlayer(playerid, "~g~Vozilo otkljucano!", 2000, 3);
			   		VehicleInfo[vehicle][vLocked] = 0;
			   		SaveVehicle(vehicle);
			   		return 1;
			   	}
			   	else
			   	{
  		    		SetVehicleParamsForPlayer(playerid, playerid, 0, 1);
			       	GameTextForPlayer(playerid, "~r~Vozilo zakljucano!", 2000, 3);
			       	VehicleInfo[vehicle][vLocked] = 1;
			       	SaveVehicle(vehicle);
			   	}
			}
			else SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu svog vozila!");
		}
		else if(strcmp(command, "lock2", true) == 0)
		{
		    new Float:VX, Float:VY, Float:VZ;
		    if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
 	        new vehicle = PlayerInfo[playerid][pVehicle2ControlID];
		 	GetVehiclePos(vehicle, VX, VY, VZ);
 		 	if(IsPlayerInRangeOfPoint(playerid, 50.0, VX, VY, VZ))
			{
			   	if(VehicleInfo[vehicle][vLocked] == 1)
			   	{
				   	SetVehicleParamsForPlayer(vehicle, playerid, 0, 0);
			   		GameTextForPlayer(playerid, "~g~Vozilo otkljucano!", 2000, 3);
			   		VehicleInfo[vehicle][vLocked] = 0;
			   		SaveVehicle(vehicle);
			   		return 1;
			   	}
			   	else
			   	{
  		    		SetVehicleParamsForPlayer(playerid, playerid, 0, 1);
			       	GameTextForPlayer(playerid, "~r~Vozilo zakljucano!", 2000, 3);
			       	VehicleInfo[vehicle][vLocked] = 1;
			       	SaveVehicle(vehicle);
			   	}
			}
			else SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu svog vozila!");
		}
		else if(strcmp(command, "lock3", true) == 0)
		{
		    new Float:VX, Float:VY, Float:VZ;
		    if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
 	        new vehicle = PlayerInfo[playerid][pVehicle3ControlID];
		 	GetVehiclePos(vehicle, VX, VY, VZ);
 		 	if(IsPlayerInRangeOfPoint(playerid, 50.0, VX, VY, VZ))
			{
			   	if(VehicleInfo[vehicle][vLocked] == 1)
			   	{
				   	SetVehicleParamsForPlayer(vehicle, playerid, 0, 0);
			   		GameTextForPlayer(playerid, "~g~Vozilo otkljucano!", 2000, 3);
			   		VehicleInfo[vehicle][vLocked] = 0;
			   		SaveVehicle(vehicle);
			   		return 1;
			   	}
			   	else
			   	{
  		    		SetVehicleParamsForPlayer(playerid, playerid, 0, 1);
			       	GameTextForPlayer(playerid, "~r~Vozilo zakljucano!", 2000, 3);
			       	VehicleInfo[vehicle][vLocked] = 1;
			       	SaveVehicle(vehicle);
			   	}
			}
			else SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu svog vozila!");
		}
		else if(strcmp(command, "find1", true) == 0)
		{
		    if(PlayerOnTutorial[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na tutorijalu ste!");
		    if(OnATruckMission[playerid] != 9999 || DetectiveSearchingOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na poslu ste!");
		    if(PlayerInfo[playerid][pVehicle1] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na prvom slotu!");
		    new Float:X, Float:Y, Float:Z;
   			new vehicle = PlayerInfo[playerid][pVehicle1ControlID];
   			GetVehiclePos(vehicle, X, Y, Z);
   			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
   			vSearching[playerid] = 1;
   			SCM(playerid, BOJA_ZELENA, "Vase vozilo je oznaceno na mapi.");
		}
		else if(strcmp(command, "find2", true) == 0)
		{
		    if(PlayerOnTutorial[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na tutorijalu ste!");
		    if(OnATruckMission[playerid] != 9999 || DetectiveSearchingOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na poslu ste!");
		    if(PlayerInfo[playerid][pVehicle2] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na drugom slotu!");
		    new Float:X, Float:Y, Float:Z;
   			new vehicle = PlayerInfo[playerid][pVehicle2ControlID];
   			GetVehiclePos(vehicle, X, Y, Z);
   			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
   			vSearching[playerid] = 1;
   			SCM(playerid, BOJA_ZELENA, "Vase vozilo je oznaceno na mapi.");
		}
		else if(strcmp(command, "find3", true) == 0)
		{
		    if(PlayerOnTutorial[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na tutorijalu ste!");
		    if(OnATruckMission[playerid] != 9999 || DetectiveSearchingOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na poslu ste!");
		    if(PlayerInfo[playerid][pVehicle3] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate vozilo na trecem slotu!");
		    new Float:X, Float:Y, Float:Z;
   			new vehicle = PlayerInfo[playerid][pVehicle3ControlID];
   			GetVehiclePos(vehicle, X, Y, Z);
   			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
   			vSearching[playerid] = 1;
   			SCM(playerid, BOJA_ZELENA, "Vase vozilo je oznaceno na mapi.");
		}
		else if(!strfind(command, "color1"))
		{
	 		new color1, color2;
			if(sscanf(params, "s[16]ii", command, color1, color2)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [color] [boja 1] [boja 2]");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			if(GetPlayerMoney(playerid) < 2500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($2500)");
            PlayerInfo[playerid][pMoney] -= 2500;
   			GivePlayerMoney(playerid, -2500);
			SavePlayer(playerid);
			ChangeVehicleColor(vID, color1, color2);
			VehicleInfo[vID][vColor1] = color1;
			VehicleInfo[vID][vColor2] = color2;
			SaveVehicle(vID);
			SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");
		}
		else if(!strfind(command, "color2"))
		{
	 		new color1, color2;
			if(sscanf(params, "s[16]ii", command, color1, color2)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [color] [boja 1] [boja 2]");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			if(GetPlayerMoney(playerid) < 2500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($2500)");
            PlayerInfo[playerid][pMoney] -= 2500;
		 	GivePlayerMoney(playerid, -2500);
			SavePlayer(playerid);
			ChangeVehicleColor(vID, color1, color2);
			VehicleInfo[vID][vColor1] = color1;
			VehicleInfo[vID][vColor2] = color2;
			SaveVehicle(vID);
			SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");
		}
		else if(!strfind(command, "color3"))
		{
	 		new color1, color2;
			if(sscanf(params, "s[16]ii", command, color1, color2)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [color] [boja 1] [boja 2]");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			if(GetPlayerMoney(playerid) < 2500) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($2500)");
            PlayerInfo[playerid][pMoney] -= 2500;
   			GivePlayerMoney(playerid, -2500);
			SavePlayer(playerid);
			ChangeVehicleColor(vID, color1, color2);
			VehicleInfo[vID][vColor1] = color1;
			VehicleInfo[vID][vColor2] = color2;
			SaveVehicle(vID);
			SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");
		}
		else if(!strfind(command, "paintjob1"))
		{
	 		new paintjob;
			if(sscanf(params, "s[16]ii", command, paintjob)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [paintjob] [paintjob id]");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			if(GetPlayerMoney(playerid) < 5000) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($5000)");
            PlayerInfo[playerid][pMoney] -= 5000;
   			GivePlayerMoney(playerid, -5000);
			SavePlayer(playerid);
			ChangeVehiclePaintjob(vID, paintjob);
			VehicleInfo[vID][vPaintjob] = paintjob;
			SaveVehicle(vID);
			SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");

		}
		else if(!strfind(command, "paintjob2"))
		{
	 		new paintjob;
			if(sscanf(params, "s[16]ii", command, paintjob)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [paintjob] [paintjob id]");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			if(GetPlayerMoney(playerid) < 5000) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($5000)");
            PlayerInfo[playerid][pMoney] -= 5000;
			GivePlayerMoney(playerid, -5000);
			SavePlayer(playerid);
			ChangeVehiclePaintjob(vID, paintjob);
			VehicleInfo[vID][vPaintjob] = paintjob;
			SaveVehicle(vID);
			SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");

		}
		else if(!strfind(command, "paintjob3"))
		{
	 		new paintjob;
			if(sscanf(params, "s[16]ii", command, paintjob)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [paintjob] [paintjob id]");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vasem vozilu!");
			if(GetPlayerMoney(playerid) < 5000) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca! ($5000)");
            PlayerInfo[playerid][pMoney] -= 5000;
   			GivePlayerMoney(playerid, -5000);
			SavePlayer(playerid);
			ChangeVehiclePaintjob(vID, paintjob);
			VehicleInfo[vID][vPaintjob] = paintjob;
			SaveVehicle(vID);
			SCM(playerid, BOJA_ZELENA, "Promenili ste boju vaseg vozila.");

		}
		else if(strcmp(command, "save1", true) == 0)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle1ControlID]) return SCM(playerid, BOJA_CRVENA, "GRSKA: Niste u vasem vozilu!");
			SaveVehicleComponents(vID);
			SCM(playerid, BOJA_ZELENA, "Sacuvali ste komponente vaseg vozila.");
		}
		else if(strcmp(command, "save2", true) == 0)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle2ControlID]) return SCM(playerid, BOJA_CRVENA, "GRSKA: Niste u vasem vozilu!");
			SaveVehicleComponents(vID);
			SCM(playerid, BOJA_ZELENA, "Sacuvali ste komponente vaseg vozila.");
		}
		else if(strcmp(command, "save3", true) == 0)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			if(VehicleInfo[vID][vControlID] != PlayerInfo[playerid][pVehicle3ControlID]) return SCM(playerid, BOJA_CRVENA, "GRSKA: Niste u vasem vozilu!");
			SaveVehicleComponents(vID);
			SCM(playerid, BOJA_ZELENA, "Sacuvali ste komponente vaseg vozila.");
		}
		else if(!strfind(command, "menu"))
		{
		    if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
		    SPD(playerid, DIALOG_VEHICLE_MENU, DIALOG_STYLE_LIST, "VEHICLE MENU", ""BELA"Prodaj vozilo\nProdaj vozilo igracu\nParkiraj vozilo\nZakljucaj vozilo\nLociraj vozilo\nOfarbaj vozilo\nSacuvaj komponente vozila", "U redu", "Izadji");
		}
		else
		{
		    SCM(playerid, BOJA_PLAVA, "KORISCENJE: /v(ehicle) [komanda]");
			SCM(playerid, BOJA_PLAVA, "Dostupne komande: buy, sell[1-3], sellto, park[1-3], lock[1-3], find[1-3], color[1-3], paintjob[1-3], save[1-3], menu");
		}
	}
	return 1;
}

YCMD:iznajmivozilo(playerid, params[], help)
{
	#pragma unused help
   	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
   	new vID = GetPlayerVehicleID(playerid);
    if(!IsARentVehicle(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu za iznajmljivanje!");
   	if(GetPlayerMoney(playerid) < 50) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da iznajmite vozilo! ($150)");
   	if(Rented[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste iznajmili neko vozilo!");

   	for(new i = 0; i < MAX_PLAYERS; i++)
   		if(Rented[i] == GetPlayerVehicleID(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Neko je vec iznajmio ovo vozilo!");

    PlayerInfo[playerid][pMoney] -= 50;
	GivePlayerMoney(playerid, -50);
	SavePlayer(playerid);

   	Rented[playerid] = GetPlayerVehicleID(playerid);
   	TogglePlayerControllable(playerid, 1);
   	SCM(playerid, BOJA_ZELENA, "Iznajmili ste vozilo. Da vratite vozilo kucajte: /vrativozilo");
   	return 1;
}

YCMD:vrativozilo(playerid,params[], help)
{
	#pragma unused help
    new idcar = GetPlayerVehicleID(playerid);
   	if(Rented[playerid] != 9999)
   	{
    	if(idcar == Rented[playerid]) TogglePlayerControllable(playerid, 1);
     	SetVehicleToRespawn(Rented[playerid]);
      	Rented[playerid] = 9999;
      	SCM(playerid, BOJA_ZELENA, "Vratili ste iznajmljeno vozilo.");
   	}
   	return 1;
}

YCMD:napustivozilo(playerid, params[], help)
{
	#pragma unused help
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	RemovePlayerFromVehicle(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

YCMD:engine(playerid, params[], help)
{
	#pragma unused help
	new sendername[MAX_PLAYER_NAME], vID, engine, lights, alarm, doors, bonnet, boot, objective, Float:vehHealth, str[128];
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
	if(IsASalesVehicle(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete pokrenuti motor ovog vozila!");
	if(IsARentVehicle(vID) && Rented[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete pokrenuti motor ovog vozila!");
	if(vFuel[vID] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Rezervoar je prazan!");
	if(pRefuelling[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Sipanje goriva u toku!");
	if(vEngine[vID] == 0)
	{
    	GetVehicleHealth(vID, vehHealth);
	    if(vehHealth <= 500.0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete upaliti motor vozila. Motor je ostecen!");
	    if(StartingEngine[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec pokusavate da pokrenete motor vozila!");
	    StartingEngine[playerid] = 1;
    	TogglePlayerControllable(playerid, 0);
		SetTimerEx("StartVehicleEngine", 3500, false, "ii", playerid, vID);
	    GameTextForPlayer(playerid, "~w~Pokretanje motora vozila...", 3500, 3);

	    sendername = GetPlayerNameEx(playerid);
    	format(str, sizeof(str), "%s okrece kljuc i pokusava da upali motor vozila.", sendername);
    	SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	else
	{
	    SetVehicleParamsEx(vID, 0, 0, alarm, doors, bonnet, boot, objective);
    	vEngine[vID] = 0;

    	SCM(playerid, BOJA_CRVENA, "Ugasili ste motor vozila.");
    	sendername = GetPlayerNameEx(playerid);
    	format(str, sizeof(str), "%s gasi motor vozila.", sendername);
    	SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
 	}
    return 1;
}

YCMD:pojas(playerid, params[], help)
{
	#pragma unused help
 	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	new str[128];
	new vID = GetPlayerVehicleID(playerid);
	new sendername[MAX_PLAYER_NAME];
	sendername = GetPlayerNameEx(playerid);
	if(IsABike(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na motoru ste, koristite kacigu! (/kaciga)");
	if(pBelt[playerid] == 9999)
	{
	    pBelt[playerid] = 1;

	    format(str, sizeof(str), "Vezali ste pojas.");
	    SCM(playerid, BOJA_ZELENA, str);

	    format(str, sizeof(str), "%s vezuje svoj pojas.", sendername);
	    SRM(10.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	else
	{
	    pBelt[playerid] = 9999;

	    format(str, sizeof(str), "Odvezali ste pojas.");
	    SCM(playerid, BOJA_CRVENA, str);

	    format(str, sizeof(str), "%s odvezuje svoj pojas.", sendername);
	    SRM(10.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	return 1;
}

YCMD:kaciga(playerid, params[], help)
{
	#pragma unused help
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	new str[128];
	new vID = GetPlayerVehicleID(playerid);
	new sendername[MAX_PLAYER_NAME];
	sendername = GetPlayerNameEx(playerid);
	if(!IsABike(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na motoru, vezite pojas! (/pojas)");
	if(pHelmet[playerid] == 9999)
	{
	    pHelmet[playerid] = 1;
	    SetPlayerAttachedObject(playerid, 1, 18645, 2, 0.086220, 0.028146, 0.000000, 91.219810, 85.847640, 0.000000, 1.000000, 1.000000, 1.000000 );

	   	format(str, sizeof(str), "Stavili ste kacigu.");
	    SCM(playerid, BOJA_ZELENA, str);

	    format(str, sizeof(str), "%s stavlja kacigu na glavu.", sendername);
	    SRM(10.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	else
	{
	    pHelmet[playerid] = 9999;
	    RemovePlayerAttachedObject(playerid, 1);

 		format(str, sizeof(str), "Skinuli ste kacigu.");
	    SCM(playerid, BOJA_CRVENA, str);

	    format(str, sizeof(str), "%s skida kacigu.", sendername);
	    SRM(10.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	return 1;
}
//---------------------------------------------------------------------------- > ORGANIZATIONS
YCMD:amakeleader(playerid, params[], help)
{
	#pragma unused help
	if(!IsPlayerAdmin(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	new player, org, sendername[MAX_PLAYER_NAME], str[128];
	if(sscanf(params, "ui", player, org)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /makeleader [id/deo imena] [id organizacije]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	else if(org < 1 || org > MAX_ORGS) return SCM(playerid, BOJA_CRVENA, "GRESKA: ID ogranizacije ne moze biti manji od 1 a veci od "#MAX_ORGS"!");

	PlayerInfo[player][pOLeader] = org;
	PlayerInfo[player][pOMember] = org;
	PlayerInfo[player][pORank] = 6;

	switch(org)
	{
	    case 1:
	    {
	        PlayerInfo[player][pOSkin] = 283;
		}
		case 2:
	    {
	        PlayerInfo[player][pOSkin] = 286;
		}
		case 3:
	    {
	        PlayerInfo[player][pOSkin] = 270;
	        SetPlayerSkin(player, PlayerInfo[playerid][pOSkin]);
		}
		case 4:
	    {
	        PlayerInfo[player][pOSkin] = 104;
	        SetPlayerSkin(player, PlayerInfo[playerid][pOSkin]);
		}
		case 5:
	    {
	        PlayerInfo[player][pOSkin] = 292;
	        SetPlayerSkin(player, PlayerInfo[playerid][pOSkin]);
		}
		case 6:
	    {
	        PlayerInfo[player][pOSkin] = 109;
	        SetPlayerSkin(player, PlayerInfo[playerid][pOSkin]);
		}
	}

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Admin %s vas je postavio za lidera organizacije %s!", sendername, GetOrganizationName(org));
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Postavio si igraca %s za lidera organizacije %s!", sendername, GetOrganizationName(org));
	SCM(playerid, BOJA_ZELENA, str);
	SavePlayer(player);
 	return 1;
}

YCMD:invite(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pOLeader] == 0) return SCM(playerid, -1, ""CRVENA"GRESKA: Moras biti lider organizacije da bi koristio ovu komandu!");
	new player, sendername[MAX_PLAYER_NAME], str[128];

	if(sscanf(params, "u", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /invite [id igraca/deo imena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: pogresan ID igraca!");

	sendername = GetPlayerNameEx(playerid);

	switch(PlayerInfo[playerid][pOLeader])
	{
	    case 1:
	    {
	        PlayerInfo[player][pOMember] = PlayerInfo[playerid][pOLeader];
	        PlayerInfo[player][pORank] = 1;
	        PlayerInfo[player][pOSkin] = 280;

	        format(str, sizeof(str), "Lider %s vas je pozvao u organizaciju LSPD. \nDa prihvatite, kliknite Prihvati.\nUkoliko ne zelite da udjete, kliknite Odbij", sendername);
		}
		case 2:
	    {
	        PlayerInfo[player][pOMember] = PlayerInfo[playerid][pOLeader];
	        PlayerInfo[player][pORank] = 1;
	        PlayerInfo[player][pOSkin] = 163;

	        format(str, sizeof(str), "Lider %s vas je pozvao u organizaciju FBI. \nDa prihvatite, kliknite Prihvati.\nUkoliko ne zelite da udjete, kliknite Odbij", sendername);
  		}
  		case 3:
	    {
	        PlayerInfo[player][pOMember] = PlayerInfo[playerid][pOLeader];
	        PlayerInfo[player][pORank] = 1;
	        PlayerInfo[player][pOSkin] = 106;

	        format(str, sizeof(str), "Lider %s vas je pozvao u organizaciju Grove Street Families. \nDa prihvatite, kliknite Prihvati.\nUkoliko ne zelite da udjete, kliknite Odbij", sendername);
		}
        case 4:
	    {
	        PlayerInfo[player][pOMember] = PlayerInfo[playerid][pOLeader];
	        PlayerInfo[player][pORank] = 1;
	        PlayerInfo[player][pOSkin] = 102;

	        format(str, sizeof(str), "Lider %s vas je pozvao u organizaciju Ballas. \nDa prihvatite, kliknite Prihvati.\nUkoliko ne zelite da udjete, kliknite Odbij", sendername);
		}
		case 5:
	    {
	        PlayerInfo[player][pOMember] = PlayerInfo[playerid][pOLeader];
	        PlayerInfo[player][pORank] = 1;
	        PlayerInfo[player][pOSkin] = 114;

	        format(str, sizeof(str), "Lider %s vas je pozvao u organizaciju Varrios Los Aztecas. \nDa prihvatite, kliknite Prihvati.\nUkoliko ne zelite da udjete, kliknite Odbij", sendername);
		}
		case 6:
	    {
	        PlayerInfo[player][pOMember] = PlayerInfo[playerid][pOLeader];
	        PlayerInfo[player][pORank] = 1;
	        PlayerInfo[player][pOSkin] = 108;

	        format(str, sizeof(str), "Lider %s vas je pozvao u organizaciju Los Santos Vagos. \nDa prihvatite, kliknite Prihvati.\nUkoliko ne zelite da udjete, kliknite Odbij", sendername);
		}
	}
	SPD(player, DIALOG_ORG_INVITE, DIALOG_STYLE_MSGBOX, ""PLAVA"ORG INVITE", str, "Prihvati", "Odbij");
	return 1;
}

YCMD:rankup(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pOLeader] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Morate biti lider organizacije da bi koristili ovu komandu!");
	new player, rank, sendername[MAX_PLAYER_NAME], str[128];

	if(sscanf(params, "ud", player, rank)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /rankup [id igraca/deo imena] [rank]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	else if(rank < 1 || rank > 6) return SCM(playerid, BOJA_CRVENA, "GRESKA: Rank ne moze biti manji od 1 a veci od 6!");
	else if(PlayerInfo[player][pOMember] != PlayerInfo[playerid][pOLeader]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije u vasoj organizaciji!");

	PlayerInfo[player][pORank] = rank;
	if(PlayerInfo[playerid][pOMember] != 1 || PlayerInfo[playerid][pOMember] != 2) SetPlayerOrgSkin(player, ((PlayerInfo[player][pOLeader] != 9999) ? (PlayerInfo[player][pOLeader]) : (PlayerInfo[player][pOMember])), rank);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Lider %s ti je postavio rank na %d", sendername, rank);
	SCM(player, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Postavio si clanu %s rank na %d", sendername, rank);
	SCM(playerid, BOJA_ZELENA, str);
	SavePlayer(player);
	return 1;
}

YCMD:kickout(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pOLeader] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Morate biti lider organizacije da bi koristili ovu komandu!");
	new player, sendername[MAX_PLAYER_NAME], str[128];

	if(sscanf(params, "u", player)) return SCM(playerid, BOJA_PLAVA, "KORISCEJNE: /izbaci [id igraca/deo imena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	else if(PlayerInfo[player][pOMember] != PlayerInfo[playerid][pOLeader]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije u vasoj organizaciji!");

	PlayerInfo[player][pOMember] = 9999;
	PlayerInfo[player][pORank] = 9999;
	PlayerInfo[player][pOSkin] = 9999;

	SetPlayerSkin(player, PlayerInfo[player][pSkin]);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Lider %s te je izbacio iz organizacije!", sendername);
	SCM(player, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Izbacio si %s iz organizacije!", sendername);
	SCM(playerid, BOJA_CRVENA, str);
	SavePlayer(player);
	return 1;
}

YCMD:r(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pOMember] == 9999 && PlayerInfo[playerid][pOLeader] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Morate biti clan organizacije da bi koristili ovu komandu!");
	new str[128], chatmsg[128], sendername[MAX_PLAYER_NAME];

	if(sscanf(params, "s[128]", chatmsg)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /r [text]");

	sendername = GetPlayerNameEx(playerid);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerInfo[i][pOMember] == PlayerInfo[playerid][pOMember])
	    {
	        format(str, sizeof(str), ""ZELENA"%s [Rank %d] "BELA"kaze: %s", sendername, PlayerInfo[playerid][pORank], chatmsg);
	        SCM(i, -1, str);
		}
	}
	return 1;
}

YCMD:lockhq(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pOLeader] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste lider ni jedne organizacije!");
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2522.4756, -1679.2355, 15.4970)) // GSF
	{
	    if(PlayerInfo[playerid][pOLeader] != 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu HQa svoje organizacije!");
		if(GSFHQLocked == 1)
		{
		    GameTextForPlayer(playerid, "~g~HQ otkljucan!", 2000, 3);
			GSFHQLocked = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~g~HQ zakljucan!", 2000, 3);
			GSFHQLocked = 1;
		}

	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2045.5447, -1116.1219, 26.3617)) // BALLAS
	{
	    if(PlayerInfo[playerid][pOLeader] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu HQa svoje organizacije!");
	    if(BallasHQLocked == 1)
		{
		    GameTextForPlayer(playerid, "~g~HQ otkljucan!", 2000, 3);
			BallasHQLocked = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~g~HQ zakljucan!", 2000, 3);
			BallasHQLocked = 1;
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1684.8185, -2099.0588, 13.8343)) // VARRIOUS LOS AZTECAS
	{
		if(PlayerInfo[playerid][pOLeader] != 5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu HQa svoje organizacije!");
		if(VLAHQLocked == 1)
		{
		    GameTextForPlayer(playerid, "~g~HQ otkljucan!", 2000, 3);
			VLAHQLocked = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~g~HQ zakljucan!", 2000, 3);
			VLAHQLocked = 1;
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2808.0615, -1189.7864, 25.3446)) // LOS SANTOS VAGOS
	{
	    if(PlayerInfo[playerid][pOLeader] != 6) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu HQa svoje organizacije!");
	    if(LSVHQLocked == 1)
		{
		    GameTextForPlayer(playerid, "~g~HQ otkljucan!", 2000, 3);
			LSVHQLocked = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~g~HQ zakljucan!", 2000, 3);
			LSVHQLocked = 1;
		}
	}
	else return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu HQa svoje organizacije!");
	return 1;
}

//---------------------------------------------------------------------------- > GATES & DOORS
/*YCMD:pdgarageopen(playerid, params[], help)
{
	#pragma unused help
	new sendername[MAX_PLAYER_NAME], str[128];
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1589.7000000, -1638.3101000, 14.2700000)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu PD garaze!");
	if(PlayerInfo[playerid][pOMember] != 1 || PlayerInfo[playerid][pOLeader] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste clan PD-a!");

	MoveDynamicObject(pdgarage, 1597.7000000, -1638.3101000, 14.2700000, 5.0, 0.0000000, 0.0000000, 90.0000000);

	SCM(playerid, BOJA_ZELENA, "Otvorili ste PD garazu, zatvorice se sama za 10 sekundi!");
	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "%s otvara garazu LSPDa!", sendername);
	SRM(15.0, playerid, str, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA, BOJA_ZELENA);

	SetTimer("pdgarageclose", 10000, 0);
	return 1;
}


YCMD:stavioruzje(playerid, params[], help)
{
	#pragma unused help
	new slot, ammo;
	new plyWeapons[13][2];
	new currweapon = GetPlayerWeapon(playerid);
	if(InHouse[playerid] != 0)
	{

		if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu.");
		new hid = PlayerInfo[playerid][pHouseID];
		if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci.");
		if(!currweapon) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate oruzje!");
		if(sscanf(params, "ii", slot, ammo)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE:/stavioruzje [slot] [metkovi]");
		if(slot < 1 || slot > 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan slot! (1 - 3)");

		new oldammo = GetPlayerAmmo(playerid);
	 	new currammo = GetPlayerAmmo(playerid)-ammo;

		if(ammo > oldammo) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		switch(slot)
		{
		    case 1:
		    {
		        if(HouseInfo[hid][hSlot1] == currweapon) return 1;
				else if(HouseInfo[hid][hSlot1] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");
				HouseInfo[hid][hSlot1] = currweapon;
				HouseInfo[hid][hSlot1Ammo] += ammo;

				for(new i = 0; i != 12; i++)
				{
				    new weapon, weaponammo;
					GetPlayerWeaponData(playerid, i, weapon, weaponammo);
					if(weapon != currweapon)
					{
					    GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
	    			}
				}

				ResetPlayerWeapons(playerid);

				for(new i = 0; i <= 12; i++)
				{
				    GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
				}
				if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
				SaveHouse(hid);
	 		}
	 		case 2:
		    {
		        if(HouseInfo[hid][hSlot2] == currweapon) return 1;
				else if(HouseInfo[hid][hSlot2] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");

				HouseInfo[hid][hSlot2] = currweapon;
				HouseInfo[hid][hSlot2Ammo] += ammo;

				for(new i = 0; i <= 12; i++)
				{
				    new weapon, weaponammo;
					GetPlayerWeaponData(playerid, i, weapon, weaponammo);
					if(weapon != currweapon)
					{
					    GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
	    			}
				}

				ResetPlayerWeapons(playerid);

				for(new i = 0; i <= 12; i++)
				{
				    GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
				}
				if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
				SaveHouse(hid);
	 		}
	 		case 3:
		    {
		        if(HouseInfo[hid][hSlot3] == currweapon) return 1;
				else if(HouseInfo[hid][hSlot3] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");
				HouseInfo[hid][hSlot3] = currweapon;
				HouseInfo[hid][hSlot3Ammo] += ammo;

				for(new i = 0; i <= 12; i++)
				{
				    new weapon, weaponammo;
					GetPlayerWeaponData(playerid, i, weapon, weaponammo);
					if(weapon != currweapon)
					{
					    GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
	    			}
				}

				ResetPlayerWeapons(playerid);

				for(new i = 0; i <= 12; i++)
				{
				    GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
				}
				if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
				SaveHouse(hid);
	 		}
	 	}
	}
	else if(InApartment[playerid] != 0)
	{
		if(PlayerInfo[playerid][pApartmentID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate stan!");
		new aid = PlayerInfo[playerid][pApartmentID];
		if(!IsPlayerInRangeOfPoint(playerid, 15, ApartmentInfo[aid][aExitX], ApartmentInfo[aid][aExitY], ApartmentInfo[aid][aExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svom stanu!");
		if(!currweapon) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate oruzje!");
		if(sscanf(params, "ii", slot, ammo)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE:/stavioruzje [slot] [metkovi]");
		if(slot < 1 || slot > 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan slot! (1 - 3)!");

		new oldammo = GetPlayerAmmo(playerid);
	 	new currammo = GetPlayerAmmo(playerid)-ammo;

		if(ammo > oldammo) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		switch(slot)
		{
		    case 1:
		    {
		        if(ApartmentInfo[aid][aSlot1] == currweapon) return 1;
				else if(ApartmentInfo[aid][aSlot1] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");
				ApartmentInfo[aid][aSlot1] = currweapon;
				ApartmentInfo[aid][aSlot1Ammo] += ammo;

				for(new i = 0; i != 12; i++)
				{
				    new weapon, weaponammo;
					GetPlayerWeaponData(playerid, i, weapon, weaponammo);
					if(weapon != currweapon)
					{
					    GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
	    			}
				}

				ResetPlayerWeapons(playerid);

				for(new i = 0; i <= 12; i++)
				{
				    GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
				}
				if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
				SaveApartment(aid);
	 		}
	 		case 2:
		    {
		        if(ApartmentInfo[aid][aSlot2] == currweapon) return 1;
				else if(ApartmentInfo[aid][aSlot2] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");

				ApartmentInfo[aid][aSlot2] = currweapon;
				ApartmentInfo[aid][aSlot2Ammo] += ammo;

				for(new i = 0; i <= 12; i++)
				{
				    new weapon, weaponammo;
					GetPlayerWeaponData(playerid, i, weapon, weaponammo);
					if(weapon != currweapon)
					{
					    GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
	    			}
				}

				ResetPlayerWeapons(playerid);

				for(new i = 0; i <= 12; i++)
				{
				    GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
				}
				if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
				SaveApartment(aid);
	 		}
	 		case 3:
		    {
		        if(ApartmentInfo[aid][aSlot3] == currweapon) return 1;
				else if(ApartmentInfo[aid][aSlot3] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate oruzje na ovom slotu!");
				ApartmentInfo[aid][aSlot3] = currweapon;
				ApartmentInfo[aid][aSlot3Ammo] += ammo;

				for(new i = 0; i <= 12; i++)
				{
				    new weapon, weaponammo;
					GetPlayerWeaponData(playerid, i, weapon, weaponammo);
					if(weapon != currweapon)
					{
					    GetPlayerWeaponData(playerid, i, plyWeapons[i][0], plyWeapons[i][1]);
	    			}
				}

				ResetPlayerWeapons(playerid);

				for(new i = 0; i <= 12; i++)
				{
				    GivePlayerWeapon(playerid, plyWeapons[i][0], plyWeapons[i][1]);
				}
				if(currammo) GivePlayerWeapon(playerid, currweapon, currammo);
				SaveApartment(aid);
	 		}
	 	}
	}
 	return 1;
}

YCMD:uzmioruzje(playerid, params[], help)
{
	#pragma unused help
	new slot, ammo;
	if(InHouse[playerid] != 9999)
	{
		if(PlayerInfo[playerid][pHouseID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kucu!");
		new hid = PlayerInfo[playerid][pHouseID];
		if(!IsPlayerInRangeOfPoint(playerid, 15, HouseInfo[hid][hExitX], HouseInfo[hid][hExitY], HouseInfo[hid][hExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svojoj kuci!");
		if(sscanf(params, "ii", slot, ammo)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE:/uzmioruzje [slot] [metkovi]");
		if(slot < 1 || slot > 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan slot! (1 - 3)!");
 		new str[128];
		format(str, sizeof(str), "hid %d Slot: %d Ammo: %d House Ammo: %d", hid, slot, ammo, HouseInfo[hid][hSlot1Ammo]);
		SCM(playerid, BOJA_CRVENA, str);
		switch(slot)
		{
		    case 1:
		    {
		        if(ammo > HouseInfo[hid][hSlot1Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		        if(ammo == HouseInfo[hid][hSlot1Ammo])
		        {
		        	GivePlayerWeapon(playerid, HouseInfo[hid][hSlot1], ammo);
		        	HouseInfo[hid][hSlot1] = 9999;
		            HouseInfo[hid][hSlot1Ammo] = 0;
		        	SaveHouse(hid);
				}
				else
				{
				    GivePlayerWeapon(playerid, HouseInfo[hid][hSlot1], ammo);
				    HouseInfo[hid][hSlot1Ammo] -= ammo;
				    SaveHouse(hid);
				}
	 		}
	 		case 2:
		    {
		        if(ammo > HouseInfo[hid][hSlot2Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		        if(ammo == HouseInfo[hid][hSlot2Ammo])
		        {
		        	GivePlayerWeapon(playerid, HouseInfo[hid][hSlot2], ammo);
		        	HouseInfo[hid][hSlot2] = 9999;
		            HouseInfo[hid][hSlot2Ammo] = 0;
		        	SaveHouse(hid);
				}
				else
				{
				    GivePlayerWeapon(playerid, HouseInfo[hid][hSlot2], ammo);
				    HouseInfo[hid][hSlot2Ammo] -= ammo;
				    SaveHouse(hid);
				}
	 		}
	 		case 3:
		    {
		        if(ammo > HouseInfo[hid][hSlot3Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		        if(ammo == HouseInfo[hid][hSlot3Ammo])
		        {
		        	GivePlayerWeapon(playerid, HouseInfo[hid][hSlot3], ammo);
		        	HouseInfo[hid][hSlot3] = 9999;
		            HouseInfo[hid][hSlot3Ammo] = 0;
		        	SaveHouse(hid);
				}
				else
				{
				    GivePlayerWeapon(playerid, HouseInfo[hid][hSlot3], ammo);
				    HouseInfo[hid][hSlot3Ammo] -= ammo;
				    SaveHouse(hid);
				}
	 		}
	 	}
	}
	else if(InApartment[playerid] != 9999)
	{
		if(PlayerInfo[playerid][pApartmentID] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate stan!");
		new aid = PlayerInfo[playerid][pApartmentID];
		if(!IsPlayerInRangeOfPoint(playerid, 15, ApartmentInfo[aid][aExitX], ApartmentInfo[aid][aExitY], ApartmentInfo[aid][aExitZ])) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u svom stanu!");
		if(sscanf(params, "ii", slot, ammo)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE:/uzmioruzje [slot] [metkovi]");
		if(slot < 1 || slot > 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan slot! (1 - 3)!");

		switch(slot)
		{
		    case 1:
		    {
		        if(ammo > ApartmentInfo[aid][aSlot1Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		        if(ammo == ApartmentInfo[aid][aSlot1Ammo])
		        {
		        	GivePlayerWeapon(playerid, ApartmentInfo[aid][aSlot1], ammo);
		        	ApartmentInfo[aid][aSlot1] = 9999;
		            ApartmentInfo[aid][aSlot1Ammo] = 0;
		        	SaveApartment(aid);
				}
				else
				{
				    GivePlayerWeapon(playerid, ApartmentInfo[aid][aSlot1], ammo);
				    ApartmentInfo[aid][aSlot1Ammo] -= ammo;
				    SaveApartment(aid);
				}
	 		}
	 		case 2:
		    {
		        if(ammo > ApartmentInfo[aid][aSlot2Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		        if(ammo == ApartmentInfo[aid][aSlot2Ammo])
		        {
		        	GivePlayerWeapon(playerid, ApartmentInfo[aid][aSlot2], ammo);
		        	ApartmentInfo[aid][aSlot2] = 9999;
		            ApartmentInfo[aid][aSlot2Ammo] = 0;
		        	SaveApartment(aid);
				}
				else
				{
				    GivePlayerWeapon(playerid, ApartmentInfo[aid][aSlot2], ammo);
				    ApartmentInfo[aid][aSlot2Ammo] -= ammo;
				    SaveApartment(aid);
				}
	 		}
	 		case 3:
		    {
		        if(ammo > ApartmentInfo[aid][aSlot3Ammo]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko metkova!");
		        if(ammo == ApartmentInfo[aid][aSlot3Ammo])
		        {
		        	GivePlayerWeapon(playerid, ApartmentInfo[aid][aSlot3], ammo);
		        	ApartmentInfo[aid][aSlot3] = 9999;
		            ApartmentInfo[aid][aSlot3Ammo] = 0;
		        	SaveApartment(aid);
				}
				else
				{
				    GivePlayerWeapon(playerid, HouseInfo[aid][hSlot3], ammo);
				    ApartmentInfo[aid][aSlot3Ammo] -= ammo;
				    SaveApartment(aid);
				}
	 		}
	 	}
	}
 	return 1;
}
*/
YCMD:help(playerid, params[], help)
{
	#pragma unused help
	new str[128], chatmsg[128], sendername[MAX_PLAYER_NAME];
	if(HelpTime[playerid] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste poslali zahtev za pomoc, sacekajte minut!");
	if(sscanf(params, "s[128]", chatmsg)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /help [text]");

	HelpTime[playerid] = 60;

	sendername = GetPlayerNameEx(playerid);
	SCM(playerid, BOJA_CRVENA, "Vas zahtev za pomoc je poslat svim Administratorima na serveru.");

	format(str, sizeof(str), "[POMOC]: %s",chatmsg);
	SCM(playerid, BOJA_ZELENA, str);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAdmin(i))
	    {
	        format(str, sizeof(str), "[POMOC] %s: %s", sendername, chatmsg);
	        SCM(i, BOJA_ZELENA, str);
		}
	}
	return 1;
}

YCMD:pomoc(playerid, params[], help)
{
	#pragma unused help
	new str[128], chatmsg[128], sendername[MAX_PLAYER_NAME];
	if(HelpTime[playerid] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste poslali zahtev za pomoc, sacekajte minut!");
	if(sscanf(params, "s[128]", chatmsg)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /pomoc [text]");

	HelpTime[playerid] = 60;

	sendername = GetPlayerNameEx(playerid);
	SCM(playerid, BOJA_CRVENA, "Vas zahtev za pomoc je poslat svim Administratorima na serveru.");

	format(str, sizeof(str), "%s",chatmsg);
	SCM(playerid, BOJA_ZELENA, str);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAdmin(i))
	    {
	        format(str, sizeof(str), "[POMOC] %s: %s", sendername, chatmsg);
	        SCM(i, BOJA_ZELENA, str);
		}
	}
	return 1;
}

YCMD:pitaj(playerid, params[], help)
{
	#pragma unused help
	new str[128], chatmsg[128], sendername[MAX_PLAYER_NAME];
	if(HelpTime[playerid] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste poslali zahtev za pomoc, sacekajte minut!");
	if(sscanf(params, "s[128]", chatmsg)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /pitaj [text]");

	HelpTime[playerid] = 60;

	sendername = GetPlayerNameEx(playerid);
	SCM(playerid, BOJA_CRVENA, "Vas zahtev za pomoc je poslat svim Administratorima na serveru.");

	format(str, sizeof(str), "%s",chatmsg);
	SCM(playerid, BOJA_ZELENA, str);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerAdmin(i))
	    {
	        format(str, sizeof(str), "[POMOC] %s: %s", sendername, chatmsg);
	        SCM(i, BOJA_ZELENA, str);
		}
	}
	return 1;
}

YCMD:pm(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pAdmin] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	new str[128], player, chatmsg[128], sendername[MAX_PLAYER_NAME], playername[MAX_PLAYER_NAME];
	if(sscanf(params, "is[128]", player, chatmsg)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /pm [id/deo imena igraca] [text]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_ZELENA, "GRESKA: Pogresan ID igraca!");
	sendername = GetPlayerNameEx(playerid);
	playername = GetPlayerNameEx(player);
	format(str, sizeof(str), "[Administrator %s]: %s", sendername, chatmsg);
	SCM(player, BOJA_ZELENA, str);
	format(str, sizeof(str), "%s za %s: %s", sendername, playername, chatmsg);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

//---------------------------------------------------------------------------- > POSAO KOMANDE
YCMD:uzmiposao(playerid, params[], help)
{
	#pragma unused help
	if(IsPlayerInRangeOfPoint(playerid, 3.0, -135.6795, 138.2959, 1001.0859)) // DETECTIVE
	{
	    if(PlayerInfo[playerid][pJob] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate posao! Prvo dajte otkaz (/otkaz)");

	    PlayerInfo[playerid][pJob] = 1;
	    PlayerInfo[playerid][pJobContract] = 2;
	    SavePlayer(playerid);

	    SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor od 2 sata, i zaposlili se kao Detektiv.");
	    SCM(playerid, BOJA_ZELENA, "Da vidite komande posla, kucajte /posao");
	    SCM(playerid, BOJA_ZELENA, "Otkaz mozete dati tek nakon isteka ugovora. (/otkaz)");
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2125.7737, -2276.0076, 20.6719)) // SMUGGLER DRUG
	{
	    if(PlayerInfo[playerid][pJob] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate posao! Prvo dajte otkaz (/otkaz)");

	    PlayerInfo[playerid][pJob] = 11;
	    PlayerInfo[playerid][pJobContract] = 4;
	    SavePlayer(playerid);

	    SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor od 4 sata, i zaposlili se kao Svercer droge.");
	    SCM(playerid, BOJA_ZELENA, "Da vidite komande posla, kucajte /posao");
	    SCM(playerid, BOJA_ZELENA, "Otkaz mozete dati tek nakon isteka ugovora. (/otkaz)");
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2123.1248, -2273.5098, 20.6719)) // SMUGGLER MATERIALS
	{
	    if(PlayerInfo[playerid][pJob] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate posao! Prvo dajte otkaz (/otkaz)");

	    PlayerInfo[playerid][pJob] = 12;
	    PlayerInfo[playerid][pJobContract] = 4;
	    SavePlayer(playerid);

	    SCM(playerid, BOJA_ZELENA, "Potpisali ste ugovor od 4 sata, i zaposlili se kao Svercer materijala.");
	    SCM(playerid, BOJA_ZELENA, "Da vidite komande posla, kucajte /posao");
	    SCM(playerid, BOJA_ZELENA, "Otkaz mozete dati tek nakon isteka ugovora. (/otkaz)");
	}
	else return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na mestu za zaposljavanje!");
	return 1;
}

YCMD:otkaz(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate posao!");
	if(PlayerInfo[playerid][pJobContract] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nije Vam istekao ugovor!");
	PlayerInfo[playerid][pJob] = 9999;
	PlayerInfo[playerid][pJobContract] = 0;
	SavePlayer(playerid);
	SCM(playerid, BOJA_ZELENA, "Dali ste otkaz, vise nemate posao.");
	return 1;
}

YCMD:posao(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste zaposleni!");
	switch(PlayerInfo[playerid][pJob])
	{
	    case 1: // DETEKTIV
	    {
	        SCM(playerid, BOJA_PLAVA, "Vas posao je da pronalazite odredjene igrace za pare.");
	        SCM(playerid, BOJA_PLAVA, "KOMANDE: /pronadji");
	    }
	    case 2: // KAMIONDZIJA
		{
		    SCM(playerid, BOJA_PLAVA, "Vas posao je da prevozite robu na odredjene lokacije.");
		    SCM(playerid, BOJA_PLAVA, "KOMANDE: /truck");
		}
		case 3: // KOMUNALAC
		{
		    SCM(playerid, BOJA_PLAVA, "Vas posao je da cuvate grad cistim, da odrzavate 'higijenu' grada.");
		    SCM(playerid, BOJA_PLAVA, "KOMANDE: /sanitary, /ocistigrad");
		}
		case 4: // MEHANICAR
		{
		    SCM(playerid, BOJA_PLAVA, "Vas posao je da cuvate popravljate vozila po pozivu drugih igraca.");
		    SCM(playerid, BOJA_PLAVA, "KOMANDE: /repai ili /popravivozilo, /refill ili /dopunigorivo, /prihvati mehanicar");
		}
		case 5: // TAXISTA
		{
		    SCM(playerid, BOJA_PLAVA, "Vas posao je da prevozite ljudi po potrebi.");
		    SCM(playerid, BOJA_PLAVA, "/fare, /prihvati taxi");
		}
	}
	return 1;
}

//---------------------------------------------------------------------------- > POSAO DETEKTIVA
YCMD:pronadji(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste detektiv!");
	new player, target, price, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], sendername2[MAX_PLAYER_NAME], str[512];
	if(sscanf(params, "iii", player, target, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /pronadji [id/deo imena igraca kome trazite igraca] [id/deo imena igraca koga trazite] [cena]");
	else if(target == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	if(CopDuty[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na duznosti ste!");
	if(DetectiveDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(PlayerOnTutorial[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na tutorijalu ste!");
	if(OnATruckMission[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na poslu ste!");
	if(vSearching[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec trazite vozilo!");
	if(DetectiveSearchingOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec trazite igraca!");
	if(PlayerOnTutorial[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac je na tutorijalu!");
	if(OnATruckMission[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac je na poslu!");
	if(vSearching[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac vec trazi vozilo!");
	if(DetectiveSearchingOffer[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac vec trazi nekoga!");
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");

	DetectiveSearchingOffer[playerid] = player;
	DetectiveSearchingOffer[player] = playerid;
	DetectivePlayerToFind[player] = target;
	DetectiveSearchingPrice[player] = price;

	sendername = GetPlayerNameEx(player);
	sendername2 = GetPlayerNameEx(target);
	format(str, sizeof(str), "Ponudili ste %s trazenje igraca %s za %d$.", sendername, sendername2, DetectiveSearchingPrice[player]);
	SCM(playerid, BOJA_ZELENA, str);

	format(str, sizeof(str), "Detektiv Vam je ponudio trazenje igraca. \n"PLAVA"Ime_Prezime igraca"BELA": %s \n"PLAVA"Cena trazenja"BELA": %d \n"PLAVA"Iskustvo detektiva"BELA": %d \nImate "PLAVA"10"BELA"s da prihvatite ponudu.", sendername2, DetectiveSearchingPrice[player], PlayerInfo[playerid][pDetectiveLevel]);
	SPD(player, DIALOG_DETECTIVE_SEARCHING, DIALOG_STYLE_MSGBOX, "PONUDA DETEKTIVA", str, "Prihvati", "Odbij");
	return 1;
}

//---------------------------------------------------------------------------- > POSAO KAMIONDZIJE
YCMD:truck(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste kamiondzija!");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	new vID = GetPlayerVehicleID(playerid);
	if(!IsATruckmanCar(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu za kamiondzije!");
	if(OnATruckMission[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste zapoceli misiju!");
	if(GetVehicleModel(vID) == 403)
	{
		if(!IsTrailerAttachedToVehicle(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste zakacili prikolicu! Zakacite prikolicu da bi zapoceli posao!");
		SetPlayerCheckpoint(playerid, -2456.8215, 2293.1025, 5.0, 5.0);
		OnATruckMission[playerid] = 1;
		SCM(playerid, BOJA_ZELENA, "Odvezite utovar do checkpointa.");
	}
	else if(GetVehicleModel(vID) == 456)
	{
	    SetPlayerCheckpoint(playerid, -117.6373, -319.4652, 1.4219, 5.0);
		OnATruckMission[playerid] = 11;
		SCM(playerid, BOJA_ZELENA, "Idite do checkpointa da utovarite robu.");
	}
	return 1;
}

//---------------------------------------------------------------------------- > POSAO KOMUNALCA
YCMD:sanitary(playerid, params[], help)
{
	#pragma unused help
	new vID, vMDL;
	if(PlayerInfo[playerid][pJob] != 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste komunalac!");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	vMDL = GetVehicleModel(vID);
	if(!IsASanitaryCar(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu JKPa!");
	if(vMDL == 574)
	{
		if(SanitaryStarted[playerid] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste zapoceli ciscenje grada!");
		if(SweeperRoute[playerid] == 1)
		{
			SanitaryStarted[playerid] = 1;
			SanitaryCheckpoint[playerid] = 1;
			SetPlayerCheckpoint(playerid, SweeperCheckpoint[0][0], SweeperCheckpoint[0][1], SweeperCheckpoint[0][2], 3.0);
			SCM(playerid, BOJA_ZELENA, "Zapoceli ste ciscenje grada. Pocistite grad i zaradite novac.");
		}
		else if(SweeperRoute[playerid] == 2)
		{
		    SanitaryStarted[playerid] = 1;
			SanitaryCheckpoint[playerid] = 32;
			SetPlayerCheckpoint(playerid, SweeperCheckpoint[31][0], SweeperCheckpoint[31][1], SweeperCheckpoint[31][2], 3.0);
			SCM(playerid, BOJA_ZELENA, "Zapoceli ste ciscenje grada. Pocistite grad i zaradite novac.");
		}
		else if(SweeperRoute[playerid] == 3)
		{
		    SanitaryStarted[playerid] = 1;
			SanitaryCheckpoint[playerid] = 64;
			SetPlayerCheckpoint(playerid, SweeperCheckpoint[62][0], SweeperCheckpoint[62][1], SweeperCheckpoint[62][2], 3.0);
			SCM(playerid, BOJA_ZELENA, "Zapoceli ste ciscenje grada. Pocistite grad i zaradite novac.");
		}
	}
	//if(vID == 552)
	if(vMDL == 408)
	{
	    //if(PlayerInfo[playerid][pSanitaryLevel] != 3)
		if(SanitaryStarted[playerid] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste zapoceli ciscenje grada!");
		SCM(playerid, BOJA_ZELENA, "Pokupi djubre i zaradi novac.");
		SanitaryStarted[playerid] = 1;
		SanitaryObjects[0] = CreateDynamicObject(1264, 1048.2000000, -1247.8000000, 14.9000000, 0.0000000, 0.0000000, 0.0000000); //object(blackbag1) (1)
		SanitaryObjects[1] = CreateDynamicObject(1264, 1048.2000000, -1266.8000000, 13.4000000, 0.0000000, 0.0000000, 0.0000000); //object(blackbag1) (2)
		SanitaryObjects[2] = CreateDynamicObject(1264, 1048.2000000, -1284.5000000, 13.0000000, 0.0000000, 0.0000000, 0.0000000); //object(blackbag1) (3)
        SetPlayerCheckpoint(playerid, 1048.2000000, -1247.8000000, 14.9000000, 3.0);
		SanitaryCheckpoint[playerid] = 1;
	}
	return 1;
}

YCMD:ocistigrad(playerid, params[], help)
{
	#pragma unused help
	new vID, vMDL;
	if(PlayerInfo[playerid][pJob] != 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste komunalac!");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	vMDL = GetVehicleModel(vID);
	if(!IsASanitaryCar(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu JKPa!");
	if(vMDL == 574)
	{
		if(SanitaryStarted[playerid] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste zapoceli ciscenje grada!");
		if(SweeperRoute[playerid] == 1)
		{
			SanitaryStarted[playerid] = 1;
			SanitaryCheckpoint[playerid] = 1;
			SetPlayerCheckpoint(playerid, SweeperCheckpoint[0][0], SweeperCheckpoint[0][1], SweeperCheckpoint[0][2], 3.0);
			SCM(playerid, BOJA_ZELENA, "Zapoceli ste ciscenje grada. Pocistite grad i zaradite novac.");
		}
		else if(SweeperRoute[playerid] == 2)
		{
		    SanitaryStarted[playerid] = 1;
			SanitaryCheckpoint[playerid] = 32;
			SetPlayerCheckpoint(playerid, SweeperCheckpoint[31][0], SweeperCheckpoint[31][1], SweeperCheckpoint[31][2], 3.0);
			SCM(playerid, BOJA_ZELENA, "Zapoceli ste ciscenje grada. Pocistite grad i zaradite novac.");
		}
		else if(SweeperRoute[playerid] == 3)
		{
		    SanitaryStarted[playerid] = 1;
			SanitaryCheckpoint[playerid] = 64;
			SetPlayerCheckpoint(playerid, SweeperCheckpoint[62][0], SweeperCheckpoint[62][1], SweeperCheckpoint[62][2], 3.0);
			SCM(playerid, BOJA_ZELENA, "Zapoceli ste ciscenje grada. Pocistite grad i zaradite novac.");
		}
	}
	//if(vID == 552)
	if(vMDL == 408)
	{
	    //if(PlayerInfo[playerid][pSanitaryLevel] != 3)
		if(SanitaryStarted[playerid] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste zapoceli ciscenje grada!");
		SCM(playerid, BOJA_ZELENA, "Pokupi djubre i zaradi novac.");
		SanitaryStarted[playerid] = 1;
		SanitaryObjects[0] = CreateDynamicObject(1264, 1048.2000000, -1247.8000000, 14.9000000, 0.0000000, 0.0000000, 0.0000000); //object(blackbag1) (1)
		SanitaryObjects[1] = CreateDynamicObject(1264, 1048.2000000, -1266.8000000, 13.4000000, 0.0000000, 0.0000000, 0.0000000); //object(blackbag1) (2)
		SanitaryObjects[2] = CreateDynamicObject(1264, 1048.2000000, -1284.5000000, 13.0000000, 0.0000000, 0.0000000, 0.0000000); //object(blackbag1) (3)
        SetPlayerCheckpoint(playerid, 1048.2000000, -1247.8000000, 14.9000000, 3.0);
		SanitaryCheckpoint[playerid] = 1;
	}
	return 1;
}
//---------------------------------------------------------------------------- > POSAO MEHANICARA
YCMD:repair(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste mehanicar!");
	if(MechanicDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete koristiti ovu komandu dok ste u vozilu!");
	new player, price, sendername[MAX_PLAYER_NAME], str[128];
	sendername = GetPlayerNameEx(playerid);
	if(sscanf(params, "ri", player, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /repair [id/deo imena igraca] [cena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da koristite komandu na samom sebi!");
	if(!IsPlayerInAnyVehicle(player)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije u vozilu!");
	new vID = GetPlayerVehicleID(player);
	if(vEngine[vID] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Motor vozila nije ugasen!");
	if(vehHood[vID] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Hauba nije podignuta!");
	MechanicRepairOffer[player] = 1;
	MechanicRepairPlayerOffer[player] = playerid;
	MechanicRepairOfferPrice[player] = price;
	MechanicRepairOfferVehicle[player] = vID;
	SetTimerEx("MechanicStopRepairOffer", 10000, false, "i", player);
	format(str, sizeof(str), "Igrac %s Vam je ponudio popravku motora vozila za %d$. Da prihvatite ponudu kucajte /accept", sendername, price);
	SCM(player, BOJA_ZELENA, str);
	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Ponudili ste igracu %s popravku motora vozila za %d$.", sendername, price);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:popravivozilo(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste mehanicar!");
	if(MechanicDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete koristiti ovu komandu dok ste u vozilu!");
	new player, price, sendername[MAX_PLAYER_NAME], str[128];
	sendername = GetPlayerNameEx(playerid);
	if(sscanf(params, "ri", player, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /popravivozilo [id/deo imena igraca] [cena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da koristite komandu na samom sebi!");
	if(!IsPlayerInAnyVehicle(player)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije u vozilu!");
	new vID = GetPlayerVehicleID(player);
	if(vEngine[vID] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Motor vozila nije ugasen!");
	if(vehHood[vID] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Hauba nije podignuta!");
	MechanicRepairOffer[player] = 1;
	MechanicRepairPlayerOffer[player] = playerid;
	MechanicRepairOfferPrice[player] = price;
	MechanicRepairOfferVehicle[player] = vID;
	SetTimerEx("MechanicStopRepairOffer", 10000, false, "i", player);
	format(str, sizeof(str), "Igrac %s Vam je ponudio popravku motora vozila za %d$. Da prihvatite ponudu kucajte /accept", sendername, price);
	SCM(player, BOJA_ZELENA, str);
	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Ponudili ste igracu %s popravku motora vozila za %d$.", sendername, price);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:refill(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste mehanicar!");
	if(MechanicDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete koristiti ovu komandu dok ste u vozilu!");
	new player, price, litre, sendername[MAX_PLAYER_NAME], str[128];
	sendername = GetPlayerNameEx(playerid);
	if(sscanf(params, "rii", player, litre, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /refill [id/deo imena igraca] [litri] [cena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da koristite komandu na samom sebi!");
	if(!IsPlayerInAnyVehicle(player)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije u vozilu!");
	new vID = GetPlayerVehicleID(player);
	if(vEngine[vID] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Motor vozila nije ugasen!");
	if(IsABike(vID) && (vFuel[vID]+litre > 30)) return SCM(playerid, BOJA_CRVENA, "GRESKA: U vozilo ne moze stati toliko goriva!");
	else if(vFuel[vID]+litre > 60) return SCM(playerid, BOJA_CRVENA, "GRESKA: U vozilo ne moze stati toliko goriva!");
	MechanicRefillOffer[player] = 1;
	MechanicRefillPlayerOffer[player] = playerid;
	MechanicRefillLitre[player] = litre;
	MechanicRefillOfferPrice[player] = price;
	MechanicRefillOfferVehicle[player] = vID;
	SetTimerEx("MechanicStopRefillOffer", 10000, false, "i", player);
	format(str, sizeof(str), "Igrac %s Vam je ponudio %dl goriva za %d$. Da prihvatite ponudu kucajte /accept", sendername, litre, price);
	SCM(player, BOJA_ZELENA, str);
	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Ponudili ste igracu %s popravku sipanje %dl goriva za %d$.", sendername, litre, price);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:dopunigorivo(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste mehanicar!");
	if(MechanicDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete koristiti ovu komandu dok ste u vozilu!");
	new player, price, litre, sendername[MAX_PLAYER_NAME], str[128];
	sendername = GetPlayerNameEx(playerid);
	if(sscanf(params, "rii", player, litre, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /dopunigorivo [id/deo imena igraca] [litri] [cena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da koristite komandu na samom sebi!");
	if(!IsPlayerInAnyVehicle(player)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije u vozilu!");
	new vID = GetPlayerVehicleID(player);
	if(vEngine[vID] == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Motor vozila nije ugasen!");
	if(IsABike(vID) && (vFuel[vID]+litre > 30)) return SCM(playerid, BOJA_CRVENA, "GRESKA: U vozilo ne moze stati toliko goriva!");
	else if(vFuel[vID]+litre > 60) return SCM(playerid, BOJA_CRVENA, "GRESKA: U vozilo ne moze stati toliko goriva!");
	MechanicRefillOffer[player] = 1;
	MechanicRefillPlayerOffer[player] = playerid;
	MechanicRefillLitre[player] = litre;
	MechanicRefillOfferPrice[player] = price;
	MechanicRefillOfferVehicle[player] = vID;
	SetTimerEx("MechanicStopRefillOffer", 10000, false, "i", player);
	format(str, sizeof(str), "Igrac %s Vam je ponudio %dl goriva za %d$. Da prihvatite ponudu kucajte /accept", sendername, litre, price);
	SCM(player, BOJA_ZELENA, str);
	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Ponudili ste igracu %s popravku sipanje %dl goriva za %d$.", sendername, litre, price);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:hauba(playerid, params[], help)
{
	#pragma unused help
	new Float:X, Float:Y, Float:Z, engine, lights, alarm, doors, bonnet, boot, objective;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    GetVehiclePos(i, X, Y, Z);
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, X, Y, Z))
	    {
	        GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
	        if(vehHood[i] == 0)
			{
				SetVehicleParamsEx(i, engine, lights, alarm, doors, 1, boot, objective);
				vehHood[i] = 1;
			}
	        else
			{
				SetVehicleParamsEx(i, engine, lights, alarm, doors, 0, boot, objective);
				vehHood[i] = 0;
			}
		}
	}
	return 1;
}

YCMD:gepek(playerid, params[], help)
{
	#pragma unused help
	new Float:X, Float:Y, Float:Z, engine, lights, alarm, doors, bonnet, boot, objective;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    GetVehiclePos(i, X, Y, Z);
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, X, Y, Z))
	    {
	        GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
	        if(vehTrunk[i] == 0)
			{
				SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, 1, objective);
				vehTrunk[i] = 1;
			}
	        else
			{
				SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, 0, objective);
				vehTrunk[i] = 0;
			}
		}
	}
	return 1;
}
//---------------------------------------------------------------------------- > POSAO TAXISTE
YCMD:fare(playerid, params[], help)
{
	#pragma unused help
	new price, vID, str[128], sendername[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pJob] != 5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste taxista!");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	if(!IsATaxiCar(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u taxiju!");
	if(GetPlayerState(playerid) == 2 && TaxiDuty[playerid] == 1)
	{
        PlayerInfo[playerid][pMoney] += TaxiMoney[playerid];
	    GivePlayerMoney(playerid, TaxiMoney[playerid]);
	    SavePlayer(playerid);

		TaxiDuty[playerid] = 9999;
		TaxiStartingPrice[playerid] = 0;
		TaxiMoney[playerid] = 0;

		taxidrivers--;

		format(str, sizeof(str), "Vise niste na duznosti, zaradili ste %d$", TaxiMoney[playerid]);
		SCM(playerid, BOJA_NARANDZASTA, str);
	}
	else if(GetPlayerState(playerid) == 2 && TaxiDuty[playerid] == 9999)
	{
	    if(sscanf(params, "i", price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /fare [pocetna cena]");
		if(price < 1 || price >  100) return SCM(playerid, BOJA_CRVENA, "GRESKA: Cena voznje ne moze biti ispod 1$ i iznad 100$!");

		TaxiDuty[playerid] = 1;
		TaxiStartingPrice[playerid] = price;
		TaxiMoney[playerid] = 0;

		taxidrivers++;

		sendername = GetPlayerNameEx(playerid);
		format(str, sizeof(str), "Taxista %s je sada na duznosti, pocetna cena %d$", sendername, TaxiStartingPrice[playerid]);
		SendClientMessageToAll(BOJA_PLAVA, str);
	}
	return 1;
}

//---------------------------------------------------------------------------- > POSAO DILERA
YCMD:prodajdrogu(playerid, params[], help)
{
	#pragma unused help
	new player, ammount, price, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], str[256];
	//if(PlayerInfo[playerid][pJob] != 6) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste diler!");
	if(DrugSellOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste ponudili nekome drogu!");
	if(sscanf(params, "rii", player, ammount, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /prodajdrogu [id igraca/deo imena] [kolicina] [cena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan id/deo imena igraca!");
	if(ammount > PlayerInfo[playerid][pDrug]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko droge!");
	if(DrugBuyOffer[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igracu je vec neko ponudio da kupi drogu!");
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");

	DrugSellOffer[playerid] = 1;
	DrugBuyOffer[player] = 1;
	DrugPlayerOffer[player] = playerid;
	DrugOfferAmmount[player] = ammount;
	DrugOfferPrice[player] = price;

	SetTimerEx("DrugStopOffer", 10000, false, "ii", playerid, player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "%s Vam je ponudio %d droge za %d$. Da prihvatite ponudu /prihvati drogu", sendername, ammount, price);
	SCM(player, BOJA_PLAVA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Ponudili ste %s %d droge za %d$", sendername, ammount, price);
	SCM(playerid, BOJA_ZELENA, str);

	return 1;
}

YCMD:prodajmaterijale(playerid, params[], help)
{
	#pragma unused help
	new player, ammount, price, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], str[256];
	//if(PlayerInfo[playerid][pJob] != 6) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste diler!");
	if(MaterialsSellOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste ponudili nekome materijale!");
	if(sscanf(params, "rii", player, ammount, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /prodajdrogu [id igraca/deo imena] [kolicina] [cena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan id/deo imena igraca!");
	if(ammount > PlayerInfo[playerid][pMats]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko materijala!");
	if(MaterialsBuyOffer[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igracu je vec neko ponudio da kupi materijale!");
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");

	MaterialsSellOffer[playerid] = 1;
	MaterialsBuyOffer[player] = 1;
	MaterialsPlayerOffer[player] = playerid;
	MaterialsOfferAmmount[player] = ammount;
	MaterialsOfferPrice[player] = price;

	SetTimerEx("MaterialsStopOffer", 10000, false, "ii", playerid, player);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "%s Vam je ponudio %d materijala za %d$. Da prihvatite ponudu /prihvati materijale", sendername, ammount, price);
	SCM(player, BOJA_PLAVA, str);

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Ponudili ste %s %d matrijala za %d$", sendername, ammount, price);
	SCM(playerid, BOJA_ZELENA, str);

	return 1;
}
//---------------------------------------------------------------------------- > POSAO SVERCERA
YCMD:svercuj(playerid, params[], help)
{
	#pragma unused help
	new job[16], hours, minutes, seconds;
	gettime(hours, minutes, seconds);
	if(sscanf(params, "s[16]", job)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /svercuj [naziv] (drogu / materijale)");
	else
	if(strcmp(job, "drogu", true) == 0)
	{
		if(PlayerInfo[playerid][pJob] != 11) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste svercer droge!");
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
		new vID = GetPlayerVehicleID(playerid);
		if(!IsASmugglerCar(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu za svercovanje!");
		//if(hours < 22 || hours > 6) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete svercovati drogu po danu! (22-06h)");
		if(OnASmugglerMission[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste zapoceli svercovanje!");
		if(!IsTrailerAttachedToVehicle(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste zakacili prikolicu! Zakacite prikolicu da bi zapoceli posao!");
		SetPlayerCheckpoint(playerid, -1574.0731, 84.8807, 3.5547, 5.0);
		OnASmugglerMission[playerid] = 1;
		SCM(playerid, BOJA_ZELENA, "Odvezite prikolicu do checkpointa i napunite je robom.");
	}
	else if(strcmp(job, "materijale", true) == 0)
	{
    	if(PlayerInfo[playerid][pJob] != 12) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste svercer droge!");
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
		new vID = GetPlayerVehicleID(playerid);
		if(!IsASmugglerCar(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu za svercovanje!");
		//if(hours < 22 || hours > 6) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete svercovati materijale po danu! (22-06h)");
		if(OnASmugglerMission[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste zapoceli svercovanje!");
		if(!IsTrailerAttachedToVehicle(vID)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste zakacili prikolicu! Zakacite prikolicu da bi zapoceli posao!");
		SetPlayerCheckpoint(playerid, -1335.4518, 478.9693, 6.8917, 5.0);
		OnASmugglerMission[playerid] = 11;
		SCM(playerid, BOJA_ZELENA, "Odvezite prikolicu do checkpointa i napunite je robom.");
	}
	return 1;
}
//---------------------------------------------------------------------------- > KOMANDE ZA BANKU
YCMD:racun(playerid, params[], help)
{
	#pragma unused help
	if(InBank[playerid] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u banci!");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 576.4832, -1273.1786, 995.6459)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu saltera za otvaranje racuna!");
	if(PlayerInfo[playerid][pBankAccount] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate racun u ovoj banci!");
	PlayerInfo[playerid][pBankAccount] = 1;
	PlayerInfo[playerid][pBankMoney] = 0;
	PlayerInfo[playerid][pBankCredit] = 0;
	SavePlayer(playerid);
	SCM(playerid, BOJA_ZELENA, "Otvorili ste racun u banci. Komande za koriscenje racuna: /bank");
	return 1;
}

YCMD:kredit(playerid, params[], help)
{
	#pragma unused help
	if(InBank[playerid] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u banci!");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1287.5659, 995.6459)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu saltera za podizanje kredita!");
	/*if(PlayerInfo[playerid][pBankCredit] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste podigli kredit u ovoj banci!");
	PlayerInfo[playerid][pBankMoney] += 100000;
	PlayerInfo[playerid][pBankCredit] = 1;
	SavePlayer(playerid);*/
	SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da podignete kredit u ovom trenutku!");
	return 1;
}

YCMD:stavinovac(playerid, params[], help)
{
	#pragma unused help
	new ammount, str[128];
 	if(InBank[playerid] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u banci!");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1265.4025, 995.6459) && !IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1258.3695, 995.6459)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu saltera za uplatu/podizanje novca!");
	if(sscanf(params, "i", ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /stavinovac [suma]");
	if(ammount > GetPlayerMoney(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko novca!");
    PlayerInfo[playerid][pMoney] -= ammount;
	GivePlayerMoney(playerid, -ammount);
	PlayerInfo[playerid][pBankMoney] += ammount;
	SavePlayer(playerid);
	SavePlayer(playerid);
	format(str, sizeof(str), "Stavili ste %d$ novca u banku. Vase novo stanje racuna je %d$", ammount, PlayerInfo[playerid][pBankMoney]);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:stavipare(playerid, params[], help)
{
	#pragma unused help
	new ammount, str[128];
 	if(InBank[playerid] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u banci!");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1265.4025, 995.6459) && !IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1258.3695, 995.6459)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu saltera za uplatu/podizanje novca!");
	if(sscanf(params, "i", ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /stavipare [suma]");
	if(ammount > GetPlayerMoney(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko novca!");
    PlayerInfo[playerid][pMoney] -= ammount;
	GivePlayerMoney(playerid, -ammount);
	PlayerInfo[playerid][pBankMoney] += ammount;
	SavePlayer(playerid);
	SavePlayer(playerid);
	format(str, sizeof(str), "Stavili ste %d$ novca u banku. Vase novo stanje racuna je %d$", ammount, PlayerInfo[playerid][pBankMoney]);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:podigninovac(playerid, params[], help)
{
	#pragma unused help
	new ammount, str[128];
 	if(InBank[playerid] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u banci!");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1265.4025, 995.6459) && !IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1258.3695, 995.6459)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu saltera za uplatu/podizanje novca!");
	if(sscanf(params, "i", ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /podigninovac [suma]");
	if(ammount > PlayerInfo[playerid][pBankMoney]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko novca na racunu!");
    PlayerInfo[playerid][pMoney] += ammount;
	GivePlayerMoney(playerid, ammount);
	PlayerInfo[playerid][pBankMoney] -= ammount;
	SavePlayer(playerid);
	format(str, sizeof(str), "Uzeli ste %d$ novca iz banke. Vase novo stanje racuna je %d$", ammount, PlayerInfo[playerid][pBankMoney]);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:podignipare(playerid, params[], help)
{
	#pragma unused help
	new ammount, str[128];
 	if(InBank[playerid] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u banci!");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1265.4025, 995.6459) && !IsPlayerInRangeOfPoint(playerid, 3.0, 573.1008, -1258.3695, 995.6459)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu saltera za uplatu/podizanje novca!");
	if(sscanf(params, "i", ammount)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /podignipare [suma]");
	if(ammount > PlayerInfo[playerid][pBankMoney]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko novca na racunu!");
    PlayerInfo[playerid][pMoney] += ammount;
	GivePlayerMoney(playerid, ammount);
	PlayerInfo[playerid][pBankMoney] -= ammount;
	SavePlayer(playerid);
	format(str, sizeof(str), "Uzeli ste %d$ novca iz banke. Vase novo stanje racuna je %d$", ammount, PlayerInfo[playerid][pBankMoney]);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

//---------------------------------------------------------------------------- > LSPD
YCMD:su(playerid, params[], help)
{
	#pragma unused help
	new player, reason[32], sendername[MAX_PLAYER_NAME], sendername2[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pOMember] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	if(CopDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(sscanf(params, "rs[16]", player, reason)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /su [id igraca/deo imena] [razlog]");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete osumnjiciti samog sebe!");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");

	PlayerInfo[player][pWanted] = 1;
	PlayerInfo[player][pWantedTimes] += 1;

	SetPlayerColor(player, 0xFA9600AA);

	sendername = GetPlayerNameEx(playerid);
	sendername2 = GetPlayerNameEx(player);

	format(str, sizeof(str), "Osumnjicili ste %s zbog %s.", sendername2, reason);
	SCM(playerid, BOJA_ZELENA, str);

	format(str, sizeof(str), "Osumnjiceni ste zbog %s.", reason);
	SCM(player, BOJA_CRVENA, str);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerInfo[i][pOMember] == 1 && CopDuty[i] != 9999)
	    {
	        format(str, sizeof(str), "Policajac %s je osumnjicio %s.", sendername, sendername2);
	        SCM(i, -1, str);
		}
	}

	SavePlayer(player);
	return 1;
}

YCMD:zatvori(playerid, params[], help)
{
	#pragma unused help
	new player, minutes, price, Float:X, Float:Y, Float:Z, cell, sendername[MAX_PLAYER_NAME], sendername2[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pOMember] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	if(CopDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(sscanf(params, "rii", player, minutes, price)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /zatvori [id igraca/deo imena] [minuta] [cena kazne]");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da zatvorite samog sebe!");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	else if(minutes < 1 || minutes > 10) return SCM(playerid, BOJA_CRVENA, "GRESKA: Minuti ne mogu biti manji od 1 a veci od 10!");
	else if(price < 1 || price > 200) return SCM(playerid, BOJA_CRVENA, "GRESKA: Kazna ne moze biti veca od 200$!");
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");
	if(PlayerInfo[playerid][pArrested] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac je vec zatvoren!");
	cell = random(sizeof(Cells));

	SetPlayerPos(player, Cells[cell][0], Cells[cell][1], Cells[cell][2]);
	GameTextForPlayer(player, "~r~Uhapseni ste!", 2000, 3);

	PlayerInfo[player][pWanted] = 9999;
	PlayerInfo[player][pArrested] = 1;
	PlayerInfo[player][pArrestedTime] = 60*minutes;
	PlayerInfo[player][pArrestedTimes] += 1;

	TogglePlayerControllable(player, 1);
	SetPlayerSpecialAction(player, 0);
	Cuffed[player] = 9999;
	KillTimer(CopTimer[Pulled[player]]);
	TogglePlayerControllable(player, 1);
	Pulling[Pulled[player]] = 9999;
	Pulled[player] = 9999;

	ResetPlayerWeapons(player);
	PlayerInfo[player][pMoney] -= price;
	GivePlayerMoney(player, -price);
	SetPlayerColor(player, 0xFFFFFFAA);

	PlayerInfo[playerid][pMoney] += price;
 	GivePlayerMoney(playerid, price);

	SavePlayer(player);
	SavePlayer(playerid);

	sendername = GetPlayerNameEx(playerid);
	sendername2 = GetPlayerNameEx(player);
	format(str, sizeof(str), "Uhapsili ste %s na %dmin i zaradili %d$.", sendername2, minutes, price);
	SCM(playerid, BOJA_ZELENA, str);

	format(str, sizeof(str), "Uhapsio vas je %s na %dmin, kazna %d$.", sendername, minutes, price);
	SCM(player, BOJA_CRVENA, str);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(PlayerInfo[i][pOMember] == 1 && CopDuty[i] != 9999)
	    {
	        format(str, sizeof(str), ""PLAVA"[POLICIJA] Policajac %s je uhapsio %s.", sendername, sendername2);
	        SCM(i, -1, str);
		}
	}

	return 1;
}

YCMD:stavilisice(playerid, params[], help)
{
	#pragma unused help
	new player, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], sendername2[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pOMember] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	if(CopDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(sscanf(params, "r", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /stavilisice [id igraca/deo imena]");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da vezete samog sebe!");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");
	if(Tazzed[player] == 9999 && GaveUp[player] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac se nije predao!");
	if(Cuffed[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac je vec vezan!");

	TogglePlayerControllable(player, 0);
	SetPlayerSpecialAction(player, 24);

	Cuffed[player] = 1;

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Stavili ste lisice %s.", sendername);
	SCM(playerid, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Policajac %s Vam je stavio lisice.", sendername);
	SCM(player, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(playerid);
	sendername2 = GetPlayerNameEx(player);
	format(str, sizeof(str), "Policajac %s uzima lisice i stavlja %s.", sendername, sendername2);
	SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	return 1;
}

YCMD:skinilisice(playerid, params[], help)
{
	#pragma unused help
	new player, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], sendername2[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pOMember] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	if(CopDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(sscanf(params, "r", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /skinilisice [id igraca/deo imena]");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate lisice na sebi!");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");
	if(Cuffed[player] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije vezan!");

    TogglePlayerControllable(player, 1);
	SetPlayerSpecialAction(player, 0);

	Cuffed[player] = 9999;

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Skinuli ste lisice %s.", sendername);
	SCM(playerid, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Policajac %s Vam je skinuo lisice.", sendername);
	SCM(player, BOJA_CRVENA, str);

	sendername = GetPlayerNameEx(playerid);
	sendername2 = GetPlayerNameEx(player);
	format(str, sizeof(str), "Policajac %s skida lisice %s.", sendername, sendername2);
	SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	return 1;
}
YCMD:vuci(playerid, params[], help)
{
	#pragma unused help
	new player, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pOMember] != 1) return SCM (playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	if(CopDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(sscanf(params, "r", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /vuci [id igraca/deo imena]");
	else if(player == playerid) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da vucete samog sebe!");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nepoznat ID igraca!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Napustite vozilo prvo!");
	if(IsPlayerInAnyVehicle(player)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Prvo izvucite igraca iz vozila!");
	if(Cuffed[player] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igracu nisu stavljene lisice!");
	if(Pulling[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete vuci dva igraca u isto vreme!");
	if(Pulled[player] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Neko vec vuce igraca!");
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste blizu igraca!");

	Pulling[playerid] = player;
	Pulled[player] = playerid;

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Vucete %s.", sendername);
	SCM(playerid, BOJA_ZELENA, str);

	sendername = GetPlayerNameEx(playerid);
	format(str, sizeof(str), "Policajac %s vas vuce.", sendername);
	SCM(player, BOJA_CRVENA, str);

	CopTimer[playerid] = SetTimerEx("Pulling_Timer", 1000, true, "i", playerid, 1);
	return 1;
}

YCMD:pusti(playerid, params[], help)
{
	#pragma unused help
	new player;
	if(PlayerInfo[playerid][pOMember] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	if(CopDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(sscanf(params, "r", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /pusti [id igraca/deo imena]");
	KillTimer(CopTimer[Pulled[player]]);
	TogglePlayerControllable(player, 1);
	Pulling[Pulled[player]] = 9999;
	Pulled[player] = 9999;
	return 1;
}
YCMD:duty(playerid, params[], help)
{
	#pragma unused help
	new sendername[MAX_PLAYER_NAME], str[128];
	sendername = GetPlayerNameEx(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 254.7666, 78.0771, 1003.6406)) // COP DUTY
	{
	    if(PlayerInfo[playerid][pOMember] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	    if(DetectiveDuty[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na duznosti ste! (kao detektiv)");
	    if(MechanicDuty[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na duznosti ste! (kao mehanicar)");
		if(CopDuty[playerid] == 9999)
		{
		    ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 3, 1);
		    GivePlayerWeapon(playerid, 24, 100);
		    SetPlayerColor(playerid, 0x0000FFAA);
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pOSkin]);
		    CopDuty[playerid] = 1;

		    format(str, sizeof(str), "%s je uzeo svoju opremu i spreman je za posao.", sendername);
		    SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
		}
		else
		{
		    ResetPlayerWeapons(playerid);
		    SetPlayerColor(playerid, 0xFFFFFFAA);
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			CopDuty[playerid] = 9999;

		    SCM(playerid, BOJA_ZELENA, "Vise niste na duznosti.");
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, -153.1795, 136.1176, 1001.0859)) // DETECTIVE
	{
	    if(DetectiveDuty[playerid] == 9999)
	    {
		    SetPlayerSkin(playerid, 294);
		    DetectiveDuty[playerid] = 1;

			detectives++;

			SCM(playerid, BOJA_ZELENA, "Sada ste na duznosti.");
		    SendClientMessageToAll(BOJA_PLAVA, "Jedan od Detektiva je sada na duznosti. Da pozovete detektiva okrenite broj 007 (/pozovi 007)");
		}
		else if(DetectiveDuty[playerid] != 9999)
	    {
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		    DetectiveDuty[playerid] = 9999;

			detectives--;

		    SCM(playerid, BOJA_CRVENA, "Vise niste na duznosti.");
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2494.0493, -1464.1653, 24.0250)) // MECHANIC
	{
		if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste mehanicar!");
		if(MechanicDuty[playerid] == 9999)
		{
			SetPlayerSkin(playerid, 50);
			MechanicDuty[playerid] = 1;

			mechanics++;

			format(str, sizeof(str), "Mehanicar %s je sada na duznosti! Da pozovete mehanicara okrenite broj 555 (/pozovi 555)", sendername);
			SendClientMessageToAll(BOJA_PLAVA, str);
		}
		else
		{
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			MechanicDuty[playerid] = 9999;

			mechanics--;

			SCM(playerid, BOJA_PLAVA, "Niste vise na duznosti");
		}
	}
	return 1;
}

YCMD:tazer(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pOMember] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste policajac!");
	if(CopDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");

	new weapons[13][2], sendername[MAX_PLAYER_NAME], str[128];
	sendername = GetPlayerNameEx(playerid);
	for (new i = 0; i < 13; i++)
		GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);

	if(Tazer[playerid] == 9999)
	{

		GivePlayerWeapon(playerid, 23, 5);
		Tazer[playerid] = 1;
		format(str, sizeof(str), "%s ostavlja njegov Desert Deagle i uzima njegov Tazer.", sendername);
		SRM(30.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	else
	{
	    GivePlayerWeapon(playerid, 3, 1);
	    GivePlayerWeapon(playerid, 24, 50);
	    Tazer[playerid] = 9999;
	    format(str, sizeof(str), "%s ostavlja njegov Tazer i uzima njegov Desert Deagle.", sendername);
		SRM(30.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);
	}
	return 1;
}

//---------------------------------------------------------------------------- > OTHER COMMANDS
YCMD:sipajgorivo(playerid, params[], help)
{
	#pragma unused help
	new vID, litre;
	if(sscanf(params, "i", litre)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /sipajgorivo [litara] (x5$)");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	vID = GetPlayerVehicleID(playerid);
	new pump1 = IsPlayerNearPump1(playerid);
	new pump2 = IsPlayerNearPump2(playerid);
	new pump3 = IsPlayerNearPump3(playerid);
	new sbpump1 = 6;
	new sbpump2 = 8;
	new sbpump3 = 7;
	if(pump1 != -1 && pump1 != 0)
	{
		if(vEngine[vID] == 1) return SCM(playerid, BOJA_CRVENA, "Morate prvo ugasiti motor! (/engine)");
		if(GetPlayerMoney(playerid) < litre*5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da sipate gorivo! (litar 5$)");
		if(IsABike(vID) && litre + vFuel[vID] > 30) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da sipate toliko goriva! (30l rezervoar)");
		else if(litre + vFuel[vID] > 60) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da sipate toliko goriva! (60l rezervoar)");
		TogglePlayerControllable(playerid, 0);
		GameTextForPlayer(playerid, "~w~PUNJENJE GORIVA...", 10000, 3);
		SetTimerEx("AntiFreezePlayer", litre, false, "i", playerid);
		pRefuelling[playerid] = 1;
		RefillLitre[playerid] = litre;
		SpecBusinessInfo[sbpump1][sbMoney] += litre*5;
		SaveSpecBizz(sbpump1);
	}
	else if(pump2 != -1 && pump2 != 0)
	{
		if(vEngine[vID] == 1) return SCM(playerid, BOJA_CRVENA, "Morate prvo ugasiti motor! (/engine)");
		if(GetPlayerMoney(playerid) < litre*5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da sipate gorivo! (litar 5$)");
		if(IsABike(vID) && litre + vFuel[vID] > 30) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da sipate toliko goriva! (30l rezervoar)");
		else if(litre + vFuel[vID] > 60) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da sipate toliko goriva! (60l rezervoar)");
		TogglePlayerControllable(playerid, 0);
		GameTextForPlayer(playerid, "~w~PUNJENJE GORIVA...", 10000, 3);
		SetTimerEx("AntiFreezePlayer", litre, false, "i", playerid);
		pRefuelling[playerid] = 1;
		RefillLitre[playerid] = litre;
		SpecBusinessInfo[sbpump2][sbMoney] += litre*5;
		SaveSpecBizz(sbpump2);
	}
	else if(pump3 != -1 && pump3 != 0)
	{
		if(vEngine[vID] == 1) return SCM(playerid, BOJA_CRVENA, "Morate prvo ugasiti motor! (/engine)");
		if(GetPlayerMoney(playerid) < litre*5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da sipate gorivo! (litar 5$)");
		if(IsABike(vID) && litre + vFuel[vID] > 30) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da sipate toliko goriva! (30l rezervoar)");
		else if(litre + vFuel[vID] > 60) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da sipate toliko goriva! (60l rezervoar)");
		TogglePlayerControllable(playerid, 0);
		GameTextForPlayer(playerid, "~w~PUNJENJE GORIVA...", 10000, 3);
		SetTimerEx("AntiFreezePlayer", litre, false, "i", playerid);
		pRefuelling[playerid] = 1;
		RefillLitre[playerid] = litre;
		SpecBusinessInfo[sbpump3][sbMoney] += litre*5;
		SaveSpecBizz(sbpump3);
	}
	else return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na pump!");
	return 1;
}

YCMD:tow(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pJob] != 4) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste mehanicar!");
	if(MechanicDuty[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na duznosti!");
	if(PlayerInfo[playerid][pMechanicLevel] != 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete da koristite ovu komandu!");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
	new vID = GetPlayerVehicleID(playerid);
	new vMDL = GetVehicleModel(vID);
	if(vMDL != 525) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu za mehanicara!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste na mestu vozaca!");
	new Float:X, Float:Y, Float:Z, Float:VX, Float:VY, Float:VZ;
	GetPlayerPos(playerid, X, Y, Z);
	new trailer = 0;
	new veh = 0;
	while((veh < MAX_VEHICLES)&&(!trailer))
	{
	    GetVehiclePos(veh, VX, VY, VZ);
	    if((floatabs(X-VX) < 7.0) && (floatabs(Y-VY) < 7.0) && (floatabs(Z-VZ) < 7.0) && (veh != vID))
		{
		    trailer = 1;
		    if(IsTrailerAttachedToVehicle(vID)) DetachTrailerFromVehicle(vID);
		    else AttachTrailerToVehicle(veh, vID);
		}
		veh++;
	}
	if(!trailer) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nema vozila u blizini!");
	return 1;
}

YCMD:prihvati(playerid, params[], help)
{
	#pragma unused help
	new command[16];
	if(sscanf(params, "s[16]", command))
	{
		SCM(playerid, BOJA_PLAVA, "KORISCENJE: /prihvati [komanda]");
		SCM(playerid, BOJA_PLAVA, "DOSTUPNE KOMANDE: popravku, gorivo, taxi, drogu, materijale");
	}
	else
	{
		if(strcmp(command, "popravku", true) == 0)
		{
		    new vID, sendername[MAX_PLAYER_NAME], str[128];
			if(MechanicRepairOffer[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate ponudu za popravku!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			vID = GetPlayerVehicleID(playerid);
			if(MechanicRepairOfferVehicle[playerid] != vID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu za popravku!");
			if(GetPlayerMoney(playerid) < MechanicRepairOfferPrice[playerid])
			{
			    SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da platite popravku!");
			    MechanicRepairOffer[playerid] = 9999;
				MechanicRepairPlayerOffer[playerid] = 9999;
				MechanicRepairOfferPrice[playerid] = 0;
				MechanicRepairOfferVehicle[playerid] = 9999;
			}

			SetVehicleHealth(vID, 1000);
            PlayerInfo[playerid][pMoney] -= MechanicRepairOfferPrice[playerid];
			GivePlayerMoney(playerid, -MechanicRepairOfferPrice[playerid]);
			SavePlayer(playerid);

            PlayerInfo[MechanicRepairPlayerOffer[playerid]][pMoney] += MechanicRepairOfferPrice[playerid];
			GivePlayerMoney(MechanicRepairPlayerOffer[playerid], MechanicRepairOfferPrice[playerid]);
			PlayerInfo[MechanicRepairPlayerOffer[playerid]][pMechanicPoints] += 1;
			SavePlayer(MechanicRepairPlayerOffer[playerid]);

			sendername = GetPlayerNameEx(MechanicRepairPlayerOffer[playerid]);
			format(str, sizeof(str), "Prihvatili ste ponudu od %s za popravku vozila. Vase vozilo je popravljeno za %d$", sendername, MechanicRepairOfferPrice[playerid]);
			SCM(playerid, BOJA_ZELENA, str);

			sendername = GetPlayerNameEx(playerid);
			format(str, sizeof(str), "%s je prihvatio vasu ponudu za popravku vozila. Zaradili ste %d$", sendername, MechanicRepairOfferPrice[playerid]);
			SCM(MechanicRepairPlayerOffer[playerid], BOJA_ZELENA, str);

			MechanicRepairOffer[playerid] = 9999;
			MechanicRepairPlayerOffer[playerid] = 9999;
			MechanicRepairOfferPrice[playerid] = 0;
			MechanicRepairOfferVehicle[playerid] = 9999;
			return 1;
		}
		else if(strcmp(command, "gorivo", true) == 0)
		{
		    if(MechanicRefillOffer[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate ponudu za sipanje goriva!");
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu!");
			new vID = GetPlayerVehicleID(playerid);
			new sendername[MAX_PLAYER_NAME], str[128];
			if(MechanicRefillOfferVehicle[playerid] != vID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u vozilu za sipanje goriva!");
			if(GetPlayerMoney(playerid) < MechanicRefillOfferPrice[playerid])
			{
			    SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da platite sipanje goriva!");
			    MechanicRefillOffer[playerid] = 9999;
				MechanicRefillPlayerOffer[playerid] = 9999;
				MechanicRefillLitre[playerid] = 0;
				MechanicRefillOfferPrice[playerid] = 0;
				MechanicRefillOfferVehicle[playerid] = 9999;
			}
			vFuel[vID] += MechanicRefillLitre[playerid];
			PlayerInfo[playerid][pMoney] -= MechanicRefillOfferPrice[playerid];
			GivePlayerMoney(playerid, -MechanicRefillOfferPrice[playerid]);
			SavePlayer(playerid);

            PlayerInfo[MechanicRefillPlayerOffer[playerid]][pMoney] += MechanicRefillOfferPrice[playerid];
			GivePlayerMoney(MechanicRefillPlayerOffer[playerid], MechanicRefillOfferPrice[playerid]);
			PlayerInfo[MechanicRefillPlayerOffer[playerid]][pMechanicPoints] += 1;
			SavePlayer(MechanicRefillPlayerOffer[playerid]);

			sendername = GetPlayerNameEx(MechanicRefillPlayerOffer[playerid]);
			format(str, sizeof(str), "Prihvatili ste ponudu od %s za sipanje goriva. Vase vozilo je napunjeno sa %dl goriva za %d$", sendername, MechanicRefillLitre[playerid], MechanicRefillOfferPrice[playerid]);
			SCM(playerid, BOJA_ZELENA, str);

			sendername = GetPlayerNameEx(playerid);
			format(str, sizeof(str), "%s je prihvatio vasu ponudu za tocenje goriva. Zaradili ste %d$", sendername, MechanicRefillOfferPrice[playerid]);
			SCM(MechanicRefillPlayerOffer[playerid], BOJA_ZELENA, str);

			MechanicRefillOffer[playerid] = 9999;
			MechanicRefillPlayerOffer[playerid] = 9999;
			MechanicRefillLitre[playerid] = 0;
			MechanicRefillOfferPrice[playerid] = 0;
			MechanicRefillOfferVehicle[playerid] = 9999;
			return 1;
		}
		else if(strcmp(command, "detektiv", true) == 0)
		{
		    new caller, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], str[128];
		    if(DetectiveCaller == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niko nije zvao Detektiva!");

		    caller = DetectiveCaller;

			if(!IsPlayerConnected(caller))
			{
				SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije na serveru!");
				DetectiveCaller = 9999;
			}
		    else
		    {
			    GetPlayerPos(caller, X, Y, Z);
			    SetPlayerCheckpoint(playerid, X, Y, Z, 3.0);

			    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za detektiva, igrac Vam je oznacen na mapi.");

			    sendername = GetPlayerNameEx(playerid);
			    format(str, sizeof(str), "%s je prihvatio vas poziv za Detektiva, ostanite tu gde ste.");
			    SCM(caller, BOJA_ZELENA, str);

			    DetectiveCaller = 9999;
		    }
		}
		else if(strcmp(command, "mehanicar", true) == 0)
		{
		    new caller, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], str[128];
		    if(MechanicCaller == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niko nije zvao Mehanicara!");

		    caller = MechanicCaller;

			if(!IsPlayerConnected(caller))
			{
				SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije na serveru!");
				MechanicCaller = 9999;
			}
		    else
		    {
			    GetPlayerPos(caller, X, Y, Z);
			    SetPlayerCheckpoint(playerid, X, Y, Z, 3.0);

			    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za mehanicara, igrac Vam je oznacen na mapi.");

			    sendername = GetPlayerNameEx(playerid);
			    format(str, sizeof(str), "%s je prihvatio vas poziv za Mehanicara, ostanite tu gde ste.");
			    SCM(caller, BOJA_ZELENA, str);

			    MechanicCaller = 9999;
		    }
		}
		else if(strcmp(command, "taxi", true) == 0)
		{
		    new caller, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], str[128];
		    if(TaxiCaller == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niko nije zvao Taxi!");

		    caller = TaxiCaller;

			if(!IsPlayerConnected(caller))
			{
				SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije na serveru!");
				TaxiCaller = 9999;
			}
		    else
		    {
			    GetPlayerPos(caller, X, Y, Z);
			    SetPlayerCheckpoint(playerid, X, Y, Z, 3.0);

			    SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv za taxi, igrac Vam je oznacen na mapi.");

			    sendername = GetPlayerNameEx(playerid);
			    format(str, sizeof(str), "%s je prihvatio vas poziv za Taxi, ostanite tu gde ste.");
			    SCM(caller, BOJA_ZELENA, str);

			    TaxiCaller = 9999;
		    }
		}
		else if(strcmp(command, "drogu", true) == 0)
		{
			new sendername[MAX_PLAYER_NAME], str[256];
		    if(DrugBuyOffer[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate ponudu za drogu!");
		    if(GetPlayerMoney(playerid) < DrugOfferPrice[playerid]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da prihvatite ponudu!");

            PlayerInfo[playerid][pMoney] -= DrugOfferPrice[playerid];
		    GivePlayerMoney(playerid, -DrugOfferPrice[playerid]);
		    PlayerInfo[playerid][pDrug] += DrugOfferAmmount[playerid];
		    SavePlayer(playerid);

            PlayerInfo[DrugPlayerOffer[playerid]][pMoney] += DrugOfferPrice[playerid];
		    GivePlayerMoney(DrugPlayerOffer[playerid], DrugOfferPrice[playerid]);
		    PlayerInfo[DrugPlayerOffer[playerid]][pDrug] -= DrugOfferAmmount[playerid];
		    SavePlayer(DrugPlayerOffer[playerid]);

            sendername = GetPlayerNameEx(DrugPlayerOffer[playerid]);
			format(str, sizeof(str), "Prihvatili ste ponudu od %s za drogu. Kupili ste %d droge za %d$", sendername, DrugOfferAmmount[playerid], DrugOfferPrice[playerid]);
			SCM(playerid, BOJA_ZELENA, str);

			sendername = GetPlayerNameEx(playerid);
			format(str, sizeof(str), "%s je prihvatio ponudu za drogu. Prodali ste %d droge i zaradili %d$", sendername, DrugOfferAmmount[playerid], DrugOfferPrice[playerid]);
			SCM(DrugPlayerOffer[playerid], BOJA_ZELENA, str);

		    DrugSellOffer[DrugPlayerOffer[playerid]] = 9999;
			DrugBuyOffer[playerid] = 9999;
			DrugPlayerOffer[playerid] = 9999;
			DrugOfferAmmount[playerid] = 0;
			DrugOfferPrice[playerid] = 0;
		}
		else if(strcmp(command, "materijale", true) == 0)
		{
			new sendername[MAX_PLAYER_NAME], str[256];
		    if(MaterialsBuyOffer[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate ponudu za materijale!");
		    if(GetPlayerMoney(playerid) < MaterialsOfferPrice[playerid]) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da prihvatite ponudu!");

            PlayerInfo[playerid][pMoney] -= MaterialsOfferPrice[playerid];
		    GivePlayerMoney(playerid, -MaterialsOfferPrice[playerid]);
		    PlayerInfo[playerid][pMats] += MaterialsOfferAmmount[playerid];
		    SavePlayer(playerid);

            PlayerInfo[MaterialsPlayerOffer[playerid]][pMoney] += MaterialsOfferPrice[playerid];
		    GivePlayerMoney(MaterialsPlayerOffer[playerid], MaterialsOfferPrice[playerid]);
		    PlayerInfo[MaterialsPlayerOffer[playerid]][pMats] -= MaterialsOfferAmmount[playerid];
		    SavePlayer(MaterialsPlayerOffer[playerid]);

            sendername = GetPlayerNameEx(MaterialsPlayerOffer[playerid]);
			format(str, sizeof(str), "Prihvatili ste ponudu od %s za materijle. Kupili ste %d materijala za %d$", sendername, MaterialsOfferAmmount[playerid], MaterialsOfferPrice[playerid]);
			SCM(playerid, BOJA_ZELENA, str);

			sendername = GetPlayerNameEx(playerid);
			format(str, sizeof(str), "%s je prihvatio ponudu za materijale. Prodali ste %d materijala i zaradili %d$", sendername, MaterialsOfferAmmount[playerid], MaterialsOfferPrice[playerid]);
			SCM(MaterialsPlayerOffer[playerid], BOJA_ZELENA, str);

		    MaterialsSellOffer[MaterialsPlayerOffer[playerid]] = 9999;
			MaterialsBuyOffer[playerid] = 9999;
			MaterialsPlayerOffer[playerid] = 9999;
			MaterialsOfferAmmount[playerid] = 0;
			MaterialsOfferPrice[playerid] = 0;
		}
		else
		{
		    SCM(playerid, BOJA_PLAVA, "KORISCENJE: /prihvati [komanda]");
			SCM(playerid, BOJA_PLAVA, "DOSTUPNE KOMANDE: popravku, gorivo, taxi, drogu, materijale");
		}
	}
	return 1;
}

YCMD:stadium(playerid, params[], help)
{
	#pragma unused help
	new stadium, vID;
	if(sscanf(params, "i", stadium)) return SCM(playerid, BOJA_CRVENA, "KORISCENJE: /stadium [1-5]");
	switch(stadium)
	{
	    case 1:
	    {
     		if(IsPlayerInAnyVehicle(playerid))
			{
				vID = GetPlayerVehicleID(playerid);
		  		SetVehiclePos(vID, -1398.065307, -217.028900, 1051.115844);
		  		LinkVehicleToInterior(vID, 7);
			}
			else
			{
	        	SetPlayerPos(playerid, -1398.065307, -217.028900, 1051.115844);
	        	SetPlayerInterior(playerid, 7);
   			}
		}
		case 2:
	    {
	        if(IsPlayerInAnyVehicle(playerid))
			{
				vID = GetPlayerVehicleID(playerid);
		  		SetVehiclePos(vID, -1398.103515, 937.631164, 1036.479125);
		  		LinkVehicleToInterior(vID, 15);
			}
			else
			{
	        	SetPlayerPos(playerid, -1398.103515, 937.631164, 1036.479125);
	        	SetPlayerInterior(playerid, 15);
	        }
		}
		case 3:
	    {
	        if(IsPlayerInAnyVehicle(playerid))
			{
				vID = GetPlayerVehicleID(playerid);
		  		SetVehiclePos(vID, -1444.645507, -664.526000, 1053.572998);
		  		LinkVehicleToInterior(vID, 4);
			}
			else
			{
	        	SetPlayerPos(playerid, -1444.645507, -664.526000, 1053.572998);
	        	SetPlayerInterior(playerid, 4);
	        }
		}
		case 4:
	    {
	        if(IsPlayerInAnyVehicle(playerid))
			{
				vID = GetPlayerVehicleID(playerid);
		  		SetVehiclePos(vID, -1465.268676, 1557.868286, 1052.531250);
		  		LinkVehicleToInterior(vID, 14);
			}
			else
			{
	        	SetPlayerPos(playerid, -1465.268676, 1557.868286, 1052.531250);
	        	SetPlayerInterior(playerid, 14);
   			}
		}
		case 5:
	    {
	        if(IsPlayerInAnyVehicle(playerid))
			{
				vID = GetPlayerVehicleID(playerid);
		  		SetVehiclePos(vID, -1401.829956, 107.051300, 1032.273437);
		  		LinkVehicleToInterior(vID, 1);
			}
			else
			{
	        	SetPlayerPos(playerid, -1401.829956, 107.051300, 1032.273437);
	        	SetPlayerInterior(playerid, 1);
   			}
		}
	}
	return 1;
}

YCMD:exitstadium(playerid, params[], help)
{
	#pragma unused help
	new vID;
	if(IsPlayerInAnyVehicle(playerid))
	{
	    vID = GetPlayerVehicleID(playerid);
	    SetVehiclePos(vID, 1642.2903, -2333.3423, 13.5469);
		LinkVehicleToInterior(vID, 0);
	}
	else
	{
		SetPlayerPos(playerid, 1642.2903, -2333.3423, 13.5469);
		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

YCMD:ajetpack(playerid, params[], help)
{
	#pragma unused help
	if(!IsPlayerAdmin(playerid)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste ovlasceni da koristite ovu komandu!");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	return 1;
}

YCMD:licnakarta(playerid, params[], help)
{
	#pragma unused help
	if(InCityHall[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u opstini!");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1470.7263, -1779.7361, 999)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste za salterom za izdavanje licnih karti!");
	if(PlayerInfo[playerid][pIdentityCard] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate licnu kartu!");
	SCM(playerid, BOJA_ZELENA, "Izvadili ste licnu kartu. Da pogledate vase podatke kucajte /stats");
	PlayerInfo[playerid][pIdentityCard] = 1;
	SavePlayer(playerid);
	return 1;
}

YCMD:stats(playerid, params[], help)
{
	#pragma unused help
	ShowStats(playerid, playerid);
	return 1;
}

YCMD:ss(playerid, params[], help)
{
	#pragma unused help
	new player, Float:X, Float:Y, Float:Z;
	if(sscanf(params, "r", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /ss [id igraca/deo imena]");
	GetPlayerPos(player, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");
	ShowStats(playerid, player);
	return 1;
}

//---------------------------------------------------------------------------- > MOBILE SYSTEM
YCMD:kupitelefon(playerid, params[], help)
{
	#pragma unused help
	if(InBusiness[playerid] != 9999 && BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
	if(PlayerInfo[playerid][pMobile] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate mobilni!");
	if(GetPlayerMoney(playerid) < 50) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite mobilni!");
    PlayerInfo[playerid][pMoney] += 50;
 	GivePlayerMoney(playerid, -50);
	PlayerInfo[playerid][pMobile] = 1;
	SavePlayer(playerid);
	SCM(playerid, BOJA_ZELENA, "Kupili ste mobilni.");
	return 1;
}

YCMD:kupikarticu(playerid, params[], help)
{
	#pragma unused help
	new str[128];
	new number = 100000 + random(899999);
	if(InBusiness[playerid] != 9999 && BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
	if(PlayerInfo[playerid][pMobileNumber] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec imate SIM karticu!");
	if(GetPlayerMoney(playerid) < 10) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da kupite SIM karticu!");
    PlayerInfo[playerid][pMoney] -= 10;
 	GivePlayerMoney(playerid, -10);
	PlayerInfo[playerid][pMobileNumber] = number;
	SavePlayer(playerid);
	format(str, sizeof(str), "Kupili ste SIM karticu. Vas broj je %d", number);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:dopunikredit(playerid, params[], help)
{
	#pragma unused help
	new credit, str[128];
	if(sscanf(params, "i", credit)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /dopunikredit [iznos]");
	if(InBusiness[playerid] != 9999 && BusinessInfo[InBusiness[playerid]][bType] != 2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
	if(GetPlayerMoney(playerid) < credit*2) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno novca da uplatite kredit!");
	PlayerInfo[playerid][pMobileCredit] += credit;
	PlayerInfo[playerid][pMoney] -= credit*2;
	GivePlayerMoney(playerid, -(credit*2));
	SavePlayer(playerid);
	format(str, sizeof(str), "Dopunili ste vas kredit za %d", credit);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:broj(playerid, params[], help)
{
	#pragma unused help
	new player, sendername[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pAddressBook] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate imenik!");
	if(sscanf(params, "i", player)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /broj [id igraca/deo imena]");
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Pogresan ID igraca!");
	if(PlayerInfo[player][pMobile] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nema SIM karticu!");

	sendername = GetPlayerNameEx(player);
	format(str, sizeof(str), "Broj igraca %s je: %d", sendername, PlayerInfo[player][pMobileNumber]);
	SCM(playerid, BOJA_ZELENA, str);
	return 1;
}

YCMD:pozovi(playerid, params[], help)
{
	#pragma unused help
	new number, sendername[MAX_PLAYER_NAME], str[128];
	if(sscanf(params, "i", number)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /pozovi [id igraca/deo imena]");
	if(PlayerInfo[playerid][pMobile] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate mobilni!");
	if(PlayerInfo[playerid][pMobileNumber] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate SIM karticu!");
	if(PlayerInfo[playerid][pMobileCredit] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate kredita!");
	if(InCall[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste u pozivu! Da prekinete poziv kucajte /prekinipoziv");
	if(number == 007)
	{
	    if(PlayerInfo[playerid][pMobileCredit] < 5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno kredita!");
	    if(detectives == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Trenutno nema Detektiva na duznosti!");

	    DetectiveCaller = playerid;

	    format(str, sizeof(str), "%s je potreban Detektiv, da prihvatite poziv kucajte /prihvati detektiv", sendername);
	    SendJobMessage(1, BOJA_ZELENA, str);

	    SCM(playerid, BOJA_ZELENA, "Detektiv sluzba je prihvatila vas poziv.");
	    SCM(playerid, BOJA_ZELENA, "Svi Detektivi su informisani o vasem pozivu. Ocekujte uskoro da neko prihvati vas zahtev.");
	    SCM(playerid, BOJA_ZELENA, "Prekinuli su vezu.");

	    PlayerInfo[playerid][pMobileCredit] -= 5;
	    SavePlayer(playerid);

	    format(str, sizeof(str), "MTS: Trenutno stanje na vasem racunu je %d$", PlayerInfo[playerid][pMobileCredit]);
		SCM(playerid, BOJA_ZELENA, str);
	}
	if(number == 555)
	{
	    if(PlayerInfo[playerid][pMobileCredit] < 5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno kredita!");
	    if(mechanics == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Trenutno nema Mehanicara na duznosti!");

	    MechanicCaller = playerid;

	    format(str, sizeof(str), "%s je potreban Mehanicar, da prihvatite poziv kucajte /prihvati mehanicar", sendername);
	    SendJobMessage(4, BOJA_ZELENA, str);

	    SCM(playerid, BOJA_ZELENA, "Mehanicarska sluzba je prihvatila vas poziv.");
	    SCM(playerid, BOJA_ZELENA, "Svi Mehanicari su informisani o vasem pozivu. Ocekujte uskoro da neko prihvati vas zahtev.");
	    SCM(playerid, BOJA_ZELENA, "Prekinuli su vezu.");

	    PlayerInfo[playerid][pMobileCredit] -= 5;
	    SavePlayer(playerid);

	    format(str, sizeof(str), "MTS: Trenutno stanje na vasem racunu je %d$", PlayerInfo[playerid][pMobileCredit]);
		SCM(playerid, BOJA_ZELENA, str);
	}
	else if(number == 722722)
	{
		if(PlayerInfo[playerid][pMobileCredit] < 5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno kredita!");
		if(taxidrivers == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Trenutno nema Taxista na duznosti!");
		if(TaxiTime[playerid] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Ne mozete pozvati taxi u ovom trenutku!");

		TaxiCaller = playerid;

		format(str, sizeof(str), "%s je potreban prevoz. da prihvatite poziv kucajte /prihvati taxi", sendername);
		SendJobMessage(5, BOJA_ZELENA, str);

		SCM(playerid, BOJA_ZELENA, "S Taxi je prihvatio vas poziv.");
		SCM(playerid, BOJA_ZELENA, "Svi Taxisti su informisani o vasem pozivu. Ocekujte uskoro da neko prihvati vas zahtev.");
		SCM(playerid, BOJA_ZELENA, "Prekinuli su vezu.");

		PlayerInfo[playerid][pMobileCredit] -= 5;
		SavePlayer(playerid);

		format(str, sizeof(str), "MTS: Trenutno stanje na vasem racunu je %d$", PlayerInfo[playerid][pMobileCredit]);
		SCM(playerid, BOJA_ZELENA, str);
		return 1;
	}
	else
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(PlayerInfo[i][pMobileNumber] == number)
			{
				if(InCall[i] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Broj je zauzet!");
				iCall[playerid] = 1;
				Caller[i] = playerid;
				CalledPlayer[playerid] = i;
				GetPlayerName(i, sendername, sizeof(sendername));
				format(str, sizeof(str), "Pozivate %s", sendername);
				SCM(playerid, BOJA_PLAVA, str);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(str, sizeof(str), "%s (%d) vas zove. Da se javite kucajte /prihvatipoziv", sendername, PlayerInfo[playerid][pMobileNumber]);
				SCM(i, BOJA_PLAVA, str);
				break;
			}
		}
		if(CalledPlayer[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Izabrali ste nepostojeci broj!");
	}
	return 1;
}

YCMD:prihvatipoziv(playerid, params[], help)
{
	#pragma unused help
	new sendername[MAX_PLAYER_NAME], str[128];
	InCall[playerid] = 1;
	InCall[Caller[playerid]] = 1;
	PlayerInfo[Caller[playerid]][pMobileCredit] -= 1;
	SavePlayer(Caller[playerid]);
	SCM(playerid, BOJA_ZELENA, "Prihvatili ste poziv.");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(str, sizeof(str), "Igrac %s je prihvatio poziv.", sendername);
	SCM(Caller[playerid], BOJA_ZELENA, str);
	return 1;
}

YCMD:prekinipoziv(playerid, params[], help)
{
	#pragma unused help
	new sendername[MAX_PLAYER_NAME], str[128];
	if(iCall[playerid] != 9999)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    SCM(playerid, BOJA_CRVENA, "Prekinuli ste poziv");
	    format(str, sizeof(str), "%s je prekinuo poziv.", sendername);
	    SCM(CalledPlayer[playerid], BOJA_CRVENA, str);
		InCall[playerid] = 9999;
		InCall[CalledPlayer[playerid]] = 9999;
		CalledPlayer[Caller[playerid]] = 9999;
		Caller[playerid] = 9999;
	}
	else
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    SCM(playerid, BOJA_CRVENA, "Prekinuli ste poziv");
	    format(str, sizeof(str), "%s je prekinuo poziv.", sendername);
	    SCM(Caller[playerid], BOJA_CRVENA, str);
		InCall[playerid] = 9999;
		InCall[Caller[playerid]] = 9999;
		CalledPlayer[Caller[playerid]] = 9999;
		Caller[playerid] = 9999;
	}

	return 1;
}

YCMD:oglas(playerid, params[], help)
{
	#pragma unused help
	new text[128], str[128], sendername[MAX_PLAYER_NAME];
	if(sscanf(params, "s[128]", text)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /oglas [text]");
	if(PlayerInfo[playerid][pMobile] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate mobilni!");
	if(PlayerInfo[playerid][pMobileNumber] == 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate SIM karticu!");
	if(PlayerInfo[playerid][pMobileCredit] < 5) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate dovoljno kredita! (5$ potrebno)");
	if(AdvertisementTime[playerid] != 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vreme izmedju oglasa mora biti najmanje 2 minuta!");
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(str, sizeof(str), "OGLAS - "PLAVA"%s ["BELA"%d"PLAVA"]", sendername, PlayerInfo[playerid][pMobileNumber]);
	SendClientMessageToAll(BOJA_BELA, str);
	format(str, sizeof(str), ""BELA"TEKST OGLASA: "ZELENA"%s", text);
	SendClientMessageToAll(BOJA_BELA, str);
	AdvertisementTime[playerid] = 120;
	PlayerInfo[playerid][pMobileCredit] -= 5;
	SavePlayer(playerid);
	return 1;
}

YCMD:showtd(playerid, params[], help)
{
	#pragma unused help
	TextDrawShowForPlayer(playerid, DateTD);
	TextDrawShowForPlayer(playerid, TimeTD);
    TextDrawShowForPlayer(playerid, ServerTD);
    TextDrawShowForPlayer(playerid, BoxTD);
    TextDrawShowForPlayer(playerid, RandomMessagesTD);
    TextDrawShowForPlayer(playerid, BankMoney[playerid]);
    return 1;
}

YCMD:hidetd(playerid, params[], help)
{
	#pragma unused help
	TextDrawHideForPlayer(playerid, DateTD);
	TextDrawHideForPlayer(playerid, TimeTD);
    TextDrawHideForPlayer(playerid, ServerTD);
    TextDrawHideForPlayer(playerid, BoxTD);
    TextDrawHideForPlayer(playerid, RandomMessagesTD);
    TextDrawHideForPlayer(playerid, BankMoney[playerid]);
    return 1;
}

/*YCMD:apayday(playerid, params[], help)
{
	#pragma unused help
	PayDay();
	return 1;
}*/

YCMD:tut(playerid, params[], help)
{
	#pragma unused help
	TogglePlayerControllable(playerid, 0);
	PlayerOnTutorial[playerid] = 1;
	SetTimerEx("PlayerTutorial", 10000, false, "i", playerid);
	return 1;
}

YCMD:tutorial(playerid, params[], help)
{
	#pragma unused help
	new tut = PlayerInfo[playerid][pOnTut];
	if(PlayerInfo[playerid][pTut] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste odradili tutorial!");
	if(PlayerOnTutorial[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste na tutorialu, da prekinete tutorial kucajte /canceltutorial");
	if(OnATruckMission[playerid] != 9999 || DetectiveSearchingOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na poslu ste!");
	SCM(playerid, BOJA_PLAVA, "Zapoceli ste tutorial. Sve sto treba da uradite, jeste da idete do checkpointa i pratite uputstva koja Vam budu davana.");
	SCM(playerid, BOJA_PLAVA, "Checkpointi ce Vam biti oznaceni na mapi.");
	SCM(playerid, BOJA_PLAVA, "Po zavrsetku tutoriala, dobicete 500$.");

	PlayerOnTutorial[playerid] = 1;
	if(tut == 0)
	{
	    SetPlayerCheckpoint(playerid, TutorialCheckpoint[1][0], TutorialCheckpoint[1][1], TutorialCheckpoint[1][2], 3.0);
		PlayerInfo[playerid][pOnTut] = 1;
		SavePlayer(playerid);
	}
	else SetPlayerCheckpoint(playerid, TutorialCheckpoint[tut][0], TutorialCheckpoint[tut][1], TutorialCheckpoint[tut][2], 3.0);
	return 1;
}

YCMD:tutorijal(playerid, params[], help)
{
	#pragma unused help
	new tut = PlayerInfo[playerid][pOnTut];
	if(PlayerInfo[playerid][pTut] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste odradili tutorial!");
	if(PlayerOnTutorial[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste na tutorialu, da prekinete tutorial kucajte /canceltutorial");
	if(OnATruckMission[playerid] != 9999 || DetectiveSearchingOffer[playerid] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Na poslu ste!");
	SCM(playerid, BOJA_PLAVA, "Zapoceli ste tutorial. Sve sto treba da uradite, jeste da idete do checkpointa i pratite uputstva koja Vam budu davana.");
	SCM(playerid, BOJA_PLAVA, "Checkpointi ce Vam biti oznaceni na mapi.");
	SCM(playerid, BOJA_PLAVA, "Po zavrsetku tutoriala, dobicete 500$.");

	PlayerOnTutorial[playerid] = 1;
	if(tut == 0)
	{
	    SetPlayerCheckpoint(playerid, TutorialCheckpoint[1][0], TutorialCheckpoint[1][1], TutorialCheckpoint[1][2], 3.0);
		PlayerInfo[playerid][pOnTut] = 1;
		SavePlayer(playerid);
	}
	else SetPlayerCheckpoint(playerid, TutorialCheckpoint[tut][0], TutorialCheckpoint[tut][1], TutorialCheckpoint[tut][2], 3.0);
	return 1;
}

YCMD:prekinitutorial(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pTut] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste odradili tutorial!");
	if(PlayerOnTutorial[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste zapoceli tutorial!");
	SCM(playerid, BOJA_CRVENA, "Prekinuli ste tutorial.");
	PlayerOnTutorial[playerid] = 9999;
	DisablePlayerCheckpoint(playerid);
	return 1;
}

YCMD:prekinitutorijal(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pTut] != 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Vec ste odradili tutorial!");
	if(PlayerOnTutorial[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste zapoceli tutorial!");
	SCM(playerid, BOJA_CRVENA, "Prekinuli ste tutorial.");
	PlayerOnTutorial[playerid] = 9999;
	DisablePlayerCheckpoint(playerid);
	return 1;
}

YCMD:bug(playerid, params[], help)
{
	#pragma unused help
	new text;
	if(sscanf(params, "s[256]", text)) return SCM(playerid, BOJA_PLAVA,"KORISCENJE: /bug [text]");
	new str[256];
	format(str, 256, "|| BUG || %s", text);
	LogBug(BUGREPORT, str);
	SCM(playerid, BOJA_ZELENA, "Hvala Vam na prijavi bug-a.");
	return 1;
}

YCMD:shop(playerid, params[], help)
{
	#pragma unused help
	if(InBusiness[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
	if(BusinessInfo[InBusiness[playerid]][bType] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
	SPD(playerid, DIALOG_SHOP, DIALOG_STYLE_LIST, "Shop", "Telefon \nSIM kartica \nDopuna \nImenik", "U redu", "Izadji");
	return 1;
}

YCMD:prodavnica(playerid, params[], help)
{
	#pragma unused help
	if(InBusiness[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
	if(BusinessInfo[InBusiness[playerid]][bType] != 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u prodavnici!");
	SPD(playerid, DIALOG_SHOP, DIALOG_STYLE_LIST, "Shop", "Telefon \nSIM kartica \nDopuna \nImenik", "U redu", "Izadji");
	return 1;
}

task TimerForAll[1000]()
{
	new sendername[MAX_PLAYER_NAME], str[128];
	//PLAYERS
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerConnected(i)) return 1;
	    if(PlayerInfo[i][pLogged] != 1) return 1;
	    SetPlayerScore(i, PlayerInfo[i][pLevel]);
	    for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(DetectiveDuty[p] != 9999) ShowPlayerNameTagForPlayer(i, p, false);
			else ShowPlayerNameTagForPlayer(i, p, true);
		}
	    //TAXI COUNTER
	    if(TaxiTime[i] > 0 && TaxiDriver[i] < 9999 && IsPlayerInAnyVehicle(i) && IsATaxiCar(GetPlayerVehicleID(i)))
	    {
	        if(GetPlayerMoney(i) <= TaxiTime[i])
	        {
        		PlayerInfo[i][pMoney] -= TaxiTime[i];
             	GivePlayerMoney(i, -TaxiTime[i]);
             	SavePlayer(i);
             	RemovePlayerFromVehicle(i);
             	TaxiMoney[TaxiDriver[i]] += TaxiTime[i];
	            format(str, sizeof(str), "Nemate dovoljno novca da nastavite voznju, platili ste %d$", TaxiTime[i]);
	            SCM(i, BOJA_NARANDZASTA, str);
				format(str, sizeof(str), "Putnik nema dovoljno novca da nastavi voznju. Napustio je vozilo i platio (20)+%d$", TaxiTime[i]);
				SCM(TaxiDriver[i], BOJA_NARANDZASTA, str);
				TaxiTime[i] = 0;
				TaxiDriver[i] = 9999;
			}
			else
			{
			    TaxiTime[i] += 1;
				format(str, sizeof(str), "CENA VOZNJE: %d", TaxiTime[i]);
				GameTextForPlayer(i, str, 1000, 3);
			}
		}
		//MUTED
		if(PlayerInfo[i][pMutedTime] > 0) PlayerInfo[i][pMutedTime] -= 1;
		if(PlayerInfo[i][pMutedTime] == 0 && PlayerInfo[i][pMuted] != 9999) PlayerInfo[i][pMuted] = 9999;
		//TIMER FOR ADVERTISE AND HELP
		if(AdvertisementTime[i] > 0) AdvertisementTime[i] -= 1;
		if(HelpTime[i] > 0) HelpTime[i] -= 1;
		//JAIL
		if((PlayerInfo[i][pRegistered] == 1) && (PlayerInfo[i][pDead] == 9999) && (PlayerInfo[i][pArrested] != 9999))
		{
			format(str, sizeof(str), "U zatvoru ste jos %d sekundi", PlayerInfo[i][pArrestedTime]);
			TextDrawSetString(JailTimeTD[i], str);
			TextDrawShowForPlayer(i, JailTimeTD[i]);
		}
		if(PlayerInfo[i][pArrestedTime] > 0) PlayerInfo[i][pArrestedTime] -= 1;
		else if(PlayerInfo[i][pRegistered] == 1 && PlayerInfo[i][pArrestedTime] == 0 && PlayerInfo[i][pArrested] != 9999)
		{
		    SetPlayerPos(i, 246.8095, 64.0687, 1003.6406);
	    	GameTextForPlayer(i, "~g~Pusteni ste iz zatvora!", 3500, 3);
		    PlayerInfo[i][pArrested] = 9999;
		    TextDrawHideForPlayer(i, JailTimeTD[i]);
		    SavePlayer(i);
		}
		//MONEY BAGS
		if(IsPlayerInRangeOfPoint(i, 1.0, 585.76355, -1257.17932, 982.29999))
		{
		    if(HaveMoneyBag[i] != 9999) return 1;
		    SetPlayerAttachedObject(i, 0, 1550, 15, -0.026831, 0.271080, -0.150249, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); // CJ_MONEY_BAG - moneybag
		    DestroyDynamicObject(moneybag[0]);
		    HaveMoneyBag[i] = 0;
		}
		else if(IsPlayerInRangeOfPoint(i, 1.0, 585.76349, -1255.18335, 982.29999))
		{
		    if(HaveMoneyBag[i] != 9999) return 1;
		    SetPlayerAttachedObject(i, 0, 1550, 15, -0.026831, 0.271080, -0.150249, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); // CJ_MONEY_BAG - moneybag
		    DestroyDynamicObject(moneybag[1]);
		    HaveMoneyBag[i] = 1;
		}
		else if(IsPlayerInRangeOfPoint(i, 1.0, 585.76349, -1256.15796, 982.29999))
		{
		    if(HaveMoneyBag[i] != 9999) return 1;
		    SetPlayerAttachedObject(i, 0, 1550, 15, -0.026831, 0.271080, -0.150249, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); // CJ_MONEY_BAG - moneybag
		    DestroyDynamicObject(moneybag[2]);
		    HaveMoneyBag[i] = 2;
		}
		else if(IsPlayerInRangeOfPoint(i, 1.0, 579.71600, -1257.17932, 982.29999))
		{
		    if(HaveMoneyBag[i] != 9999) return 1;
		    SetPlayerAttachedObject(i, 0, 1550, 15, -0.026831, 0.271080, -0.150249, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); // CJ_MONEY_BAG - moneybag
		    DestroyDynamicObject(moneybag[3]);
		    HaveMoneyBag[i] = 3;
		}
		else if(IsPlayerInRangeOfPoint(i, 1.0, 579.71600, -1255.18335, 982.29999))
		{
		    if(HaveMoneyBag[i] != 9999) return 1;
		    SetPlayerAttachedObject(i, 0, 1550, 15, -0.026831, 0.271080, -0.150249, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); // CJ_MONEY_BAG - moneybag
		    DestroyDynamicObject(moneybag[4]);
		    HaveMoneyBag[i] = 4;
		}
		else if(IsPlayerInRangeOfPoint(i, 1.0, 579.71600, -1256.15796, 982.29999))
		{
		    if(HaveMoneyBag[i] != 9999) return 1;
		    SetPlayerAttachedObject(i, 0, 1550, 15, -0.026831, 0.271080, -0.150249, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000); // CJ_MONEY_BAG - moneybag
		    DestroyDynamicObject(moneybag[5]);
		    HaveMoneyBag[i] = 5;
		}
		//FUEL
		for(new v = 0; v < MAX_VEHICLES; v++)
    	{
			if(IsPlayerInVehicle(i, v))
	  		{
	  			format(str, sizeof(str), "Gorivo: %i", vFuel[v]);
				TextDrawSetString(FuelTD[i], str);
	 	 		TextDrawShowForPlayer(i, FuelTD[i]);
			}
		}
		//ANTI HEALTH HACK
		new Float:health;
		GetPlayerHealth(i, health);
		if(health > 101)
		{

		    SCM(i, BOJA_CRVENA, "ANTICHEAT: Kickovani ste zbog moguceg Health Hacka!");
			GetPlayerName(i, sendername, sizeof(sendername));
		    format(str, sizeof(str), "%s je kickovan od strane Anticheata zbog moguceg Health Hacka!", sendername);
		    SendClientMessageToAll(BOJA_CRVENA, str);
			//Kick(i);
		}
		//ANTI ARMOR HACK
		new Float:armour;
		GetPlayerArmour(i, armour);
		if(armour > 101)
		{
		    SCM(i, BOJA_CRVENA, "ANTICHEAT: Kickovani ste zbog moguceg Armour Hacka!");
			GetPlayerName(i, sendername, sizeof(sendername));
		    format(str, sizeof(str), "%s je kickovan od strane Anticheata zbog moguceg Armour Hacka!", sendername);
		    SendClientMessageToAll(BOJA_CRVENA, str);
			//Kick(i);
		}
		//ANTI SPEED HACK
		if(IsPlayerInAnyVehicle(i))
		{
			new currentspeed = GetPlayerSpeed(i, true);
			if(currentspeed > 300)
			{
			    new vID = GetPlayerVehicleID(i);
				new surf = GetPlayerSurfingVehicleID(i);
			    if(!IsAPlane(vID) && !(GetPlayerState(i) == PLAYER_STATE_PASSENGER) && !(IsATrain(vID)) && surf == INVALID_VEHICLE_ID)
			    {
			        new model[32];
			        new Float:hp;

					GetVehicleHealth(vID, hp);
					GetPlayerName(i, sendername, sizeof(sendername));
					GetVehicleName(vID, model, sizeof(model));
			        format(str, sizeof(str), "Igrac %s (%d) (%d km/h) u %s sa %.2f VehHp.", sendername, i, currentspeed, model, hp);
			        SendClientMessageToAll(BOJA_CRVENA, str);
			    }
			}
		}
	}
	return 1;
}

task LevelCheck[60000]()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerConnected(i)) return 1;
	    if(PlayerInfo[i][pLogged] != 1) return 1;
	    PlayerInfo[i][pPlaytime] += 1;
	    SavePlayer(i);
		SetPlayerScore(i, PlayerInfo[i][pLevel]);
	}
	return 1;
}

ptask PhoneCall[500](playerid)
{
	new sendername[MAX_PLAYER_NAME], str[128];
	if(PlayerInfo[playerid][pLogged] != 1) return 1;
	if(InCall[playerid] == 9999) return 1;
	else
	{
		if(iCall[playerid] == 9999) return 1;
		else
		{
			if(PlayerInfo[playerid][pMobileCredit] == 0)
			{
				iCall[playerid] = 9999;
				InCall[playerid] = 9999;
				InCall[CalledPlayer[playerid]] = 9999;
				SCM(playerid, BOJA_CRVENA, "Nemate dovoljno kredita da nastavite razgovor!");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(str, sizeof(str), "%s nema dovoljno kredita da nastavi razgovor!", sendername);
				SCM(CalledPlayer[playerid], BOJA_CRVENA, str);
				Caller[CalledPlayer[playerid]] = 9999;
				CalledPlayer[playerid] = 9999;
			}
			else
			{
				PlayerInfo[playerid][pMobileCredit] -= 1;
				SavePlayer(playerid);
			}
		}
	}
	return 1;
}

YCMD:obijbanku(playerid, params[], help)
{
	#pragma unused help
	if(vaultdooropened == 1) return SCM(playerid, BOJA_CRVENA, "GRESKA: Banka je vec obijena, pokusajte kasnije!");
	MoveDynamicObject(vaultdoor, 582.98975, -1268.18286, 983.59998, 0.01, 0.00000, 0.00000, 240.00000);
	SCM(playerid, BOJA_ZELENA, "Obili ste banku");
	vaultdooropened = 1;
	SetTimer("vaultdoorclose", 120000, false);
	return 1;
}

YCMD:skinitorbu(playerid, params[], help)
{
	if(HaveMoneyBag[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate torbu sa novcem na ledjima!");
	switch (HaveMoneyBag[playerid])
	{
     	case 0: moneybag[0] = CreateDynamicObject(1550, 585.76355, -1257.17932, 982.29999,   0.00000, 0.00000, 0.00000);
		case 1: moneybag[1] = CreateDynamicObject(1550, 585.76349, -1255.18335, 982.29999,   0.00000, 0.00000, 0.00000);
		case 2: moneybag[2] = CreateDynamicObject(1550, 585.76349, -1256.15796, 982.29999,   0.00000, 0.00000, 0.00000);
		case 3: moneybag[3] = CreateDynamicObject(1550, 579.71600, -1257.17932, 982.29999,   0.00000, 0.00000, 0.00000);
		case 4: moneybag[4] = CreateDynamicObject(1550, 579.71600, -1255.18335, 982.29999,   0.00000, 0.00000, 0.00000);
		case 5: moneybag[5] = CreateDynamicObject(1550, 579.71600, -1256.15796, 982.29999,   0.00000, 0.00000, 0.00000);
	}

    RemovePlayerAttachedObject(playerid, 0);
    HaveMoneyBag[playerid] = 9999;
    PlayerInfo[playerid][pMoney] += 1000;
    GivePlayerMoney(playerid, 1000);
    SavePlayer(playerid);

    SCM(playerid, BOJA_ZELENA, "Skinuli ste torbu i uzeli novac iz nje (1000$)");
	return 1;
}

YCMD:daj(playerid, params[], help)
{
	#pragma unused help
	new command[16], player, Float:X, Float:Y, Float:Z, sendername[MAX_PLAYER_NAME], sendername2[MAX_PLAYER_NAME], str[128];
	GetPlayerPos(playerid, X, Y, Z);
	if(sscanf(params, "s[16]", command))
	{
		SCM(playerid, BOJA_PLAVA, "KORISCENJE: /daj [komanda]");
		SCM(playerid, BOJA_PLAVA, "Dostupne komande: novac, drogu, materijale, oruzje");
	}
    else
	{
		if(!strfind(command, "novac"))
		{
		    new money;
		    if(sscanf(params, "ri", player, money)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /daj novac [id igraca/deo imena] [suma]");
		    if(PlayerInfo[playerid][pMoney] < money || money < 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko novca!");
		    if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");

		    PlayerInfo[playerid][pMoney] -= money;
		    SavePlayer(playerid);

		    PlayerInfo[player][pMoney] += money;
		    SavePlayer(player);

		    sendername = GetPlayerNameEx(playerid);
		    sendername2 = GetPlayerNameEx(player);
		    format(str, sizeof(str), "%s uzima nesto novca i daje %s.", sendername, sendername2);
		    SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);

		    format(str, sizeof(str), "Dali ste %s %d$", sendername2, money);
		    SCM(playerid, BOJA_ZELENA, str);

		    format(str, sizeof(str), "%s Vam je dao %d$", sendername, money);
		    SCM(player, BOJA_ZELENA, str);
		    return 1;
		}
		else if(!strfind(command, "drogu"))
		{
		    new drug;
		    if(sscanf(params, "ri", player, drug)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /daj drogu [id igraca/deo imena] [suma]");
		    if(PlayerInfo[playerid][pDrug] < drug || drug < 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko droge!");
		    if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");

		    PlayerInfo[playerid][pDrug] -= drug;
		    SavePlayer(playerid);

		    PlayerInfo[player][pDrug] += drug;
		    SavePlayer(player);

		    sendername = GetPlayerNameEx(playerid);
		    sendername2 = GetPlayerNameEx(player);
		    format(str, sizeof(str), "%s uzima drogu i daje je %s.", sendername, sendername2);
		    SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);

		    format(str, sizeof(str), "Dali ste %d droge %s", drug, sendername2);
		    SCM(playerid, BOJA_ZELENA, str);

		    format(str, sizeof(str), "%s Vam je dao %d droge", sendername, drug);
		    SCM(player, BOJA_ZELENA, str);
		    return 1;
		}
		else if(!strfind(command, "materijale"))
		{
		    new mats;
		    if(sscanf(params, "ri", player, mats)) return SCM(playerid, BOJA_PLAVA, "KORISCENJE: /daj materijale [id igraca/deo imena] [suma]");
		    if(PlayerInfo[playerid][pMats] < mats || mats < 0) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nemate toliko materijala!");
		    if(!IsPlayerInRangeOfPoint(player, 5.0, X, Y, Z)) return SCM(playerid, BOJA_CRVENA, "GRESKA: Igrac nije blizu vas!");

		    PlayerInfo[playerid][pMats] -= mats;
		    SavePlayer(playerid);

		    PlayerInfo[player][pMats] += mats;
		    SavePlayer(player);

		    sendername = GetPlayerNameEx(playerid);
		    sendername2 = GetPlayerNameEx(player);
		    format(str, sizeof(str), "%s uzima materijale i daje ih %s.", sendername, sendername2);
		    SRM(50.0, playerid, str, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA, BOJA_PLAVA);

		    format(str, sizeof(str), "Dali ste %d materijala %s", mats, sendername2);
		    SCM(playerid, BOJA_ZELENA, str);

		    format(str, sizeof(str), "%s Vam je dao %d materijala", sendername, mats);
		    SCM(player, BOJA_ZELENA, str);
		    return 1;
		}
	}
	return 1;
}

YCMD:akomande(playerid, params[], help)
{
	#pragma unused help
	if(PlayerInfo[playerid][pAdmin] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste admin!");
	SCM(playerid, BOJA_PLAVA, "amakeadmin, amoney, adrug, amats, ahealth, aweapon, askin, ajob, ajoblevel, atime, aweather, arepair, arefill");
	SCM(playerid, BOJA_PLAVA, "goto, port, gethere, getvehhere, getincar, /pm ");
	SCM(playerid, BOJA_PLAVA, "vozilo, unistivozila, uv, respawnujrentvozila, rrv, respawnujsvavozila, rsv");
	return 1;
}

YCMD:komande(playerid, params[], help)
{
	#pragma unused help
	SCM(playerid, BOJA_PLAVA, "POMOC\n/help, /pomoc, /pitaj");
	SCM(playerid, BOJA_PLAVA, "POSAO\n/posao, /otkaz\n/pronadji (Detektiv), /truck (Kamiondzija), /sanitary (JKP), /fare (Taxista)");
	SCM(playerid, BOJA_PLAVA, "/repair, dopunigorivo, tow (Mehanicar)\n/prodajdrogu, /prodajmaterijale (Diler)");
	SCM(playerid, BOJA_PLAVA, "/prodajoruzje (Diler oruzja), /prodajvozilo (Kradljivac automobila)");
	SCM(playerid, BOJA_PLAVA, "VOZILO /iznajmivozilo, /vrativozilo, /napustivozilo, /engine, /pojas, /kaciga, /hauba, /gepek");
	SCM(playerid, BOJA_PLAVA, "ORGANIZACIJA I BANDA /makeleader, /invite, /rankup, /kickout, /r, /zakljucajhq");
	SCM(playerid, BOJA_PLAVA, "PODACI\n/licnakarta, /stats, /ss");
	SCM(playerid, BOJA_PLAVA, "BANKA /racun, /kredit, /stavipare, /uzmipare");
	SCM(playerid, BOJA_PLAVA, "OSTALO /b(usiness), /h(ouse), /a(partment), /v(ehicle)");
	return 1;
}

YCMD:adozvola(playerid, params[], help)
{
	#pragma unused help
	new player, licence, sendername[MAX_PLAYER_NAME], str[128];
	if(sscanf(params, "ri", player, licence))
	{
		SCM(playerid, BOJA_PLAVA, "KORISECENJE: /adozvola [id/deo imena] [1-3]");
		SCM(playerid, BOJA_PLAVA, "1 - KOLA/MOTOR, 2 - AVION/HELIKOPTER, 3 - BROD/CAMAC");
	}
	else if(player == INVALID_PLAYER_ID) return SCM(playerid, BOJA_CRVENA, "GRESKA: Nepostojeci igrac!");
	else if(licence < 1 || licence > 3) return SCM(playerid, BOJA_CRVENA, "GRESKA: Opseg za dozvolu mora biti 1-3!");
	else
	{
	    switch(licence)
	    {
			case 1:
			{
			    PlayerInfo[player][pDrivingLicence] = 1;
			    SavePlayer(player);

			    sendername = GetPlayerNameEx(playerid);
			    format(str, sizeof(str), "Admin %s Vam je dao vozacku dozvolu.", sendername);
			    SCM(player, BOJA_ZELENA, str);

			    sendername = GetPlayerNameEx(player);
			    format(str, sizeof(str), "Dali ste igracu %s vozacku dozvolu.", sendername);
			    SCM(playerid, BOJA_ZELENA, str);
			}
			case 2:
			{
			    PlayerInfo[player][pFlyingLicence] = 1;
			    SavePlayer(player);

			    sendername = GetPlayerNameEx(playerid);
			    format(str, sizeof(str), "Admin %s Vam je dao dozvolu za letenje.", sendername);
			    SCM(player, BOJA_ZELENA, str);

			    sendername = GetPlayerNameEx(player);
			    format(str, sizeof(str), "Dali ste igracu %s dozvolu za letenje.", sendername);
			    SCM(playerid, BOJA_ZELENA, str);
			}
			case 3:
			{
			    PlayerInfo[player][pSailingLicence] = 1;
			    SavePlayer(player);

			    sendername = GetPlayerNameEx(playerid);
			    format(str, sizeof(str), "Admin %s Vam je dao dozvolu za plovenje.", sendername);
			    SCM(player, BOJA_ZELENA, str);

			    sendername = GetPlayerNameEx(player);
			    format(str, sizeof(str), "Dali ste igracu %s dozvolu za plovenje.", sendername);
			    SCM(playerid, BOJA_ZELENA, str);
			}
		}
	}
	return 1;
}

YCMD:dozvola(playerid, params[], help)
{
	#pragma unused help
	if(InDrivingSchool[playerid] == 9999) return SCM(playerid, BOJA_CRVENA, "GRESKA: Niste u auto skoli!");
	SPD(playerid, DIALOG_LICENCE, DIALOG_STYLE_LIST, "Izaberite dozvolu", "Za voznju\nZa letenje\nZa plovidbu", "U redu", "Izadji");
	return 1;
}

public OnPlayerShootPlayer(Shooter, Target, Float:HealthLost, Float:ArmourLost)
{
    if(PlayerInfo[Shooter][pOMember] != 1 && CopDuty[Shooter] != 1) return 1;
	if(GetPlayerWeapon(Shooter) == 23 && Tazer[Shooter] == 1)
 	{
		if(PlayerInfo[Target][pOMember] == 1 && CopDuty[Target] == 1) return 1;
		if(IsPlayerInAnyVehicle(Target)) return 1;
		TogglePlayerControllable(Target, 0);
		Tazzed[Target] = 1;
		SetTimerEx("AntiFreezePlayer", 10000, 0, "i", Target);
		GameTextForPlayer(Target, "~r~tazovani ste...", 3500, 3);
 	}
    return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    new sendername[MAX_PLAYER_NAME], str[128];
    format(str, sizeof(str), ""CRVENA"ANTICHEAT: "BELA"Igrac %s oznacava markerom po mapi (moguce da koristi Teleport Hack)!", sendername);
    for(new i = 0; i < MAX_PLAYERS; i++)
		if(IsPlayerAdmin(i)) SCM(i, BOJA_CRVENA, str);
    return 1;
}

YCMD:skydive(playerid, params[], help)
{
	#pragma unused help
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	SetPlayerPos(playerid, X, Y, Z+2000);
	GivePlayerWeapon(playerid, 46, 1);
	SCM(playerid, BOJA_CRVENA, "IDEMO IDEMO IDEMO! LETI LETI LETI!");

	return 1;
}
